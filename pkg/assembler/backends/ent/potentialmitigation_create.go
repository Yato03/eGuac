// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/cwe"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/potentialmitigation"
)

// PotentialMitigationCreate is the builder for creating a PotentialMitigation entity.
type PotentialMitigationCreate struct {
	config
	mutation *PotentialMitigationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPhase sets the "phase" field.
func (pmc *PotentialMitigationCreate) SetPhase(s string) *PotentialMitigationCreate {
	pmc.mutation.SetPhase(s)
	return pmc
}

// SetNillablePhase sets the "phase" field if the given value is not nil.
func (pmc *PotentialMitigationCreate) SetNillablePhase(s *string) *PotentialMitigationCreate {
	if s != nil {
		pmc.SetPhase(*s)
	}
	return pmc
}

// SetDescription sets the "description" field.
func (pmc *PotentialMitigationCreate) SetDescription(s string) *PotentialMitigationCreate {
	pmc.mutation.SetDescription(s)
	return pmc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pmc *PotentialMitigationCreate) SetNillableDescription(s *string) *PotentialMitigationCreate {
	if s != nil {
		pmc.SetDescription(*s)
	}
	return pmc
}

// SetEffectiveness sets the "effectiveness" field.
func (pmc *PotentialMitigationCreate) SetEffectiveness(s string) *PotentialMitigationCreate {
	pmc.mutation.SetEffectiveness(s)
	return pmc
}

// SetNillableEffectiveness sets the "effectiveness" field if the given value is not nil.
func (pmc *PotentialMitigationCreate) SetNillableEffectiveness(s *string) *PotentialMitigationCreate {
	if s != nil {
		pmc.SetEffectiveness(*s)
	}
	return pmc
}

// SetEffectivenessNotes sets the "effectiveness_notes" field.
func (pmc *PotentialMitigationCreate) SetEffectivenessNotes(s string) *PotentialMitigationCreate {
	pmc.mutation.SetEffectivenessNotes(s)
	return pmc
}

// SetNillableEffectivenessNotes sets the "effectiveness_notes" field if the given value is not nil.
func (pmc *PotentialMitigationCreate) SetNillableEffectivenessNotes(s *string) *PotentialMitigationCreate {
	if s != nil {
		pmc.SetEffectivenessNotes(*s)
	}
	return pmc
}

// SetID sets the "id" field.
func (pmc *PotentialMitigationCreate) SetID(u uuid.UUID) *PotentialMitigationCreate {
	pmc.mutation.SetID(u)
	return pmc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pmc *PotentialMitigationCreate) SetNillableID(u *uuid.UUID) *PotentialMitigationCreate {
	if u != nil {
		pmc.SetID(*u)
	}
	return pmc
}

// AddCweIDs adds the "cwe" edge to the CWE entity by IDs.
func (pmc *PotentialMitigationCreate) AddCweIDs(ids ...uuid.UUID) *PotentialMitigationCreate {
	pmc.mutation.AddCweIDs(ids...)
	return pmc
}

// AddCwe adds the "cwe" edges to the CWE entity.
func (pmc *PotentialMitigationCreate) AddCwe(c ...*CWE) *PotentialMitigationCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pmc.AddCweIDs(ids...)
}

// Mutation returns the PotentialMitigationMutation object of the builder.
func (pmc *PotentialMitigationCreate) Mutation() *PotentialMitigationMutation {
	return pmc.mutation
}

// Save creates the PotentialMitigation in the database.
func (pmc *PotentialMitigationCreate) Save(ctx context.Context) (*PotentialMitigation, error) {
	pmc.defaults()
	return withHooks(ctx, pmc.sqlSave, pmc.mutation, pmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pmc *PotentialMitigationCreate) SaveX(ctx context.Context) *PotentialMitigation {
	v, err := pmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmc *PotentialMitigationCreate) Exec(ctx context.Context) error {
	_, err := pmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmc *PotentialMitigationCreate) ExecX(ctx context.Context) {
	if err := pmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmc *PotentialMitigationCreate) defaults() {
	if _, ok := pmc.mutation.ID(); !ok {
		v := potentialmitigation.DefaultID()
		pmc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmc *PotentialMitigationCreate) check() error {
	return nil
}

func (pmc *PotentialMitigationCreate) sqlSave(ctx context.Context) (*PotentialMitigation, error) {
	if err := pmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pmc.mutation.id = &_node.ID
	pmc.mutation.done = true
	return _node, nil
}

func (pmc *PotentialMitigationCreate) createSpec() (*PotentialMitigation, *sqlgraph.CreateSpec) {
	var (
		_node = &PotentialMitigation{config: pmc.config}
		_spec = sqlgraph.NewCreateSpec(potentialmitigation.Table, sqlgraph.NewFieldSpec(potentialmitigation.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = pmc.conflict
	if id, ok := pmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pmc.mutation.Phase(); ok {
		_spec.SetField(potentialmitigation.FieldPhase, field.TypeString, value)
		_node.Phase = &value
	}
	if value, ok := pmc.mutation.Description(); ok {
		_spec.SetField(potentialmitigation.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := pmc.mutation.Effectiveness(); ok {
		_spec.SetField(potentialmitigation.FieldEffectiveness, field.TypeString, value)
		_node.Effectiveness = &value
	}
	if value, ok := pmc.mutation.EffectivenessNotes(); ok {
		_spec.SetField(potentialmitigation.FieldEffectivenessNotes, field.TypeString, value)
		_node.EffectivenessNotes = &value
	}
	if nodes := pmc.mutation.CweIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   potentialmitigation.CweTable,
			Columns: potentialmitigation.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PotentialMitigation.Create().
//		SetPhase(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PotentialMitigationUpsert) {
//			SetPhase(v+v).
//		}).
//		Exec(ctx)
func (pmc *PotentialMitigationCreate) OnConflict(opts ...sql.ConflictOption) *PotentialMitigationUpsertOne {
	pmc.conflict = opts
	return &PotentialMitigationUpsertOne{
		create: pmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PotentialMitigation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pmc *PotentialMitigationCreate) OnConflictColumns(columns ...string) *PotentialMitigationUpsertOne {
	pmc.conflict = append(pmc.conflict, sql.ConflictColumns(columns...))
	return &PotentialMitigationUpsertOne{
		create: pmc,
	}
}

type (
	// PotentialMitigationUpsertOne is the builder for "upsert"-ing
	//  one PotentialMitigation node.
	PotentialMitigationUpsertOne struct {
		create *PotentialMitigationCreate
	}

	// PotentialMitigationUpsert is the "OnConflict" setter.
	PotentialMitigationUpsert struct {
		*sql.UpdateSet
	}
)

// SetPhase sets the "phase" field.
func (u *PotentialMitigationUpsert) SetPhase(v string) *PotentialMitigationUpsert {
	u.Set(potentialmitigation.FieldPhase, v)
	return u
}

// UpdatePhase sets the "phase" field to the value that was provided on create.
func (u *PotentialMitigationUpsert) UpdatePhase() *PotentialMitigationUpsert {
	u.SetExcluded(potentialmitigation.FieldPhase)
	return u
}

// ClearPhase clears the value of the "phase" field.
func (u *PotentialMitigationUpsert) ClearPhase() *PotentialMitigationUpsert {
	u.SetNull(potentialmitigation.FieldPhase)
	return u
}

// SetDescription sets the "description" field.
func (u *PotentialMitigationUpsert) SetDescription(v string) *PotentialMitigationUpsert {
	u.Set(potentialmitigation.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PotentialMitigationUpsert) UpdateDescription() *PotentialMitigationUpsert {
	u.SetExcluded(potentialmitigation.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *PotentialMitigationUpsert) ClearDescription() *PotentialMitigationUpsert {
	u.SetNull(potentialmitigation.FieldDescription)
	return u
}

// SetEffectiveness sets the "effectiveness" field.
func (u *PotentialMitigationUpsert) SetEffectiveness(v string) *PotentialMitigationUpsert {
	u.Set(potentialmitigation.FieldEffectiveness, v)
	return u
}

// UpdateEffectiveness sets the "effectiveness" field to the value that was provided on create.
func (u *PotentialMitigationUpsert) UpdateEffectiveness() *PotentialMitigationUpsert {
	u.SetExcluded(potentialmitigation.FieldEffectiveness)
	return u
}

// ClearEffectiveness clears the value of the "effectiveness" field.
func (u *PotentialMitigationUpsert) ClearEffectiveness() *PotentialMitigationUpsert {
	u.SetNull(potentialmitigation.FieldEffectiveness)
	return u
}

// SetEffectivenessNotes sets the "effectiveness_notes" field.
func (u *PotentialMitigationUpsert) SetEffectivenessNotes(v string) *PotentialMitigationUpsert {
	u.Set(potentialmitigation.FieldEffectivenessNotes, v)
	return u
}

// UpdateEffectivenessNotes sets the "effectiveness_notes" field to the value that was provided on create.
func (u *PotentialMitigationUpsert) UpdateEffectivenessNotes() *PotentialMitigationUpsert {
	u.SetExcluded(potentialmitigation.FieldEffectivenessNotes)
	return u
}

// ClearEffectivenessNotes clears the value of the "effectiveness_notes" field.
func (u *PotentialMitigationUpsert) ClearEffectivenessNotes() *PotentialMitigationUpsert {
	u.SetNull(potentialmitigation.FieldEffectivenessNotes)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PotentialMitigation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(potentialmitigation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PotentialMitigationUpsertOne) UpdateNewValues() *PotentialMitigationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(potentialmitigation.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PotentialMitigation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PotentialMitigationUpsertOne) Ignore() *PotentialMitigationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PotentialMitigationUpsertOne) DoNothing() *PotentialMitigationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PotentialMitigationCreate.OnConflict
// documentation for more info.
func (u *PotentialMitigationUpsertOne) Update(set func(*PotentialMitigationUpsert)) *PotentialMitigationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PotentialMitigationUpsert{UpdateSet: update})
	}))
	return u
}

// SetPhase sets the "phase" field.
func (u *PotentialMitigationUpsertOne) SetPhase(v string) *PotentialMitigationUpsertOne {
	return u.Update(func(s *PotentialMitigationUpsert) {
		s.SetPhase(v)
	})
}

// UpdatePhase sets the "phase" field to the value that was provided on create.
func (u *PotentialMitigationUpsertOne) UpdatePhase() *PotentialMitigationUpsertOne {
	return u.Update(func(s *PotentialMitigationUpsert) {
		s.UpdatePhase()
	})
}

// ClearPhase clears the value of the "phase" field.
func (u *PotentialMitigationUpsertOne) ClearPhase() *PotentialMitigationUpsertOne {
	return u.Update(func(s *PotentialMitigationUpsert) {
		s.ClearPhase()
	})
}

// SetDescription sets the "description" field.
func (u *PotentialMitigationUpsertOne) SetDescription(v string) *PotentialMitigationUpsertOne {
	return u.Update(func(s *PotentialMitigationUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PotentialMitigationUpsertOne) UpdateDescription() *PotentialMitigationUpsertOne {
	return u.Update(func(s *PotentialMitigationUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PotentialMitigationUpsertOne) ClearDescription() *PotentialMitigationUpsertOne {
	return u.Update(func(s *PotentialMitigationUpsert) {
		s.ClearDescription()
	})
}

// SetEffectiveness sets the "effectiveness" field.
func (u *PotentialMitigationUpsertOne) SetEffectiveness(v string) *PotentialMitigationUpsertOne {
	return u.Update(func(s *PotentialMitigationUpsert) {
		s.SetEffectiveness(v)
	})
}

// UpdateEffectiveness sets the "effectiveness" field to the value that was provided on create.
func (u *PotentialMitigationUpsertOne) UpdateEffectiveness() *PotentialMitigationUpsertOne {
	return u.Update(func(s *PotentialMitigationUpsert) {
		s.UpdateEffectiveness()
	})
}

// ClearEffectiveness clears the value of the "effectiveness" field.
func (u *PotentialMitigationUpsertOne) ClearEffectiveness() *PotentialMitigationUpsertOne {
	return u.Update(func(s *PotentialMitigationUpsert) {
		s.ClearEffectiveness()
	})
}

// SetEffectivenessNotes sets the "effectiveness_notes" field.
func (u *PotentialMitigationUpsertOne) SetEffectivenessNotes(v string) *PotentialMitigationUpsertOne {
	return u.Update(func(s *PotentialMitigationUpsert) {
		s.SetEffectivenessNotes(v)
	})
}

// UpdateEffectivenessNotes sets the "effectiveness_notes" field to the value that was provided on create.
func (u *PotentialMitigationUpsertOne) UpdateEffectivenessNotes() *PotentialMitigationUpsertOne {
	return u.Update(func(s *PotentialMitigationUpsert) {
		s.UpdateEffectivenessNotes()
	})
}

// ClearEffectivenessNotes clears the value of the "effectiveness_notes" field.
func (u *PotentialMitigationUpsertOne) ClearEffectivenessNotes() *PotentialMitigationUpsertOne {
	return u.Update(func(s *PotentialMitigationUpsert) {
		s.ClearEffectivenessNotes()
	})
}

// Exec executes the query.
func (u *PotentialMitigationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PotentialMitigationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PotentialMitigationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PotentialMitigationUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PotentialMitigationUpsertOne.ID is not supported by MySQL driver. Use PotentialMitigationUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PotentialMitigationUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PotentialMitigationCreateBulk is the builder for creating many PotentialMitigation entities in bulk.
type PotentialMitigationCreateBulk struct {
	config
	err      error
	builders []*PotentialMitigationCreate
	conflict []sql.ConflictOption
}

// Save creates the PotentialMitigation entities in the database.
func (pmcb *PotentialMitigationCreateBulk) Save(ctx context.Context) ([]*PotentialMitigation, error) {
	if pmcb.err != nil {
		return nil, pmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pmcb.builders))
	nodes := make([]*PotentialMitigation, len(pmcb.builders))
	mutators := make([]Mutator, len(pmcb.builders))
	for i := range pmcb.builders {
		func(i int, root context.Context) {
			builder := pmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PotentialMitigationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pmcb *PotentialMitigationCreateBulk) SaveX(ctx context.Context) []*PotentialMitigation {
	v, err := pmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmcb *PotentialMitigationCreateBulk) Exec(ctx context.Context) error {
	_, err := pmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmcb *PotentialMitigationCreateBulk) ExecX(ctx context.Context) {
	if err := pmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PotentialMitigation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PotentialMitigationUpsert) {
//			SetPhase(v+v).
//		}).
//		Exec(ctx)
func (pmcb *PotentialMitigationCreateBulk) OnConflict(opts ...sql.ConflictOption) *PotentialMitigationUpsertBulk {
	pmcb.conflict = opts
	return &PotentialMitigationUpsertBulk{
		create: pmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PotentialMitigation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pmcb *PotentialMitigationCreateBulk) OnConflictColumns(columns ...string) *PotentialMitigationUpsertBulk {
	pmcb.conflict = append(pmcb.conflict, sql.ConflictColumns(columns...))
	return &PotentialMitigationUpsertBulk{
		create: pmcb,
	}
}

// PotentialMitigationUpsertBulk is the builder for "upsert"-ing
// a bulk of PotentialMitigation nodes.
type PotentialMitigationUpsertBulk struct {
	create *PotentialMitigationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PotentialMitigation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(potentialmitigation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PotentialMitigationUpsertBulk) UpdateNewValues() *PotentialMitigationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(potentialmitigation.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PotentialMitigation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PotentialMitigationUpsertBulk) Ignore() *PotentialMitigationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PotentialMitigationUpsertBulk) DoNothing() *PotentialMitigationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PotentialMitigationCreateBulk.OnConflict
// documentation for more info.
func (u *PotentialMitigationUpsertBulk) Update(set func(*PotentialMitigationUpsert)) *PotentialMitigationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PotentialMitigationUpsert{UpdateSet: update})
	}))
	return u
}

// SetPhase sets the "phase" field.
func (u *PotentialMitigationUpsertBulk) SetPhase(v string) *PotentialMitigationUpsertBulk {
	return u.Update(func(s *PotentialMitigationUpsert) {
		s.SetPhase(v)
	})
}

// UpdatePhase sets the "phase" field to the value that was provided on create.
func (u *PotentialMitigationUpsertBulk) UpdatePhase() *PotentialMitigationUpsertBulk {
	return u.Update(func(s *PotentialMitigationUpsert) {
		s.UpdatePhase()
	})
}

// ClearPhase clears the value of the "phase" field.
func (u *PotentialMitigationUpsertBulk) ClearPhase() *PotentialMitigationUpsertBulk {
	return u.Update(func(s *PotentialMitigationUpsert) {
		s.ClearPhase()
	})
}

// SetDescription sets the "description" field.
func (u *PotentialMitigationUpsertBulk) SetDescription(v string) *PotentialMitigationUpsertBulk {
	return u.Update(func(s *PotentialMitigationUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PotentialMitigationUpsertBulk) UpdateDescription() *PotentialMitigationUpsertBulk {
	return u.Update(func(s *PotentialMitigationUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PotentialMitigationUpsertBulk) ClearDescription() *PotentialMitigationUpsertBulk {
	return u.Update(func(s *PotentialMitigationUpsert) {
		s.ClearDescription()
	})
}

// SetEffectiveness sets the "effectiveness" field.
func (u *PotentialMitigationUpsertBulk) SetEffectiveness(v string) *PotentialMitigationUpsertBulk {
	return u.Update(func(s *PotentialMitigationUpsert) {
		s.SetEffectiveness(v)
	})
}

// UpdateEffectiveness sets the "effectiveness" field to the value that was provided on create.
func (u *PotentialMitigationUpsertBulk) UpdateEffectiveness() *PotentialMitigationUpsertBulk {
	return u.Update(func(s *PotentialMitigationUpsert) {
		s.UpdateEffectiveness()
	})
}

// ClearEffectiveness clears the value of the "effectiveness" field.
func (u *PotentialMitigationUpsertBulk) ClearEffectiveness() *PotentialMitigationUpsertBulk {
	return u.Update(func(s *PotentialMitigationUpsert) {
		s.ClearEffectiveness()
	})
}

// SetEffectivenessNotes sets the "effectiveness_notes" field.
func (u *PotentialMitigationUpsertBulk) SetEffectivenessNotes(v string) *PotentialMitigationUpsertBulk {
	return u.Update(func(s *PotentialMitigationUpsert) {
		s.SetEffectivenessNotes(v)
	})
}

// UpdateEffectivenessNotes sets the "effectiveness_notes" field to the value that was provided on create.
func (u *PotentialMitigationUpsertBulk) UpdateEffectivenessNotes() *PotentialMitigationUpsertBulk {
	return u.Update(func(s *PotentialMitigationUpsert) {
		s.UpdateEffectivenessNotes()
	})
}

// ClearEffectivenessNotes clears the value of the "effectiveness_notes" field.
func (u *PotentialMitigationUpsertBulk) ClearEffectivenessNotes() *PotentialMitigationUpsertBulk {
	return u.Update(func(s *PotentialMitigationUpsert) {
		s.ClearEffectivenessNotes()
	})
}

// Exec executes the query.
func (u *PotentialMitigationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PotentialMitigationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PotentialMitigationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PotentialMitigationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
