// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/reachablecodeartifact"
)

// ReachableCodeArtifact is the model entity for the ReachableCodeArtifact schema.
type ReachableCodeArtifact struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ArtifactName holds the value of the "artifact_name" field.
	ArtifactName *string `json:"artifact_name,omitempty"`
	// UsedInLines holds the value of the "used_in_lines" field.
	UsedInLines *string `json:"used_in_lines,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReachableCodeArtifactQuery when eager-loading is set.
	Edges        ReachableCodeArtifactEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ReachableCodeArtifactEdges holds the relations/edges for other nodes in the graph.
type ReachableCodeArtifactEdges struct {
	// ReachableCode holds the value of the reachable_code edge.
	ReachableCode []*ReachableCode `json:"reachable_code,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedReachableCode map[string][]*ReachableCode
}

// ReachableCodeOrErr returns the ReachableCode value or an error if the edge
// was not loaded in eager-loading.
func (e ReachableCodeArtifactEdges) ReachableCodeOrErr() ([]*ReachableCode, error) {
	if e.loadedTypes[0] {
		return e.ReachableCode, nil
	}
	return nil, &NotLoadedError{edge: "reachable_code"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReachableCodeArtifact) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reachablecodeartifact.FieldArtifactName, reachablecodeartifact.FieldUsedInLines:
			values[i] = new(sql.NullString)
		case reachablecodeartifact.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReachableCodeArtifact fields.
func (rca *ReachableCodeArtifact) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reachablecodeartifact.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rca.ID = *value
			}
		case reachablecodeartifact.FieldArtifactName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field artifact_name", values[i])
			} else if value.Valid {
				rca.ArtifactName = new(string)
				*rca.ArtifactName = value.String
			}
		case reachablecodeartifact.FieldUsedInLines:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field used_in_lines", values[i])
			} else if value.Valid {
				rca.UsedInLines = new(string)
				*rca.UsedInLines = value.String
			}
		default:
			rca.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ReachableCodeArtifact.
// This includes values selected through modifiers, order, etc.
func (rca *ReachableCodeArtifact) Value(name string) (ent.Value, error) {
	return rca.selectValues.Get(name)
}

// QueryReachableCode queries the "reachable_code" edge of the ReachableCodeArtifact entity.
func (rca *ReachableCodeArtifact) QueryReachableCode() *ReachableCodeQuery {
	return NewReachableCodeArtifactClient(rca.config).QueryReachableCode(rca)
}

// Update returns a builder for updating this ReachableCodeArtifact.
// Note that you need to call ReachableCodeArtifact.Unwrap() before calling this method if this ReachableCodeArtifact
// was returned from a transaction, and the transaction was committed or rolled back.
func (rca *ReachableCodeArtifact) Update() *ReachableCodeArtifactUpdateOne {
	return NewReachableCodeArtifactClient(rca.config).UpdateOne(rca)
}

// Unwrap unwraps the ReachableCodeArtifact entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rca *ReachableCodeArtifact) Unwrap() *ReachableCodeArtifact {
	_tx, ok := rca.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReachableCodeArtifact is not a transactional entity")
	}
	rca.config.driver = _tx.drv
	return rca
}

// String implements the fmt.Stringer.
func (rca *ReachableCodeArtifact) String() string {
	var builder strings.Builder
	builder.WriteString("ReachableCodeArtifact(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rca.ID))
	if v := rca.ArtifactName; v != nil {
		builder.WriteString("artifact_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := rca.UsedInLines; v != nil {
		builder.WriteString("used_in_lines=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedReachableCode returns the ReachableCode named value or an error if the edge was not
// loaded in eager-loading with this name.
func (rca *ReachableCodeArtifact) NamedReachableCode(name string) ([]*ReachableCode, error) {
	if rca.Edges.namedReachableCode == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := rca.Edges.namedReachableCode[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (rca *ReachableCodeArtifact) appendNamedReachableCode(name string, edges ...*ReachableCode) {
	if rca.Edges.namedReachableCode == nil {
		rca.Edges.namedReachableCode = make(map[string][]*ReachableCode)
	}
	if len(edges) == 0 {
		rca.Edges.namedReachableCode[name] = []*ReachableCode{}
	} else {
		rca.Edges.namedReachableCode[name] = append(rca.Edges.namedReachableCode[name], edges...)
	}
}

// ReachableCodeArtifacts is a parsable slice of ReachableCodeArtifact.
type ReachableCodeArtifacts []*ReachableCodeArtifact
