// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyvex"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/exploit"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// ExploitUpdate is the builder for updating Exploit entities.
type ExploitUpdate struct {
	config
	hooks    []Hook
	mutation *ExploitMutation
}

// Where appends a list predicates to the ExploitUpdate builder.
func (eu *ExploitUpdate) Where(ps ...predicate.Exploit) *ExploitUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetExploitID sets the "exploit_id" field.
func (eu *ExploitUpdate) SetExploitID(s string) *ExploitUpdate {
	eu.mutation.SetExploitID(s)
	return eu
}

// SetNillableExploitID sets the "exploit_id" field if the given value is not nil.
func (eu *ExploitUpdate) SetNillableExploitID(s *string) *ExploitUpdate {
	if s != nil {
		eu.SetExploitID(*s)
	}
	return eu
}

// ClearExploitID clears the value of the "exploit_id" field.
func (eu *ExploitUpdate) ClearExploitID() *ExploitUpdate {
	eu.mutation.ClearExploitID()
	return eu
}

// SetDescription sets the "description" field.
func (eu *ExploitUpdate) SetDescription(s string) *ExploitUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *ExploitUpdate) SetNillableDescription(s *string) *ExploitUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// ClearDescription clears the value of the "description" field.
func (eu *ExploitUpdate) ClearDescription() *ExploitUpdate {
	eu.mutation.ClearDescription()
	return eu
}

// SetPayload sets the "payload" field.
func (eu *ExploitUpdate) SetPayload(s string) *ExploitUpdate {
	eu.mutation.SetPayload(s)
	return eu
}

// SetNillablePayload sets the "payload" field if the given value is not nil.
func (eu *ExploitUpdate) SetNillablePayload(s *string) *ExploitUpdate {
	if s != nil {
		eu.SetPayload(*s)
	}
	return eu
}

// ClearPayload clears the value of the "payload" field.
func (eu *ExploitUpdate) ClearPayload() *ExploitUpdate {
	eu.mutation.ClearPayload()
	return eu
}

// AddCertifyVexIDs adds the "certify_vex" edge to the CertifyVex entity by IDs.
func (eu *ExploitUpdate) AddCertifyVexIDs(ids ...uuid.UUID) *ExploitUpdate {
	eu.mutation.AddCertifyVexIDs(ids...)
	return eu
}

// AddCertifyVex adds the "certify_vex" edges to the CertifyVex entity.
func (eu *ExploitUpdate) AddCertifyVex(c ...*CertifyVex) *ExploitUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.AddCertifyVexIDs(ids...)
}

// Mutation returns the ExploitMutation object of the builder.
func (eu *ExploitUpdate) Mutation() *ExploitMutation {
	return eu.mutation
}

// ClearCertifyVex clears all "certify_vex" edges to the CertifyVex entity.
func (eu *ExploitUpdate) ClearCertifyVex() *ExploitUpdate {
	eu.mutation.ClearCertifyVex()
	return eu
}

// RemoveCertifyVexIDs removes the "certify_vex" edge to CertifyVex entities by IDs.
func (eu *ExploitUpdate) RemoveCertifyVexIDs(ids ...uuid.UUID) *ExploitUpdate {
	eu.mutation.RemoveCertifyVexIDs(ids...)
	return eu
}

// RemoveCertifyVex removes "certify_vex" edges to CertifyVex entities.
func (eu *ExploitUpdate) RemoveCertifyVex(c ...*CertifyVex) *ExploitUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.RemoveCertifyVexIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExploitUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExploitUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExploitUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExploitUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *ExploitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(exploit.Table, exploit.Columns, sqlgraph.NewFieldSpec(exploit.FieldID, field.TypeUUID))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.ExploitID(); ok {
		_spec.SetField(exploit.FieldExploitID, field.TypeString, value)
	}
	if eu.mutation.ExploitIDCleared() {
		_spec.ClearField(exploit.FieldExploitID, field.TypeString)
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.SetField(exploit.FieldDescription, field.TypeString, value)
	}
	if eu.mutation.DescriptionCleared() {
		_spec.ClearField(exploit.FieldDescription, field.TypeString)
	}
	if value, ok := eu.mutation.Payload(); ok {
		_spec.SetField(exploit.FieldPayload, field.TypeString, value)
	}
	if eu.mutation.PayloadCleared() {
		_spec.ClearField(exploit.FieldPayload, field.TypeString)
	}
	if eu.mutation.CertifyVexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exploit.CertifyVexTable,
			Columns: exploit.CertifyVexPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedCertifyVexIDs(); len(nodes) > 0 && !eu.mutation.CertifyVexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exploit.CertifyVexTable,
			Columns: exploit.CertifyVexPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CertifyVexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exploit.CertifyVexTable,
			Columns: exploit.CertifyVexPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exploit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// ExploitUpdateOne is the builder for updating a single Exploit entity.
type ExploitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExploitMutation
}

// SetExploitID sets the "exploit_id" field.
func (euo *ExploitUpdateOne) SetExploitID(s string) *ExploitUpdateOne {
	euo.mutation.SetExploitID(s)
	return euo
}

// SetNillableExploitID sets the "exploit_id" field if the given value is not nil.
func (euo *ExploitUpdateOne) SetNillableExploitID(s *string) *ExploitUpdateOne {
	if s != nil {
		euo.SetExploitID(*s)
	}
	return euo
}

// ClearExploitID clears the value of the "exploit_id" field.
func (euo *ExploitUpdateOne) ClearExploitID() *ExploitUpdateOne {
	euo.mutation.ClearExploitID()
	return euo
}

// SetDescription sets the "description" field.
func (euo *ExploitUpdateOne) SetDescription(s string) *ExploitUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *ExploitUpdateOne) SetNillableDescription(s *string) *ExploitUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// ClearDescription clears the value of the "description" field.
func (euo *ExploitUpdateOne) ClearDescription() *ExploitUpdateOne {
	euo.mutation.ClearDescription()
	return euo
}

// SetPayload sets the "payload" field.
func (euo *ExploitUpdateOne) SetPayload(s string) *ExploitUpdateOne {
	euo.mutation.SetPayload(s)
	return euo
}

// SetNillablePayload sets the "payload" field if the given value is not nil.
func (euo *ExploitUpdateOne) SetNillablePayload(s *string) *ExploitUpdateOne {
	if s != nil {
		euo.SetPayload(*s)
	}
	return euo
}

// ClearPayload clears the value of the "payload" field.
func (euo *ExploitUpdateOne) ClearPayload() *ExploitUpdateOne {
	euo.mutation.ClearPayload()
	return euo
}

// AddCertifyVexIDs adds the "certify_vex" edge to the CertifyVex entity by IDs.
func (euo *ExploitUpdateOne) AddCertifyVexIDs(ids ...uuid.UUID) *ExploitUpdateOne {
	euo.mutation.AddCertifyVexIDs(ids...)
	return euo
}

// AddCertifyVex adds the "certify_vex" edges to the CertifyVex entity.
func (euo *ExploitUpdateOne) AddCertifyVex(c ...*CertifyVex) *ExploitUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.AddCertifyVexIDs(ids...)
}

// Mutation returns the ExploitMutation object of the builder.
func (euo *ExploitUpdateOne) Mutation() *ExploitMutation {
	return euo.mutation
}

// ClearCertifyVex clears all "certify_vex" edges to the CertifyVex entity.
func (euo *ExploitUpdateOne) ClearCertifyVex() *ExploitUpdateOne {
	euo.mutation.ClearCertifyVex()
	return euo
}

// RemoveCertifyVexIDs removes the "certify_vex" edge to CertifyVex entities by IDs.
func (euo *ExploitUpdateOne) RemoveCertifyVexIDs(ids ...uuid.UUID) *ExploitUpdateOne {
	euo.mutation.RemoveCertifyVexIDs(ids...)
	return euo
}

// RemoveCertifyVex removes "certify_vex" edges to CertifyVex entities.
func (euo *ExploitUpdateOne) RemoveCertifyVex(c ...*CertifyVex) *ExploitUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.RemoveCertifyVexIDs(ids...)
}

// Where appends a list predicates to the ExploitUpdate builder.
func (euo *ExploitUpdateOne) Where(ps ...predicate.Exploit) *ExploitUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExploitUpdateOne) Select(field string, fields ...string) *ExploitUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Exploit entity.
func (euo *ExploitUpdateOne) Save(ctx context.Context) (*Exploit, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExploitUpdateOne) SaveX(ctx context.Context) *Exploit {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExploitUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExploitUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *ExploitUpdateOne) sqlSave(ctx context.Context) (_node *Exploit, err error) {
	_spec := sqlgraph.NewUpdateSpec(exploit.Table, exploit.Columns, sqlgraph.NewFieldSpec(exploit.FieldID, field.TypeUUID))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Exploit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exploit.FieldID)
		for _, f := range fields {
			if !exploit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exploit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.ExploitID(); ok {
		_spec.SetField(exploit.FieldExploitID, field.TypeString, value)
	}
	if euo.mutation.ExploitIDCleared() {
		_spec.ClearField(exploit.FieldExploitID, field.TypeString)
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.SetField(exploit.FieldDescription, field.TypeString, value)
	}
	if euo.mutation.DescriptionCleared() {
		_spec.ClearField(exploit.FieldDescription, field.TypeString)
	}
	if value, ok := euo.mutation.Payload(); ok {
		_spec.SetField(exploit.FieldPayload, field.TypeString, value)
	}
	if euo.mutation.PayloadCleared() {
		_spec.ClearField(exploit.FieldPayload, field.TypeString)
	}
	if euo.mutation.CertifyVexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exploit.CertifyVexTable,
			Columns: exploit.CertifyVexPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedCertifyVexIDs(); len(nodes) > 0 && !euo.mutation.CertifyVexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exploit.CertifyVexTable,
			Columns: exploit.CertifyVexPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CertifyVexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exploit.CertifyVexTable,
			Columns: exploit.CertifyVexPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Exploit{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exploit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
