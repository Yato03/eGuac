// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyvex"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/consequence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/cwe"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/demonstrativeexample"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/detectionmethod"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/potentialmitigation"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// CWEQuery is the builder for querying CWE entities.
type CWEQuery struct {
	config
	ctx                           *QueryContext
	order                         []cwe.OrderOption
	inters                        []Interceptor
	predicates                    []predicate.CWE
	withCertifyVex                *CertifyVexQuery
	withConsequence               *ConsequenceQuery
	withDemonstrativeExample      *DemonstrativeExampleQuery
	withDetectionMethod           *DetectionMethodQuery
	withPotentialMitigation       *PotentialMitigationQuery
	modifiers                     []func(*sql.Selector)
	loadTotal                     []func(context.Context, []*CWE) error
	withNamedCertifyVex           map[string]*CertifyVexQuery
	withNamedConsequence          map[string]*ConsequenceQuery
	withNamedDemonstrativeExample map[string]*DemonstrativeExampleQuery
	withNamedDetectionMethod      map[string]*DetectionMethodQuery
	withNamedPotentialMitigation  map[string]*PotentialMitigationQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CWEQuery builder.
func (cq *CWEQuery) Where(ps ...predicate.CWE) *CWEQuery {
	cq.predicates = append(cq.predicates, ps...)
	return cq
}

// Limit the number of records to be returned by this query.
func (cq *CWEQuery) Limit(limit int) *CWEQuery {
	cq.ctx.Limit = &limit
	return cq
}

// Offset to start from.
func (cq *CWEQuery) Offset(offset int) *CWEQuery {
	cq.ctx.Offset = &offset
	return cq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cq *CWEQuery) Unique(unique bool) *CWEQuery {
	cq.ctx.Unique = &unique
	return cq
}

// Order specifies how the records should be ordered.
func (cq *CWEQuery) Order(o ...cwe.OrderOption) *CWEQuery {
	cq.order = append(cq.order, o...)
	return cq
}

// QueryCertifyVex chains the current query on the "certify_vex" edge.
func (cq *CWEQuery) QueryCertifyVex() *CertifyVexQuery {
	query := (&CertifyVexClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(cwe.Table, cwe.FieldID, selector),
			sqlgraph.To(certifyvex.Table, certifyvex.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, cwe.CertifyVexTable, cwe.CertifyVexPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryConsequence chains the current query on the "consequence" edge.
func (cq *CWEQuery) QueryConsequence() *ConsequenceQuery {
	query := (&ConsequenceClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(cwe.Table, cwe.FieldID, selector),
			sqlgraph.To(consequence.Table, consequence.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, cwe.ConsequenceTable, cwe.ConsequencePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDemonstrativeExample chains the current query on the "demonstrative_example" edge.
func (cq *CWEQuery) QueryDemonstrativeExample() *DemonstrativeExampleQuery {
	query := (&DemonstrativeExampleClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(cwe.Table, cwe.FieldID, selector),
			sqlgraph.To(demonstrativeexample.Table, demonstrativeexample.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, cwe.DemonstrativeExampleTable, cwe.DemonstrativeExamplePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDetectionMethod chains the current query on the "detection_method" edge.
func (cq *CWEQuery) QueryDetectionMethod() *DetectionMethodQuery {
	query := (&DetectionMethodClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(cwe.Table, cwe.FieldID, selector),
			sqlgraph.To(detectionmethod.Table, detectionmethod.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, cwe.DetectionMethodTable, cwe.DetectionMethodPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPotentialMitigation chains the current query on the "potential_mitigation" edge.
func (cq *CWEQuery) QueryPotentialMitigation() *PotentialMitigationQuery {
	query := (&PotentialMitigationClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(cwe.Table, cwe.FieldID, selector),
			sqlgraph.To(potentialmitigation.Table, potentialmitigation.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, cwe.PotentialMitigationTable, cwe.PotentialMitigationPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CWE entity from the query.
// Returns a *NotFoundError when no CWE was found.
func (cq *CWEQuery) First(ctx context.Context) (*CWE, error) {
	nodes, err := cq.Limit(1).All(setContextOp(ctx, cq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{cwe.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cq *CWEQuery) FirstX(ctx context.Context) *CWE {
	node, err := cq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CWE ID from the query.
// Returns a *NotFoundError when no CWE ID was found.
func (cq *CWEQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = cq.Limit(1).IDs(setContextOp(ctx, cq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{cwe.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cq *CWEQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := cq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CWE entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CWE entity is found.
// Returns a *NotFoundError when no CWE entities are found.
func (cq *CWEQuery) Only(ctx context.Context) (*CWE, error) {
	nodes, err := cq.Limit(2).All(setContextOp(ctx, cq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{cwe.Label}
	default:
		return nil, &NotSingularError{cwe.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cq *CWEQuery) OnlyX(ctx context.Context) *CWE {
	node, err := cq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CWE ID in the query.
// Returns a *NotSingularError when more than one CWE ID is found.
// Returns a *NotFoundError when no entities are found.
func (cq *CWEQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = cq.Limit(2).IDs(setContextOp(ctx, cq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{cwe.Label}
	default:
		err = &NotSingularError{cwe.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cq *CWEQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := cq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CWEs.
func (cq *CWEQuery) All(ctx context.Context) ([]*CWE, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryAll)
	if err := cq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CWE, *CWEQuery]()
	return withInterceptors[[]*CWE](ctx, cq, qr, cq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cq *CWEQuery) AllX(ctx context.Context) []*CWE {
	nodes, err := cq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CWE IDs.
func (cq *CWEQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if cq.ctx.Unique == nil && cq.path != nil {
		cq.Unique(true)
	}
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryIDs)
	if err = cq.Select(cwe.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cq *CWEQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := cq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cq *CWEQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryCount)
	if err := cq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cq, querierCount[*CWEQuery](), cq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cq *CWEQuery) CountX(ctx context.Context) int {
	count, err := cq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cq *CWEQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryExist)
	switch _, err := cq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cq *CWEQuery) ExistX(ctx context.Context) bool {
	exist, err := cq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CWEQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cq *CWEQuery) Clone() *CWEQuery {
	if cq == nil {
		return nil
	}
	return &CWEQuery{
		config:                   cq.config,
		ctx:                      cq.ctx.Clone(),
		order:                    append([]cwe.OrderOption{}, cq.order...),
		inters:                   append([]Interceptor{}, cq.inters...),
		predicates:               append([]predicate.CWE{}, cq.predicates...),
		withCertifyVex:           cq.withCertifyVex.Clone(),
		withConsequence:          cq.withConsequence.Clone(),
		withDemonstrativeExample: cq.withDemonstrativeExample.Clone(),
		withDetectionMethod:      cq.withDetectionMethod.Clone(),
		withPotentialMitigation:  cq.withPotentialMitigation.Clone(),
		// clone intermediate query.
		sql:  cq.sql.Clone(),
		path: cq.path,
	}
}

// WithCertifyVex tells the query-builder to eager-load the nodes that are connected to
// the "certify_vex" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CWEQuery) WithCertifyVex(opts ...func(*CertifyVexQuery)) *CWEQuery {
	query := (&CertifyVexClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withCertifyVex = query
	return cq
}

// WithConsequence tells the query-builder to eager-load the nodes that are connected to
// the "consequence" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CWEQuery) WithConsequence(opts ...func(*ConsequenceQuery)) *CWEQuery {
	query := (&ConsequenceClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withConsequence = query
	return cq
}

// WithDemonstrativeExample tells the query-builder to eager-load the nodes that are connected to
// the "demonstrative_example" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CWEQuery) WithDemonstrativeExample(opts ...func(*DemonstrativeExampleQuery)) *CWEQuery {
	query := (&DemonstrativeExampleClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withDemonstrativeExample = query
	return cq
}

// WithDetectionMethod tells the query-builder to eager-load the nodes that are connected to
// the "detection_method" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CWEQuery) WithDetectionMethod(opts ...func(*DetectionMethodQuery)) *CWEQuery {
	query := (&DetectionMethodClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withDetectionMethod = query
	return cq
}

// WithPotentialMitigation tells the query-builder to eager-load the nodes that are connected to
// the "potential_mitigation" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CWEQuery) WithPotentialMitigation(opts ...func(*PotentialMitigationQuery)) *CWEQuery {
	query := (&PotentialMitigationClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withPotentialMitigation = query
	return cq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		VexID string `json:"vex_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CWE.Query().
//		GroupBy(cwe.FieldVexID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cq *CWEQuery) GroupBy(field string, fields ...string) *CWEGroupBy {
	cq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CWEGroupBy{build: cq}
	grbuild.flds = &cq.ctx.Fields
	grbuild.label = cwe.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		VexID string `json:"vex_id,omitempty"`
//	}
//
//	client.CWE.Query().
//		Select(cwe.FieldVexID).
//		Scan(ctx, &v)
func (cq *CWEQuery) Select(fields ...string) *CWESelect {
	cq.ctx.Fields = append(cq.ctx.Fields, fields...)
	sbuild := &CWESelect{CWEQuery: cq}
	sbuild.label = cwe.Label
	sbuild.flds, sbuild.scan = &cq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CWESelect configured with the given aggregations.
func (cq *CWEQuery) Aggregate(fns ...AggregateFunc) *CWESelect {
	return cq.Select().Aggregate(fns...)
}

func (cq *CWEQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cq); err != nil {
				return err
			}
		}
	}
	for _, f := range cq.ctx.Fields {
		if !cwe.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cq.path != nil {
		prev, err := cq.path(ctx)
		if err != nil {
			return err
		}
		cq.sql = prev
	}
	return nil
}

func (cq *CWEQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CWE, error) {
	var (
		nodes       = []*CWE{}
		_spec       = cq.querySpec()
		loadedTypes = [5]bool{
			cq.withCertifyVex != nil,
			cq.withConsequence != nil,
			cq.withDemonstrativeExample != nil,
			cq.withDetectionMethod != nil,
			cq.withPotentialMitigation != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CWE).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CWE{config: cq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(cq.modifiers) > 0 {
		_spec.Modifiers = cq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cq.withCertifyVex; query != nil {
		if err := cq.loadCertifyVex(ctx, query, nodes,
			func(n *CWE) { n.Edges.CertifyVex = []*CertifyVex{} },
			func(n *CWE, e *CertifyVex) { n.Edges.CertifyVex = append(n.Edges.CertifyVex, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withConsequence; query != nil {
		if err := cq.loadConsequence(ctx, query, nodes,
			func(n *CWE) { n.Edges.Consequence = []*Consequence{} },
			func(n *CWE, e *Consequence) { n.Edges.Consequence = append(n.Edges.Consequence, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withDemonstrativeExample; query != nil {
		if err := cq.loadDemonstrativeExample(ctx, query, nodes,
			func(n *CWE) { n.Edges.DemonstrativeExample = []*DemonstrativeExample{} },
			func(n *CWE, e *DemonstrativeExample) {
				n.Edges.DemonstrativeExample = append(n.Edges.DemonstrativeExample, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := cq.withDetectionMethod; query != nil {
		if err := cq.loadDetectionMethod(ctx, query, nodes,
			func(n *CWE) { n.Edges.DetectionMethod = []*DetectionMethod{} },
			func(n *CWE, e *DetectionMethod) { n.Edges.DetectionMethod = append(n.Edges.DetectionMethod, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withPotentialMitigation; query != nil {
		if err := cq.loadPotentialMitigation(ctx, query, nodes,
			func(n *CWE) { n.Edges.PotentialMitigation = []*PotentialMitigation{} },
			func(n *CWE, e *PotentialMitigation) {
				n.Edges.PotentialMitigation = append(n.Edges.PotentialMitigation, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedCertifyVex {
		if err := cq.loadCertifyVex(ctx, query, nodes,
			func(n *CWE) { n.appendNamedCertifyVex(name) },
			func(n *CWE, e *CertifyVex) { n.appendNamedCertifyVex(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedConsequence {
		if err := cq.loadConsequence(ctx, query, nodes,
			func(n *CWE) { n.appendNamedConsequence(name) },
			func(n *CWE, e *Consequence) { n.appendNamedConsequence(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedDemonstrativeExample {
		if err := cq.loadDemonstrativeExample(ctx, query, nodes,
			func(n *CWE) { n.appendNamedDemonstrativeExample(name) },
			func(n *CWE, e *DemonstrativeExample) { n.appendNamedDemonstrativeExample(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedDetectionMethod {
		if err := cq.loadDetectionMethod(ctx, query, nodes,
			func(n *CWE) { n.appendNamedDetectionMethod(name) },
			func(n *CWE, e *DetectionMethod) { n.appendNamedDetectionMethod(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedPotentialMitigation {
		if err := cq.loadPotentialMitigation(ctx, query, nodes,
			func(n *CWE) { n.appendNamedPotentialMitigation(name) },
			func(n *CWE, e *PotentialMitigation) { n.appendNamedPotentialMitigation(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range cq.loadTotal {
		if err := cq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cq *CWEQuery) loadCertifyVex(ctx context.Context, query *CertifyVexQuery, nodes []*CWE, init func(*CWE), assign func(*CWE, *CertifyVex)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*CWE)
	nids := make(map[uuid.UUID]map[*CWE]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(cwe.CertifyVexTable)
		s.Join(joinT).On(s.C(certifyvex.FieldID), joinT.C(cwe.CertifyVexPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(cwe.CertifyVexPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(cwe.CertifyVexPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*CWE]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*CertifyVex](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "certify_vex" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *CWEQuery) loadConsequence(ctx context.Context, query *ConsequenceQuery, nodes []*CWE, init func(*CWE), assign func(*CWE, *Consequence)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*CWE)
	nids := make(map[uuid.UUID]map[*CWE]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(cwe.ConsequenceTable)
		s.Join(joinT).On(s.C(consequence.FieldID), joinT.C(cwe.ConsequencePrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(cwe.ConsequencePrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(cwe.ConsequencePrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*CWE]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Consequence](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "consequence" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *CWEQuery) loadDemonstrativeExample(ctx context.Context, query *DemonstrativeExampleQuery, nodes []*CWE, init func(*CWE), assign func(*CWE, *DemonstrativeExample)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*CWE)
	nids := make(map[uuid.UUID]map[*CWE]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(cwe.DemonstrativeExampleTable)
		s.Join(joinT).On(s.C(demonstrativeexample.FieldID), joinT.C(cwe.DemonstrativeExamplePrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(cwe.DemonstrativeExamplePrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(cwe.DemonstrativeExamplePrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*CWE]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*DemonstrativeExample](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "demonstrative_example" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *CWEQuery) loadDetectionMethod(ctx context.Context, query *DetectionMethodQuery, nodes []*CWE, init func(*CWE), assign func(*CWE, *DetectionMethod)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*CWE)
	nids := make(map[uuid.UUID]map[*CWE]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(cwe.DetectionMethodTable)
		s.Join(joinT).On(s.C(detectionmethod.FieldID), joinT.C(cwe.DetectionMethodPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(cwe.DetectionMethodPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(cwe.DetectionMethodPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*CWE]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*DetectionMethod](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "detection_method" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *CWEQuery) loadPotentialMitigation(ctx context.Context, query *PotentialMitigationQuery, nodes []*CWE, init func(*CWE), assign func(*CWE, *PotentialMitigation)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*CWE)
	nids := make(map[uuid.UUID]map[*CWE]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(cwe.PotentialMitigationTable)
		s.Join(joinT).On(s.C(potentialmitigation.FieldID), joinT.C(cwe.PotentialMitigationPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(cwe.PotentialMitigationPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(cwe.PotentialMitigationPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*CWE]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*PotentialMitigation](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "potential_mitigation" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (cq *CWEQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cq.querySpec()
	if len(cq.modifiers) > 0 {
		_spec.Modifiers = cq.modifiers
	}
	_spec.Node.Columns = cq.ctx.Fields
	if len(cq.ctx.Fields) > 0 {
		_spec.Unique = cq.ctx.Unique != nil && *cq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cq.driver, _spec)
}

func (cq *CWEQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(cwe.Table, cwe.Columns, sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID))
	_spec.From = cq.sql
	if unique := cq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cq.path != nil {
		_spec.Unique = true
	}
	if fields := cq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cwe.FieldID)
		for i := range fields {
			if fields[i] != cwe.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cq *CWEQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cq.driver.Dialect())
	t1 := builder.Table(cwe.Table)
	columns := cq.ctx.Fields
	if len(columns) == 0 {
		columns = cwe.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cq.sql != nil {
		selector = cq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cq.ctx.Unique != nil && *cq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cq.predicates {
		p(selector)
	}
	for _, p := range cq.order {
		p(selector)
	}
	if offset := cq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedCertifyVex tells the query-builder to eager-load the nodes that are connected to the "certify_vex"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CWEQuery) WithNamedCertifyVex(name string, opts ...func(*CertifyVexQuery)) *CWEQuery {
	query := (&CertifyVexClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedCertifyVex == nil {
		cq.withNamedCertifyVex = make(map[string]*CertifyVexQuery)
	}
	cq.withNamedCertifyVex[name] = query
	return cq
}

// WithNamedConsequence tells the query-builder to eager-load the nodes that are connected to the "consequence"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CWEQuery) WithNamedConsequence(name string, opts ...func(*ConsequenceQuery)) *CWEQuery {
	query := (&ConsequenceClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedConsequence == nil {
		cq.withNamedConsequence = make(map[string]*ConsequenceQuery)
	}
	cq.withNamedConsequence[name] = query
	return cq
}

// WithNamedDemonstrativeExample tells the query-builder to eager-load the nodes that are connected to the "demonstrative_example"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CWEQuery) WithNamedDemonstrativeExample(name string, opts ...func(*DemonstrativeExampleQuery)) *CWEQuery {
	query := (&DemonstrativeExampleClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedDemonstrativeExample == nil {
		cq.withNamedDemonstrativeExample = make(map[string]*DemonstrativeExampleQuery)
	}
	cq.withNamedDemonstrativeExample[name] = query
	return cq
}

// WithNamedDetectionMethod tells the query-builder to eager-load the nodes that are connected to the "detection_method"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CWEQuery) WithNamedDetectionMethod(name string, opts ...func(*DetectionMethodQuery)) *CWEQuery {
	query := (&DetectionMethodClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedDetectionMethod == nil {
		cq.withNamedDetectionMethod = make(map[string]*DetectionMethodQuery)
	}
	cq.withNamedDetectionMethod[name] = query
	return cq
}

// WithNamedPotentialMitigation tells the query-builder to eager-load the nodes that are connected to the "potential_mitigation"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CWEQuery) WithNamedPotentialMitigation(name string, opts ...func(*PotentialMitigationQuery)) *CWEQuery {
	query := (&PotentialMitigationClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedPotentialMitigation == nil {
		cq.withNamedPotentialMitigation = make(map[string]*PotentialMitigationQuery)
	}
	cq.withNamedPotentialMitigation[name] = query
	return cq
}

// CWEGroupBy is the group-by builder for CWE entities.
type CWEGroupBy struct {
	selector
	build *CWEQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cgb *CWEGroupBy) Aggregate(fns ...AggregateFunc) *CWEGroupBy {
	cgb.fns = append(cgb.fns, fns...)
	return cgb
}

// Scan applies the selector query and scans the result into the given value.
func (cgb *CWEGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cgb.build.ctx, ent.OpQueryGroupBy)
	if err := cgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CWEQuery, *CWEGroupBy](ctx, cgb.build, cgb, cgb.build.inters, v)
}

func (cgb *CWEGroupBy) sqlScan(ctx context.Context, root *CWEQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cgb.fns))
	for _, fn := range cgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cgb.flds)+len(cgb.fns))
		for _, f := range *cgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CWESelect is the builder for selecting fields of CWE entities.
type CWESelect struct {
	*CWEQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cs *CWESelect) Aggregate(fns ...AggregateFunc) *CWESelect {
	cs.fns = append(cs.fns, fns...)
	return cs
}

// Scan applies the selector query and scans the result into the given value.
func (cs *CWESelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cs.ctx, ent.OpQuerySelect)
	if err := cs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CWEQuery, *CWESelect](ctx, cs.CWEQuery, cs, cs.inters, v)
}

func (cs *CWESelect) sqlScan(ctx context.Context, root *CWEQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cs.fns))
	for _, fn := range cs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
