// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/reachablecode"
)

// ReachableCode is the model entity for the ReachableCode schema.
type ReachableCode struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// PathToFile holds the value of the "path_to_file" field.
	PathToFile *string `json:"path_to_file,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReachableCodeQuery when eager-loading is set.
	Edges        ReachableCodeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ReachableCodeEdges holds the relations/edges for other nodes in the graph.
type ReachableCodeEdges struct {
	// CertifyVex holds the value of the certify_vex edge.
	CertifyVex []*CertifyVex `json:"certify_vex,omitempty"`
	// ReachableCodeArtifact holds the value of the reachable_code_artifact edge.
	ReachableCodeArtifact []*ReachableCodeArtifact `json:"reachable_code_artifact,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedCertifyVex            map[string][]*CertifyVex
	namedReachableCodeArtifact map[string][]*ReachableCodeArtifact
}

// CertifyVexOrErr returns the CertifyVex value or an error if the edge
// was not loaded in eager-loading.
func (e ReachableCodeEdges) CertifyVexOrErr() ([]*CertifyVex, error) {
	if e.loadedTypes[0] {
		return e.CertifyVex, nil
	}
	return nil, &NotLoadedError{edge: "certify_vex"}
}

// ReachableCodeArtifactOrErr returns the ReachableCodeArtifact value or an error if the edge
// was not loaded in eager-loading.
func (e ReachableCodeEdges) ReachableCodeArtifactOrErr() ([]*ReachableCodeArtifact, error) {
	if e.loadedTypes[1] {
		return e.ReachableCodeArtifact, nil
	}
	return nil, &NotLoadedError{edge: "reachable_code_artifact"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReachableCode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reachablecode.FieldPathToFile:
			values[i] = new(sql.NullString)
		case reachablecode.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReachableCode fields.
func (rc *ReachableCode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reachablecode.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rc.ID = *value
			}
		case reachablecode.FieldPathToFile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path_to_file", values[i])
			} else if value.Valid {
				rc.PathToFile = new(string)
				*rc.PathToFile = value.String
			}
		default:
			rc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ReachableCode.
// This includes values selected through modifiers, order, etc.
func (rc *ReachableCode) Value(name string) (ent.Value, error) {
	return rc.selectValues.Get(name)
}

// QueryCertifyVex queries the "certify_vex" edge of the ReachableCode entity.
func (rc *ReachableCode) QueryCertifyVex() *CertifyVexQuery {
	return NewReachableCodeClient(rc.config).QueryCertifyVex(rc)
}

// QueryReachableCodeArtifact queries the "reachable_code_artifact" edge of the ReachableCode entity.
func (rc *ReachableCode) QueryReachableCodeArtifact() *ReachableCodeArtifactQuery {
	return NewReachableCodeClient(rc.config).QueryReachableCodeArtifact(rc)
}

// Update returns a builder for updating this ReachableCode.
// Note that you need to call ReachableCode.Unwrap() before calling this method if this ReachableCode
// was returned from a transaction, and the transaction was committed or rolled back.
func (rc *ReachableCode) Update() *ReachableCodeUpdateOne {
	return NewReachableCodeClient(rc.config).UpdateOne(rc)
}

// Unwrap unwraps the ReachableCode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rc *ReachableCode) Unwrap() *ReachableCode {
	_tx, ok := rc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReachableCode is not a transactional entity")
	}
	rc.config.driver = _tx.drv
	return rc
}

// String implements the fmt.Stringer.
func (rc *ReachableCode) String() string {
	var builder strings.Builder
	builder.WriteString("ReachableCode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rc.ID))
	if v := rc.PathToFile; v != nil {
		builder.WriteString("path_to_file=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedCertifyVex returns the CertifyVex named value or an error if the edge was not
// loaded in eager-loading with this name.
func (rc *ReachableCode) NamedCertifyVex(name string) ([]*CertifyVex, error) {
	if rc.Edges.namedCertifyVex == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := rc.Edges.namedCertifyVex[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (rc *ReachableCode) appendNamedCertifyVex(name string, edges ...*CertifyVex) {
	if rc.Edges.namedCertifyVex == nil {
		rc.Edges.namedCertifyVex = make(map[string][]*CertifyVex)
	}
	if len(edges) == 0 {
		rc.Edges.namedCertifyVex[name] = []*CertifyVex{}
	} else {
		rc.Edges.namedCertifyVex[name] = append(rc.Edges.namedCertifyVex[name], edges...)
	}
}

// NamedReachableCodeArtifact returns the ReachableCodeArtifact named value or an error if the edge was not
// loaded in eager-loading with this name.
func (rc *ReachableCode) NamedReachableCodeArtifact(name string) ([]*ReachableCodeArtifact, error) {
	if rc.Edges.namedReachableCodeArtifact == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := rc.Edges.namedReachableCodeArtifact[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (rc *ReachableCode) appendNamedReachableCodeArtifact(name string, edges ...*ReachableCodeArtifact) {
	if rc.Edges.namedReachableCodeArtifact == nil {
		rc.Edges.namedReachableCodeArtifact = make(map[string][]*ReachableCodeArtifact)
	}
	if len(edges) == 0 {
		rc.Edges.namedReachableCodeArtifact[name] = []*ReachableCodeArtifact{}
	} else {
		rc.Edges.namedReachableCodeArtifact[name] = append(rc.Edges.namedReachableCodeArtifact[name], edges...)
	}
}

// ReachableCodes is a parsable slice of ReachableCode.
type ReachableCodes []*ReachableCode
