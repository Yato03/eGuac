// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/cwe"
)

// CWE is the model entity for the CWE schema.
type CWE struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// VexID holds the value of the "vex_id" field.
	VexID string `json:"vex_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// BackgroundDetail holds the value of the "background_detail" field.
	BackgroundDetail *string `json:"background_detail,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CWEQuery when eager-loading is set.
	Edges        CWEEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CWEEdges holds the relations/edges for other nodes in the graph.
type CWEEdges struct {
	// CertifyVex holds the value of the certify_vex edge.
	CertifyVex []*CertifyVex `json:"certify_vex,omitempty"`
	// Consequence holds the value of the consequence edge.
	Consequence []*Consequence `json:"consequence,omitempty"`
	// DemonstrativeExample holds the value of the demonstrative_example edge.
	DemonstrativeExample []*DemonstrativeExample `json:"demonstrative_example,omitempty"`
	// DetectionMethod holds the value of the detection_method edge.
	DetectionMethod []*DetectionMethod `json:"detection_method,omitempty"`
	// PotentialMitigation holds the value of the potential_mitigation edge.
	PotentialMitigation []*PotentialMitigation `json:"potential_mitigation,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedCertifyVex           map[string][]*CertifyVex
	namedConsequence          map[string][]*Consequence
	namedDemonstrativeExample map[string][]*DemonstrativeExample
	namedDetectionMethod      map[string][]*DetectionMethod
	namedPotentialMitigation  map[string][]*PotentialMitigation
}

// CertifyVexOrErr returns the CertifyVex value or an error if the edge
// was not loaded in eager-loading.
func (e CWEEdges) CertifyVexOrErr() ([]*CertifyVex, error) {
	if e.loadedTypes[0] {
		return e.CertifyVex, nil
	}
	return nil, &NotLoadedError{edge: "certify_vex"}
}

// ConsequenceOrErr returns the Consequence value or an error if the edge
// was not loaded in eager-loading.
func (e CWEEdges) ConsequenceOrErr() ([]*Consequence, error) {
	if e.loadedTypes[1] {
		return e.Consequence, nil
	}
	return nil, &NotLoadedError{edge: "consequence"}
}

// DemonstrativeExampleOrErr returns the DemonstrativeExample value or an error if the edge
// was not loaded in eager-loading.
func (e CWEEdges) DemonstrativeExampleOrErr() ([]*DemonstrativeExample, error) {
	if e.loadedTypes[2] {
		return e.DemonstrativeExample, nil
	}
	return nil, &NotLoadedError{edge: "demonstrative_example"}
}

// DetectionMethodOrErr returns the DetectionMethod value or an error if the edge
// was not loaded in eager-loading.
func (e CWEEdges) DetectionMethodOrErr() ([]*DetectionMethod, error) {
	if e.loadedTypes[3] {
		return e.DetectionMethod, nil
	}
	return nil, &NotLoadedError{edge: "detection_method"}
}

// PotentialMitigationOrErr returns the PotentialMitigation value or an error if the edge
// was not loaded in eager-loading.
func (e CWEEdges) PotentialMitigationOrErr() ([]*PotentialMitigation, error) {
	if e.loadedTypes[4] {
		return e.PotentialMitigation, nil
	}
	return nil, &NotLoadedError{edge: "potential_mitigation"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CWE) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cwe.FieldVexID, cwe.FieldName, cwe.FieldDescription, cwe.FieldBackgroundDetail:
			values[i] = new(sql.NullString)
		case cwe.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CWE fields.
func (c *CWE) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cwe.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case cwe.FieldVexID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vex_id", values[i])
			} else if value.Valid {
				c.VexID = value.String
			}
		case cwe.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case cwe.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case cwe.FieldBackgroundDetail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field background_detail", values[i])
			} else if value.Valid {
				c.BackgroundDetail = new(string)
				*c.BackgroundDetail = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CWE.
// This includes values selected through modifiers, order, etc.
func (c *CWE) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryCertifyVex queries the "certify_vex" edge of the CWE entity.
func (c *CWE) QueryCertifyVex() *CertifyVexQuery {
	return NewCWEClient(c.config).QueryCertifyVex(c)
}

// QueryConsequence queries the "consequence" edge of the CWE entity.
func (c *CWE) QueryConsequence() *ConsequenceQuery {
	return NewCWEClient(c.config).QueryConsequence(c)
}

// QueryDemonstrativeExample queries the "demonstrative_example" edge of the CWE entity.
func (c *CWE) QueryDemonstrativeExample() *DemonstrativeExampleQuery {
	return NewCWEClient(c.config).QueryDemonstrativeExample(c)
}

// QueryDetectionMethod queries the "detection_method" edge of the CWE entity.
func (c *CWE) QueryDetectionMethod() *DetectionMethodQuery {
	return NewCWEClient(c.config).QueryDetectionMethod(c)
}

// QueryPotentialMitigation queries the "potential_mitigation" edge of the CWE entity.
func (c *CWE) QueryPotentialMitigation() *PotentialMitigationQuery {
	return NewCWEClient(c.config).QueryPotentialMitigation(c)
}

// Update returns a builder for updating this CWE.
// Note that you need to call CWE.Unwrap() before calling this method if this CWE
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *CWE) Update() *CWEUpdateOne {
	return NewCWEClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the CWE entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *CWE) Unwrap() *CWE {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: CWE is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *CWE) String() string {
	var builder strings.Builder
	builder.WriteString("CWE(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("vex_id=")
	builder.WriteString(c.VexID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(c.Description)
	builder.WriteString(", ")
	if v := c.BackgroundDetail; v != nil {
		builder.WriteString("background_detail=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedCertifyVex returns the CertifyVex named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *CWE) NamedCertifyVex(name string) ([]*CertifyVex, error) {
	if c.Edges.namedCertifyVex == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedCertifyVex[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *CWE) appendNamedCertifyVex(name string, edges ...*CertifyVex) {
	if c.Edges.namedCertifyVex == nil {
		c.Edges.namedCertifyVex = make(map[string][]*CertifyVex)
	}
	if len(edges) == 0 {
		c.Edges.namedCertifyVex[name] = []*CertifyVex{}
	} else {
		c.Edges.namedCertifyVex[name] = append(c.Edges.namedCertifyVex[name], edges...)
	}
}

// NamedConsequence returns the Consequence named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *CWE) NamedConsequence(name string) ([]*Consequence, error) {
	if c.Edges.namedConsequence == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedConsequence[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *CWE) appendNamedConsequence(name string, edges ...*Consequence) {
	if c.Edges.namedConsequence == nil {
		c.Edges.namedConsequence = make(map[string][]*Consequence)
	}
	if len(edges) == 0 {
		c.Edges.namedConsequence[name] = []*Consequence{}
	} else {
		c.Edges.namedConsequence[name] = append(c.Edges.namedConsequence[name], edges...)
	}
}

// NamedDemonstrativeExample returns the DemonstrativeExample named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *CWE) NamedDemonstrativeExample(name string) ([]*DemonstrativeExample, error) {
	if c.Edges.namedDemonstrativeExample == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedDemonstrativeExample[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *CWE) appendNamedDemonstrativeExample(name string, edges ...*DemonstrativeExample) {
	if c.Edges.namedDemonstrativeExample == nil {
		c.Edges.namedDemonstrativeExample = make(map[string][]*DemonstrativeExample)
	}
	if len(edges) == 0 {
		c.Edges.namedDemonstrativeExample[name] = []*DemonstrativeExample{}
	} else {
		c.Edges.namedDemonstrativeExample[name] = append(c.Edges.namedDemonstrativeExample[name], edges...)
	}
}

// NamedDetectionMethod returns the DetectionMethod named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *CWE) NamedDetectionMethod(name string) ([]*DetectionMethod, error) {
	if c.Edges.namedDetectionMethod == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedDetectionMethod[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *CWE) appendNamedDetectionMethod(name string, edges ...*DetectionMethod) {
	if c.Edges.namedDetectionMethod == nil {
		c.Edges.namedDetectionMethod = make(map[string][]*DetectionMethod)
	}
	if len(edges) == 0 {
		c.Edges.namedDetectionMethod[name] = []*DetectionMethod{}
	} else {
		c.Edges.namedDetectionMethod[name] = append(c.Edges.namedDetectionMethod[name], edges...)
	}
}

// NamedPotentialMitigation returns the PotentialMitigation named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *CWE) NamedPotentialMitigation(name string) ([]*PotentialMitigation, error) {
	if c.Edges.namedPotentialMitigation == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedPotentialMitigation[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *CWE) appendNamedPotentialMitigation(name string, edges ...*PotentialMitigation) {
	if c.Edges.namedPotentialMitigation == nil {
		c.Edges.namedPotentialMitigation = make(map[string][]*PotentialMitigation)
	}
	if len(edges) == 0 {
		c.Edges.namedPotentialMitigation[name] = []*PotentialMitigation{}
	} else {
		c.Edges.namedPotentialMitigation[name] = append(c.Edges.namedPotentialMitigation[name], edges...)
	}
}

// CWEs is a parsable slice of CWE.
type CWEs []*CWE
