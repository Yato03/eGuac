// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/cwe"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/demonstrativeexample"
)

// DemonstrativeExampleCreate is the builder for creating a DemonstrativeExample entity.
type DemonstrativeExampleCreate struct {
	config
	mutation *DemonstrativeExampleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDescription sets the "description" field.
func (dec *DemonstrativeExampleCreate) SetDescription(s string) *DemonstrativeExampleCreate {
	dec.mutation.SetDescription(s)
	return dec
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dec *DemonstrativeExampleCreate) SetNillableDescription(s *string) *DemonstrativeExampleCreate {
	if s != nil {
		dec.SetDescription(*s)
	}
	return dec
}

// SetID sets the "id" field.
func (dec *DemonstrativeExampleCreate) SetID(u uuid.UUID) *DemonstrativeExampleCreate {
	dec.mutation.SetID(u)
	return dec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dec *DemonstrativeExampleCreate) SetNillableID(u *uuid.UUID) *DemonstrativeExampleCreate {
	if u != nil {
		dec.SetID(*u)
	}
	return dec
}

// AddCweIDs adds the "cwe" edge to the CWE entity by IDs.
func (dec *DemonstrativeExampleCreate) AddCweIDs(ids ...uuid.UUID) *DemonstrativeExampleCreate {
	dec.mutation.AddCweIDs(ids...)
	return dec
}

// AddCwe adds the "cwe" edges to the CWE entity.
func (dec *DemonstrativeExampleCreate) AddCwe(c ...*CWE) *DemonstrativeExampleCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dec.AddCweIDs(ids...)
}

// Mutation returns the DemonstrativeExampleMutation object of the builder.
func (dec *DemonstrativeExampleCreate) Mutation() *DemonstrativeExampleMutation {
	return dec.mutation
}

// Save creates the DemonstrativeExample in the database.
func (dec *DemonstrativeExampleCreate) Save(ctx context.Context) (*DemonstrativeExample, error) {
	dec.defaults()
	return withHooks(ctx, dec.sqlSave, dec.mutation, dec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dec *DemonstrativeExampleCreate) SaveX(ctx context.Context) *DemonstrativeExample {
	v, err := dec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dec *DemonstrativeExampleCreate) Exec(ctx context.Context) error {
	_, err := dec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dec *DemonstrativeExampleCreate) ExecX(ctx context.Context) {
	if err := dec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dec *DemonstrativeExampleCreate) defaults() {
	if _, ok := dec.mutation.ID(); !ok {
		v := demonstrativeexample.DefaultID()
		dec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dec *DemonstrativeExampleCreate) check() error {
	return nil
}

func (dec *DemonstrativeExampleCreate) sqlSave(ctx context.Context) (*DemonstrativeExample, error) {
	if err := dec.check(); err != nil {
		return nil, err
	}
	_node, _spec := dec.createSpec()
	if err := sqlgraph.CreateNode(ctx, dec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dec.mutation.id = &_node.ID
	dec.mutation.done = true
	return _node, nil
}

func (dec *DemonstrativeExampleCreate) createSpec() (*DemonstrativeExample, *sqlgraph.CreateSpec) {
	var (
		_node = &DemonstrativeExample{config: dec.config}
		_spec = sqlgraph.NewCreateSpec(demonstrativeexample.Table, sqlgraph.NewFieldSpec(demonstrativeexample.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = dec.conflict
	if id, ok := dec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dec.mutation.Description(); ok {
		_spec.SetField(demonstrativeexample.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if nodes := dec.mutation.CweIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   demonstrativeexample.CweTable,
			Columns: demonstrativeexample.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DemonstrativeExample.Create().
//		SetDescription(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DemonstrativeExampleUpsert) {
//			SetDescription(v+v).
//		}).
//		Exec(ctx)
func (dec *DemonstrativeExampleCreate) OnConflict(opts ...sql.ConflictOption) *DemonstrativeExampleUpsertOne {
	dec.conflict = opts
	return &DemonstrativeExampleUpsertOne{
		create: dec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DemonstrativeExample.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dec *DemonstrativeExampleCreate) OnConflictColumns(columns ...string) *DemonstrativeExampleUpsertOne {
	dec.conflict = append(dec.conflict, sql.ConflictColumns(columns...))
	return &DemonstrativeExampleUpsertOne{
		create: dec,
	}
}

type (
	// DemonstrativeExampleUpsertOne is the builder for "upsert"-ing
	//  one DemonstrativeExample node.
	DemonstrativeExampleUpsertOne struct {
		create *DemonstrativeExampleCreate
	}

	// DemonstrativeExampleUpsert is the "OnConflict" setter.
	DemonstrativeExampleUpsert struct {
		*sql.UpdateSet
	}
)

// SetDescription sets the "description" field.
func (u *DemonstrativeExampleUpsert) SetDescription(v string) *DemonstrativeExampleUpsert {
	u.Set(demonstrativeexample.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DemonstrativeExampleUpsert) UpdateDescription() *DemonstrativeExampleUpsert {
	u.SetExcluded(demonstrativeexample.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *DemonstrativeExampleUpsert) ClearDescription() *DemonstrativeExampleUpsert {
	u.SetNull(demonstrativeexample.FieldDescription)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DemonstrativeExample.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(demonstrativeexample.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DemonstrativeExampleUpsertOne) UpdateNewValues() *DemonstrativeExampleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(demonstrativeexample.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DemonstrativeExample.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DemonstrativeExampleUpsertOne) Ignore() *DemonstrativeExampleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DemonstrativeExampleUpsertOne) DoNothing() *DemonstrativeExampleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DemonstrativeExampleCreate.OnConflict
// documentation for more info.
func (u *DemonstrativeExampleUpsertOne) Update(set func(*DemonstrativeExampleUpsert)) *DemonstrativeExampleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DemonstrativeExampleUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *DemonstrativeExampleUpsertOne) SetDescription(v string) *DemonstrativeExampleUpsertOne {
	return u.Update(func(s *DemonstrativeExampleUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DemonstrativeExampleUpsertOne) UpdateDescription() *DemonstrativeExampleUpsertOne {
	return u.Update(func(s *DemonstrativeExampleUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *DemonstrativeExampleUpsertOne) ClearDescription() *DemonstrativeExampleUpsertOne {
	return u.Update(func(s *DemonstrativeExampleUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *DemonstrativeExampleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DemonstrativeExampleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DemonstrativeExampleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DemonstrativeExampleUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DemonstrativeExampleUpsertOne.ID is not supported by MySQL driver. Use DemonstrativeExampleUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DemonstrativeExampleUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DemonstrativeExampleCreateBulk is the builder for creating many DemonstrativeExample entities in bulk.
type DemonstrativeExampleCreateBulk struct {
	config
	err      error
	builders []*DemonstrativeExampleCreate
	conflict []sql.ConflictOption
}

// Save creates the DemonstrativeExample entities in the database.
func (decb *DemonstrativeExampleCreateBulk) Save(ctx context.Context) ([]*DemonstrativeExample, error) {
	if decb.err != nil {
		return nil, decb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(decb.builders))
	nodes := make([]*DemonstrativeExample, len(decb.builders))
	mutators := make([]Mutator, len(decb.builders))
	for i := range decb.builders {
		func(i int, root context.Context) {
			builder := decb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DemonstrativeExampleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, decb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = decb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, decb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, decb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (decb *DemonstrativeExampleCreateBulk) SaveX(ctx context.Context) []*DemonstrativeExample {
	v, err := decb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (decb *DemonstrativeExampleCreateBulk) Exec(ctx context.Context) error {
	_, err := decb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (decb *DemonstrativeExampleCreateBulk) ExecX(ctx context.Context) {
	if err := decb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DemonstrativeExample.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DemonstrativeExampleUpsert) {
//			SetDescription(v+v).
//		}).
//		Exec(ctx)
func (decb *DemonstrativeExampleCreateBulk) OnConflict(opts ...sql.ConflictOption) *DemonstrativeExampleUpsertBulk {
	decb.conflict = opts
	return &DemonstrativeExampleUpsertBulk{
		create: decb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DemonstrativeExample.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (decb *DemonstrativeExampleCreateBulk) OnConflictColumns(columns ...string) *DemonstrativeExampleUpsertBulk {
	decb.conflict = append(decb.conflict, sql.ConflictColumns(columns...))
	return &DemonstrativeExampleUpsertBulk{
		create: decb,
	}
}

// DemonstrativeExampleUpsertBulk is the builder for "upsert"-ing
// a bulk of DemonstrativeExample nodes.
type DemonstrativeExampleUpsertBulk struct {
	create *DemonstrativeExampleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DemonstrativeExample.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(demonstrativeexample.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DemonstrativeExampleUpsertBulk) UpdateNewValues() *DemonstrativeExampleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(demonstrativeexample.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DemonstrativeExample.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DemonstrativeExampleUpsertBulk) Ignore() *DemonstrativeExampleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DemonstrativeExampleUpsertBulk) DoNothing() *DemonstrativeExampleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DemonstrativeExampleCreateBulk.OnConflict
// documentation for more info.
func (u *DemonstrativeExampleUpsertBulk) Update(set func(*DemonstrativeExampleUpsert)) *DemonstrativeExampleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DemonstrativeExampleUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *DemonstrativeExampleUpsertBulk) SetDescription(v string) *DemonstrativeExampleUpsertBulk {
	return u.Update(func(s *DemonstrativeExampleUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DemonstrativeExampleUpsertBulk) UpdateDescription() *DemonstrativeExampleUpsertBulk {
	return u.Update(func(s *DemonstrativeExampleUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *DemonstrativeExampleUpsertBulk) ClearDescription() *DemonstrativeExampleUpsertBulk {
	return u.Update(func(s *DemonstrativeExampleUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *DemonstrativeExampleUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DemonstrativeExampleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DemonstrativeExampleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DemonstrativeExampleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
