// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/cvss"
)

// CVSS is the model entity for the CVSS schema.
type CVSS struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// VulnImpact holds the value of the "vuln_impact" field.
	VulnImpact float64 `json:"vuln_impact,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// AttackVector holds the value of the "attack_vector" field.
	AttackVector string `json:"attack_vector,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CVSSQuery when eager-loading is set.
	Edges        CVSSEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CVSSEdges holds the relations/edges for other nodes in the graph.
type CVSSEdges struct {
	// CertifyVex holds the value of the certify_vex edge.
	CertifyVex []*CertifyVex `json:"certify_vex,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedCertifyVex map[string][]*CertifyVex
}

// CertifyVexOrErr returns the CertifyVex value or an error if the edge
// was not loaded in eager-loading.
func (e CVSSEdges) CertifyVexOrErr() ([]*CertifyVex, error) {
	if e.loadedTypes[0] {
		return e.CertifyVex, nil
	}
	return nil, &NotLoadedError{edge: "certify_vex"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CVSS) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cvss.FieldVulnImpact:
			values[i] = new(sql.NullFloat64)
		case cvss.FieldVersion, cvss.FieldAttackVector:
			values[i] = new(sql.NullString)
		case cvss.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CVSS fields.
func (c *CVSS) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cvss.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case cvss.FieldVulnImpact:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field vuln_impact", values[i])
			} else if value.Valid {
				c.VulnImpact = value.Float64
			}
		case cvss.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				c.Version = value.String
			}
		case cvss.FieldAttackVector:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field attack_vector", values[i])
			} else if value.Valid {
				c.AttackVector = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CVSS.
// This includes values selected through modifiers, order, etc.
func (c *CVSS) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryCertifyVex queries the "certify_vex" edge of the CVSS entity.
func (c *CVSS) QueryCertifyVex() *CertifyVexQuery {
	return NewCVSSClient(c.config).QueryCertifyVex(c)
}

// Update returns a builder for updating this CVSS.
// Note that you need to call CVSS.Unwrap() before calling this method if this CVSS
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *CVSS) Update() *CVSSUpdateOne {
	return NewCVSSClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the CVSS entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *CVSS) Unwrap() *CVSS {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: CVSS is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *CVSS) String() string {
	var builder strings.Builder
	builder.WriteString("CVSS(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("vuln_impact=")
	builder.WriteString(fmt.Sprintf("%v", c.VulnImpact))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(c.Version)
	builder.WriteString(", ")
	builder.WriteString("attack_vector=")
	builder.WriteString(c.AttackVector)
	builder.WriteByte(')')
	return builder.String()
}

// NamedCertifyVex returns the CertifyVex named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *CVSS) NamedCertifyVex(name string) ([]*CertifyVex, error) {
	if c.Edges.namedCertifyVex == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedCertifyVex[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *CVSS) appendNamedCertifyVex(name string, edges ...*CertifyVex) {
	if c.Edges.namedCertifyVex == nil {
		c.Edges.namedCertifyVex = make(map[string][]*CertifyVex)
	}
	if len(edges) == 0 {
		c.Edges.namedCertifyVex[name] = []*CertifyVex{}
	} else {
		c.Edges.namedCertifyVex[name] = append(c.Edges.namedCertifyVex[name], edges...)
	}
}

// CVSSs is a parsable slice of CVSS.
type CVSSs []*CVSS
