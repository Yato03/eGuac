// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/exploit"
)

// Exploit is the model entity for the Exploit schema.
type Exploit struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ExploitID holds the value of the "exploit_id" field.
	ExploitID *string `json:"exploit_id,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Payload holds the value of the "payload" field.
	Payload *string `json:"payload,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExploitQuery when eager-loading is set.
	Edges        ExploitEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ExploitEdges holds the relations/edges for other nodes in the graph.
type ExploitEdges struct {
	// CertifyVex holds the value of the certify_vex edge.
	CertifyVex []*CertifyVex `json:"certify_vex,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedCertifyVex map[string][]*CertifyVex
}

// CertifyVexOrErr returns the CertifyVex value or an error if the edge
// was not loaded in eager-loading.
func (e ExploitEdges) CertifyVexOrErr() ([]*CertifyVex, error) {
	if e.loadedTypes[0] {
		return e.CertifyVex, nil
	}
	return nil, &NotLoadedError{edge: "certify_vex"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Exploit) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case exploit.FieldExploitID, exploit.FieldDescription, exploit.FieldPayload:
			values[i] = new(sql.NullString)
		case exploit.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Exploit fields.
func (e *Exploit) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case exploit.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				e.ID = *value
			}
		case exploit.FieldExploitID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field exploit_id", values[i])
			} else if value.Valid {
				e.ExploitID = new(string)
				*e.ExploitID = value.String
			}
		case exploit.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				e.Description = new(string)
				*e.Description = value.String
			}
		case exploit.FieldPayload:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payload", values[i])
			} else if value.Valid {
				e.Payload = new(string)
				*e.Payload = value.String
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Exploit.
// This includes values selected through modifiers, order, etc.
func (e *Exploit) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryCertifyVex queries the "certify_vex" edge of the Exploit entity.
func (e *Exploit) QueryCertifyVex() *CertifyVexQuery {
	return NewExploitClient(e.config).QueryCertifyVex(e)
}

// Update returns a builder for updating this Exploit.
// Note that you need to call Exploit.Unwrap() before calling this method if this Exploit
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Exploit) Update() *ExploitUpdateOne {
	return NewExploitClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Exploit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Exploit) Unwrap() *Exploit {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Exploit is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Exploit) String() string {
	var builder strings.Builder
	builder.WriteString("Exploit(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	if v := e.ExploitID; v != nil {
		builder.WriteString("exploit_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := e.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := e.Payload; v != nil {
		builder.WriteString("payload=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedCertifyVex returns the CertifyVex named value or an error if the edge was not
// loaded in eager-loading with this name.
func (e *Exploit) NamedCertifyVex(name string) ([]*CertifyVex, error) {
	if e.Edges.namedCertifyVex == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := e.Edges.namedCertifyVex[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (e *Exploit) appendNamedCertifyVex(name string, edges ...*CertifyVex) {
	if e.Edges.namedCertifyVex == nil {
		e.Edges.namedCertifyVex = make(map[string][]*CertifyVex)
	}
	if len(edges) == 0 {
		e.Edges.namedCertifyVex[name] = []*CertifyVex{}
	} else {
		e.Edges.namedCertifyVex[name] = append(e.Edges.namedCertifyVex[name], edges...)
	}
}

// Exploits is a parsable slice of Exploit.
type Exploits []*Exploit
