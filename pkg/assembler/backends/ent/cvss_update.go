// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyvex"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/cvss"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// CVSSUpdate is the builder for updating CVSS entities.
type CVSSUpdate struct {
	config
	hooks    []Hook
	mutation *CVSSMutation
}

// Where appends a list predicates to the CVSSUpdate builder.
func (cu *CVSSUpdate) Where(ps ...predicate.CVSS) *CVSSUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetVulnImpact sets the "vuln_impact" field.
func (cu *CVSSUpdate) SetVulnImpact(f float64) *CVSSUpdate {
	cu.mutation.ResetVulnImpact()
	cu.mutation.SetVulnImpact(f)
	return cu
}

// SetNillableVulnImpact sets the "vuln_impact" field if the given value is not nil.
func (cu *CVSSUpdate) SetNillableVulnImpact(f *float64) *CVSSUpdate {
	if f != nil {
		cu.SetVulnImpact(*f)
	}
	return cu
}

// AddVulnImpact adds f to the "vuln_impact" field.
func (cu *CVSSUpdate) AddVulnImpact(f float64) *CVSSUpdate {
	cu.mutation.AddVulnImpact(f)
	return cu
}

// SetVersion sets the "version" field.
func (cu *CVSSUpdate) SetVersion(s string) *CVSSUpdate {
	cu.mutation.SetVersion(s)
	return cu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cu *CVSSUpdate) SetNillableVersion(s *string) *CVSSUpdate {
	if s != nil {
		cu.SetVersion(*s)
	}
	return cu
}

// SetAttackVector sets the "attack_vector" field.
func (cu *CVSSUpdate) SetAttackVector(s string) *CVSSUpdate {
	cu.mutation.SetAttackVector(s)
	return cu
}

// SetNillableAttackVector sets the "attack_vector" field if the given value is not nil.
func (cu *CVSSUpdate) SetNillableAttackVector(s *string) *CVSSUpdate {
	if s != nil {
		cu.SetAttackVector(*s)
	}
	return cu
}

// AddCertifyVexIDs adds the "certify_vex" edge to the CertifyVex entity by IDs.
func (cu *CVSSUpdate) AddCertifyVexIDs(ids ...uuid.UUID) *CVSSUpdate {
	cu.mutation.AddCertifyVexIDs(ids...)
	return cu
}

// AddCertifyVex adds the "certify_vex" edges to the CertifyVex entity.
func (cu *CVSSUpdate) AddCertifyVex(c ...*CertifyVex) *CVSSUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCertifyVexIDs(ids...)
}

// Mutation returns the CVSSMutation object of the builder.
func (cu *CVSSUpdate) Mutation() *CVSSMutation {
	return cu.mutation
}

// ClearCertifyVex clears all "certify_vex" edges to the CertifyVex entity.
func (cu *CVSSUpdate) ClearCertifyVex() *CVSSUpdate {
	cu.mutation.ClearCertifyVex()
	return cu
}

// RemoveCertifyVexIDs removes the "certify_vex" edge to CertifyVex entities by IDs.
func (cu *CVSSUpdate) RemoveCertifyVexIDs(ids ...uuid.UUID) *CVSSUpdate {
	cu.mutation.RemoveCertifyVexIDs(ids...)
	return cu
}

// RemoveCertifyVex removes "certify_vex" edges to CertifyVex entities.
func (cu *CVSSUpdate) RemoveCertifyVex(c ...*CertifyVex) *CVSSUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCertifyVexIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CVSSUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CVSSUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CVSSUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CVSSUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CVSSUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(cvss.Table, cvss.Columns, sqlgraph.NewFieldSpec(cvss.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.VulnImpact(); ok {
		_spec.SetField(cvss.FieldVulnImpact, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedVulnImpact(); ok {
		_spec.AddField(cvss.FieldVulnImpact, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.Version(); ok {
		_spec.SetField(cvss.FieldVersion, field.TypeString, value)
	}
	if value, ok := cu.mutation.AttackVector(); ok {
		_spec.SetField(cvss.FieldAttackVector, field.TypeString, value)
	}
	if cu.mutation.CertifyVexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   cvss.CertifyVexTable,
			Columns: []string{cvss.CertifyVexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCertifyVexIDs(); len(nodes) > 0 && !cu.mutation.CertifyVexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   cvss.CertifyVexTable,
			Columns: []string{cvss.CertifyVexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CertifyVexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   cvss.CertifyVexTable,
			Columns: []string{cvss.CertifyVexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cvss.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CVSSUpdateOne is the builder for updating a single CVSS entity.
type CVSSUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CVSSMutation
}

// SetVulnImpact sets the "vuln_impact" field.
func (cuo *CVSSUpdateOne) SetVulnImpact(f float64) *CVSSUpdateOne {
	cuo.mutation.ResetVulnImpact()
	cuo.mutation.SetVulnImpact(f)
	return cuo
}

// SetNillableVulnImpact sets the "vuln_impact" field if the given value is not nil.
func (cuo *CVSSUpdateOne) SetNillableVulnImpact(f *float64) *CVSSUpdateOne {
	if f != nil {
		cuo.SetVulnImpact(*f)
	}
	return cuo
}

// AddVulnImpact adds f to the "vuln_impact" field.
func (cuo *CVSSUpdateOne) AddVulnImpact(f float64) *CVSSUpdateOne {
	cuo.mutation.AddVulnImpact(f)
	return cuo
}

// SetVersion sets the "version" field.
func (cuo *CVSSUpdateOne) SetVersion(s string) *CVSSUpdateOne {
	cuo.mutation.SetVersion(s)
	return cuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cuo *CVSSUpdateOne) SetNillableVersion(s *string) *CVSSUpdateOne {
	if s != nil {
		cuo.SetVersion(*s)
	}
	return cuo
}

// SetAttackVector sets the "attack_vector" field.
func (cuo *CVSSUpdateOne) SetAttackVector(s string) *CVSSUpdateOne {
	cuo.mutation.SetAttackVector(s)
	return cuo
}

// SetNillableAttackVector sets the "attack_vector" field if the given value is not nil.
func (cuo *CVSSUpdateOne) SetNillableAttackVector(s *string) *CVSSUpdateOne {
	if s != nil {
		cuo.SetAttackVector(*s)
	}
	return cuo
}

// AddCertifyVexIDs adds the "certify_vex" edge to the CertifyVex entity by IDs.
func (cuo *CVSSUpdateOne) AddCertifyVexIDs(ids ...uuid.UUID) *CVSSUpdateOne {
	cuo.mutation.AddCertifyVexIDs(ids...)
	return cuo
}

// AddCertifyVex adds the "certify_vex" edges to the CertifyVex entity.
func (cuo *CVSSUpdateOne) AddCertifyVex(c ...*CertifyVex) *CVSSUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCertifyVexIDs(ids...)
}

// Mutation returns the CVSSMutation object of the builder.
func (cuo *CVSSUpdateOne) Mutation() *CVSSMutation {
	return cuo.mutation
}

// ClearCertifyVex clears all "certify_vex" edges to the CertifyVex entity.
func (cuo *CVSSUpdateOne) ClearCertifyVex() *CVSSUpdateOne {
	cuo.mutation.ClearCertifyVex()
	return cuo
}

// RemoveCertifyVexIDs removes the "certify_vex" edge to CertifyVex entities by IDs.
func (cuo *CVSSUpdateOne) RemoveCertifyVexIDs(ids ...uuid.UUID) *CVSSUpdateOne {
	cuo.mutation.RemoveCertifyVexIDs(ids...)
	return cuo
}

// RemoveCertifyVex removes "certify_vex" edges to CertifyVex entities.
func (cuo *CVSSUpdateOne) RemoveCertifyVex(c ...*CertifyVex) *CVSSUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCertifyVexIDs(ids...)
}

// Where appends a list predicates to the CVSSUpdate builder.
func (cuo *CVSSUpdateOne) Where(ps ...predicate.CVSS) *CVSSUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CVSSUpdateOne) Select(field string, fields ...string) *CVSSUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated CVSS entity.
func (cuo *CVSSUpdateOne) Save(ctx context.Context) (*CVSS, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CVSSUpdateOne) SaveX(ctx context.Context) *CVSS {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CVSSUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CVSSUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CVSSUpdateOne) sqlSave(ctx context.Context) (_node *CVSS, err error) {
	_spec := sqlgraph.NewUpdateSpec(cvss.Table, cvss.Columns, sqlgraph.NewFieldSpec(cvss.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CVSS.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cvss.FieldID)
		for _, f := range fields {
			if !cvss.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cvss.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.VulnImpact(); ok {
		_spec.SetField(cvss.FieldVulnImpact, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedVulnImpact(); ok {
		_spec.AddField(cvss.FieldVulnImpact, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.Version(); ok {
		_spec.SetField(cvss.FieldVersion, field.TypeString, value)
	}
	if value, ok := cuo.mutation.AttackVector(); ok {
		_spec.SetField(cvss.FieldAttackVector, field.TypeString, value)
	}
	if cuo.mutation.CertifyVexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   cvss.CertifyVexTable,
			Columns: []string{cvss.CertifyVexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCertifyVexIDs(); len(nodes) > 0 && !cuo.mutation.CertifyVexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   cvss.CertifyVexTable,
			Columns: []string{cvss.CertifyVexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CertifyVexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   cvss.CertifyVexTable,
			Columns: []string{cvss.CertifyVexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CVSS{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cvss.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
