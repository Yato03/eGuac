// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/detectionmethod"
)

// DetectionMethod is the model entity for the DetectionMethod schema.
type DetectionMethod struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DetectionID holds the value of the "detection_id" field.
	DetectionID *string `json:"detection_id,omitempty"`
	// Method holds the value of the "method" field.
	Method *string `json:"method,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Effectiveness holds the value of the "effectiveness" field.
	Effectiveness *string `json:"effectiveness,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DetectionMethodQuery when eager-loading is set.
	Edges        DetectionMethodEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DetectionMethodEdges holds the relations/edges for other nodes in the graph.
type DetectionMethodEdges struct {
	// Cwe holds the value of the cwe edge.
	Cwe []*CWE `json:"cwe,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedCwe map[string][]*CWE
}

// CweOrErr returns the Cwe value or an error if the edge
// was not loaded in eager-loading.
func (e DetectionMethodEdges) CweOrErr() ([]*CWE, error) {
	if e.loadedTypes[0] {
		return e.Cwe, nil
	}
	return nil, &NotLoadedError{edge: "cwe"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DetectionMethod) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case detectionmethod.FieldDetectionID, detectionmethod.FieldMethod, detectionmethod.FieldDescription, detectionmethod.FieldEffectiveness:
			values[i] = new(sql.NullString)
		case detectionmethod.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DetectionMethod fields.
func (dm *DetectionMethod) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case detectionmethod.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				dm.ID = *value
			}
		case detectionmethod.FieldDetectionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field detection_id", values[i])
			} else if value.Valid {
				dm.DetectionID = new(string)
				*dm.DetectionID = value.String
			}
		case detectionmethod.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				dm.Method = new(string)
				*dm.Method = value.String
			}
		case detectionmethod.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				dm.Description = new(string)
				*dm.Description = value.String
			}
		case detectionmethod.FieldEffectiveness:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field effectiveness", values[i])
			} else if value.Valid {
				dm.Effectiveness = new(string)
				*dm.Effectiveness = value.String
			}
		default:
			dm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DetectionMethod.
// This includes values selected through modifiers, order, etc.
func (dm *DetectionMethod) Value(name string) (ent.Value, error) {
	return dm.selectValues.Get(name)
}

// QueryCwe queries the "cwe" edge of the DetectionMethod entity.
func (dm *DetectionMethod) QueryCwe() *CWEQuery {
	return NewDetectionMethodClient(dm.config).QueryCwe(dm)
}

// Update returns a builder for updating this DetectionMethod.
// Note that you need to call DetectionMethod.Unwrap() before calling this method if this DetectionMethod
// was returned from a transaction, and the transaction was committed or rolled back.
func (dm *DetectionMethod) Update() *DetectionMethodUpdateOne {
	return NewDetectionMethodClient(dm.config).UpdateOne(dm)
}

// Unwrap unwraps the DetectionMethod entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dm *DetectionMethod) Unwrap() *DetectionMethod {
	_tx, ok := dm.config.driver.(*txDriver)
	if !ok {
		panic("ent: DetectionMethod is not a transactional entity")
	}
	dm.config.driver = _tx.drv
	return dm
}

// String implements the fmt.Stringer.
func (dm *DetectionMethod) String() string {
	var builder strings.Builder
	builder.WriteString("DetectionMethod(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dm.ID))
	if v := dm.DetectionID; v != nil {
		builder.WriteString("detection_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := dm.Method; v != nil {
		builder.WriteString("method=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := dm.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := dm.Effectiveness; v != nil {
		builder.WriteString("effectiveness=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedCwe returns the Cwe named value or an error if the edge was not
// loaded in eager-loading with this name.
func (dm *DetectionMethod) NamedCwe(name string) ([]*CWE, error) {
	if dm.Edges.namedCwe == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := dm.Edges.namedCwe[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (dm *DetectionMethod) appendNamedCwe(name string, edges ...*CWE) {
	if dm.Edges.namedCwe == nil {
		dm.Edges.namedCwe = make(map[string][]*CWE)
	}
	if len(edges) == 0 {
		dm.Edges.namedCwe[name] = []*CWE{}
	} else {
		dm.Edges.namedCwe[name] = append(dm.Edges.namedCwe[name], edges...)
	}
}

// DetectionMethods is a parsable slice of DetectionMethod.
type DetectionMethods []*DetectionMethod
