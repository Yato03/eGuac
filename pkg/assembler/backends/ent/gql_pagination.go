// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/billofmaterials"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/builder"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certification"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifylegal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyscorecard"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyvex"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyvuln"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/consequence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/consequence_impact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/consequence_scope"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/cvss"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/cwe"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/demonstrativeexample"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/dependency"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/detectionmethod"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/exploit"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hashequal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hasmetadata"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/hassourceat"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/license"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/occurrence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packagename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/pkgequal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/pointofcontact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/potentialmitigation"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/reachablecode"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/reachablecodeartifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/slsaattestation"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/sourcename"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnequal"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilityid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilitymetadata"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[uuid.UUID]
	PageInfo       = entgql.PageInfo[uuid.UUID]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// ArtifactEdge is the edge representation of Artifact.
type ArtifactEdge struct {
	Node   *Artifact `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// ArtifactConnection is the connection containing edges to Artifact.
type ArtifactConnection struct {
	Edges      []*ArtifactEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *ArtifactConnection) build(nodes []*Artifact, pager *artifactPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Artifact
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Artifact {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Artifact {
			return nodes[i]
		}
	}
	c.Edges = make([]*ArtifactEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ArtifactEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ArtifactPaginateOption enables pagination customization.
type ArtifactPaginateOption func(*artifactPager) error

// WithArtifactOrder configures pagination ordering.
func WithArtifactOrder(order *ArtifactOrder) ArtifactPaginateOption {
	if order == nil {
		order = DefaultArtifactOrder
	}
	o := *order
	return func(pager *artifactPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultArtifactOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithArtifactFilter configures pagination filter.
func WithArtifactFilter(filter func(*ArtifactQuery) (*ArtifactQuery, error)) ArtifactPaginateOption {
	return func(pager *artifactPager) error {
		if filter == nil {
			return errors.New("ArtifactQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type artifactPager struct {
	reverse bool
	order   *ArtifactOrder
	filter  func(*ArtifactQuery) (*ArtifactQuery, error)
}

func newArtifactPager(opts []ArtifactPaginateOption, reverse bool) (*artifactPager, error) {
	pager := &artifactPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultArtifactOrder
	}
	return pager, nil
}

func (p *artifactPager) applyFilter(query *ArtifactQuery) (*ArtifactQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *artifactPager) toCursor(a *Artifact) Cursor {
	return p.order.Field.toCursor(a)
}

func (p *artifactPager) applyCursors(query *ArtifactQuery, after, before *Cursor) (*ArtifactQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultArtifactOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *artifactPager) applyOrder(query *ArtifactQuery) *ArtifactQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultArtifactOrder.Field {
		query = query.Order(DefaultArtifactOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *artifactPager) orderExpr(query *ArtifactQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultArtifactOrder.Field {
			b.Comma().Ident(DefaultArtifactOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Artifact.
func (a *ArtifactQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ArtifactPaginateOption,
) (*ArtifactConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newArtifactPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}
	conn := &ArtifactConnection{Edges: []*ArtifactEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := a.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if a, err = pager.applyCursors(a, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		a.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := a.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	a = pager.applyOrder(a)
	nodes, err := a.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// ArtifactOrderField defines the ordering field of Artifact.
type ArtifactOrderField struct {
	// Value extracts the ordering value from the given Artifact.
	Value    func(*Artifact) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) artifact.OrderOption
	toCursor func(*Artifact) Cursor
}

// ArtifactOrder defines the ordering of Artifact.
type ArtifactOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *ArtifactOrderField `json:"field"`
}

// DefaultArtifactOrder is the default ordering of Artifact.
var DefaultArtifactOrder = &ArtifactOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ArtifactOrderField{
		Value: func(a *Artifact) (ent.Value, error) {
			return a.ID, nil
		},
		column: artifact.FieldID,
		toTerm: artifact.ByID,
		toCursor: func(a *Artifact) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts Artifact into ArtifactEdge.
func (a *Artifact) ToEdge(order *ArtifactOrder) *ArtifactEdge {
	if order == nil {
		order = DefaultArtifactOrder
	}
	return &ArtifactEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}

// BillOfMaterialsEdge is the edge representation of BillOfMaterials.
type BillOfMaterialsEdge struct {
	Node   *BillOfMaterials `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// BillOfMaterialsConnection is the connection containing edges to BillOfMaterials.
type BillOfMaterialsConnection struct {
	Edges      []*BillOfMaterialsEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

func (c *BillOfMaterialsConnection) build(nodes []*BillOfMaterials, pager *billofmaterialsPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *BillOfMaterials
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *BillOfMaterials {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *BillOfMaterials {
			return nodes[i]
		}
	}
	c.Edges = make([]*BillOfMaterialsEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &BillOfMaterialsEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// BillOfMaterialsPaginateOption enables pagination customization.
type BillOfMaterialsPaginateOption func(*billofmaterialsPager) error

// WithBillOfMaterialsOrder configures pagination ordering.
func WithBillOfMaterialsOrder(order *BillOfMaterialsOrder) BillOfMaterialsPaginateOption {
	if order == nil {
		order = DefaultBillOfMaterialsOrder
	}
	o := *order
	return func(pager *billofmaterialsPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultBillOfMaterialsOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithBillOfMaterialsFilter configures pagination filter.
func WithBillOfMaterialsFilter(filter func(*BillOfMaterialsQuery) (*BillOfMaterialsQuery, error)) BillOfMaterialsPaginateOption {
	return func(pager *billofmaterialsPager) error {
		if filter == nil {
			return errors.New("BillOfMaterialsQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type billofmaterialsPager struct {
	reverse bool
	order   *BillOfMaterialsOrder
	filter  func(*BillOfMaterialsQuery) (*BillOfMaterialsQuery, error)
}

func newBillOfMaterialsPager(opts []BillOfMaterialsPaginateOption, reverse bool) (*billofmaterialsPager, error) {
	pager := &billofmaterialsPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultBillOfMaterialsOrder
	}
	return pager, nil
}

func (p *billofmaterialsPager) applyFilter(query *BillOfMaterialsQuery) (*BillOfMaterialsQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *billofmaterialsPager) toCursor(bom *BillOfMaterials) Cursor {
	return p.order.Field.toCursor(bom)
}

func (p *billofmaterialsPager) applyCursors(query *BillOfMaterialsQuery, after, before *Cursor) (*BillOfMaterialsQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultBillOfMaterialsOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *billofmaterialsPager) applyOrder(query *BillOfMaterialsQuery) *BillOfMaterialsQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultBillOfMaterialsOrder.Field {
		query = query.Order(DefaultBillOfMaterialsOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *billofmaterialsPager) orderExpr(query *BillOfMaterialsQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultBillOfMaterialsOrder.Field {
			b.Comma().Ident(DefaultBillOfMaterialsOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to BillOfMaterials.
func (bom *BillOfMaterialsQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...BillOfMaterialsPaginateOption,
) (*BillOfMaterialsConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newBillOfMaterialsPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if bom, err = pager.applyFilter(bom); err != nil {
		return nil, err
	}
	conn := &BillOfMaterialsConnection{Edges: []*BillOfMaterialsEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := bom.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if bom, err = pager.applyCursors(bom, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		bom.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := bom.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	bom = pager.applyOrder(bom)
	nodes, err := bom.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// BillOfMaterialsOrderField defines the ordering field of BillOfMaterials.
type BillOfMaterialsOrderField struct {
	// Value extracts the ordering value from the given BillOfMaterials.
	Value    func(*BillOfMaterials) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) billofmaterials.OrderOption
	toCursor func(*BillOfMaterials) Cursor
}

// BillOfMaterialsOrder defines the ordering of BillOfMaterials.
type BillOfMaterialsOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *BillOfMaterialsOrderField `json:"field"`
}

// DefaultBillOfMaterialsOrder is the default ordering of BillOfMaterials.
var DefaultBillOfMaterialsOrder = &BillOfMaterialsOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &BillOfMaterialsOrderField{
		Value: func(bom *BillOfMaterials) (ent.Value, error) {
			return bom.ID, nil
		},
		column: billofmaterials.FieldID,
		toTerm: billofmaterials.ByID,
		toCursor: func(bom *BillOfMaterials) Cursor {
			return Cursor{ID: bom.ID}
		},
	},
}

// ToEdge converts BillOfMaterials into BillOfMaterialsEdge.
func (bom *BillOfMaterials) ToEdge(order *BillOfMaterialsOrder) *BillOfMaterialsEdge {
	if order == nil {
		order = DefaultBillOfMaterialsOrder
	}
	return &BillOfMaterialsEdge{
		Node:   bom,
		Cursor: order.Field.toCursor(bom),
	}
}

// BuilderEdge is the edge representation of Builder.
type BuilderEdge struct {
	Node   *Builder `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// BuilderConnection is the connection containing edges to Builder.
type BuilderConnection struct {
	Edges      []*BuilderEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *BuilderConnection) build(nodes []*Builder, pager *builderPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Builder
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Builder {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Builder {
			return nodes[i]
		}
	}
	c.Edges = make([]*BuilderEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &BuilderEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// BuilderPaginateOption enables pagination customization.
type BuilderPaginateOption func(*builderPager) error

// WithBuilderOrder configures pagination ordering.
func WithBuilderOrder(order *BuilderOrder) BuilderPaginateOption {
	if order == nil {
		order = DefaultBuilderOrder
	}
	o := *order
	return func(pager *builderPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultBuilderOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithBuilderFilter configures pagination filter.
func WithBuilderFilter(filter func(*BuilderQuery) (*BuilderQuery, error)) BuilderPaginateOption {
	return func(pager *builderPager) error {
		if filter == nil {
			return errors.New("BuilderQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type builderPager struct {
	reverse bool
	order   *BuilderOrder
	filter  func(*BuilderQuery) (*BuilderQuery, error)
}

func newBuilderPager(opts []BuilderPaginateOption, reverse bool) (*builderPager, error) {
	pager := &builderPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultBuilderOrder
	}
	return pager, nil
}

func (p *builderPager) applyFilter(query *BuilderQuery) (*BuilderQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *builderPager) toCursor(b *Builder) Cursor {
	return p.order.Field.toCursor(b)
}

func (p *builderPager) applyCursors(query *BuilderQuery, after, before *Cursor) (*BuilderQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultBuilderOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *builderPager) applyOrder(query *BuilderQuery) *BuilderQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultBuilderOrder.Field {
		query = query.Order(DefaultBuilderOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *builderPager) orderExpr(query *BuilderQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultBuilderOrder.Field {
			b.Comma().Ident(DefaultBuilderOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Builder.
func (b *BuilderQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...BuilderPaginateOption,
) (*BuilderConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newBuilderPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if b, err = pager.applyFilter(b); err != nil {
		return nil, err
	}
	conn := &BuilderConnection{Edges: []*BuilderEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := b.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if b, err = pager.applyCursors(b, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		b.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := b.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	b = pager.applyOrder(b)
	nodes, err := b.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// BuilderOrderField defines the ordering field of Builder.
type BuilderOrderField struct {
	// Value extracts the ordering value from the given Builder.
	Value    func(*Builder) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) builder.OrderOption
	toCursor func(*Builder) Cursor
}

// BuilderOrder defines the ordering of Builder.
type BuilderOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *BuilderOrderField `json:"field"`
}

// DefaultBuilderOrder is the default ordering of Builder.
var DefaultBuilderOrder = &BuilderOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &BuilderOrderField{
		Value: func(b *Builder) (ent.Value, error) {
			return b.ID, nil
		},
		column: builder.FieldID,
		toTerm: builder.ByID,
		toCursor: func(b *Builder) Cursor {
			return Cursor{ID: b.ID}
		},
	},
}

// ToEdge converts Builder into BuilderEdge.
func (b *Builder) ToEdge(order *BuilderOrder) *BuilderEdge {
	if order == nil {
		order = DefaultBuilderOrder
	}
	return &BuilderEdge{
		Node:   b,
		Cursor: order.Field.toCursor(b),
	}
}

// CVSSEdge is the edge representation of CVSS.
type CVSSEdge struct {
	Node   *CVSS  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// CVSSConnection is the connection containing edges to CVSS.
type CVSSConnection struct {
	Edges      []*CVSSEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *CVSSConnection) build(nodes []*CVSS, pager *cvssPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *CVSS
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *CVSS {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *CVSS {
			return nodes[i]
		}
	}
	c.Edges = make([]*CVSSEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CVSSEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CVSSPaginateOption enables pagination customization.
type CVSSPaginateOption func(*cvssPager) error

// WithCVSSOrder configures pagination ordering.
func WithCVSSOrder(order *CVSSOrder) CVSSPaginateOption {
	if order == nil {
		order = DefaultCVSSOrder
	}
	o := *order
	return func(pager *cvssPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCVSSOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCVSSFilter configures pagination filter.
func WithCVSSFilter(filter func(*CVSSQuery) (*CVSSQuery, error)) CVSSPaginateOption {
	return func(pager *cvssPager) error {
		if filter == nil {
			return errors.New("CVSSQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type cvssPager struct {
	reverse bool
	order   *CVSSOrder
	filter  func(*CVSSQuery) (*CVSSQuery, error)
}

func newCVSSPager(opts []CVSSPaginateOption, reverse bool) (*cvssPager, error) {
	pager := &cvssPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCVSSOrder
	}
	return pager, nil
}

func (p *cvssPager) applyFilter(query *CVSSQuery) (*CVSSQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *cvssPager) toCursor(c *CVSS) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *cvssPager) applyCursors(query *CVSSQuery, after, before *Cursor) (*CVSSQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCVSSOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *cvssPager) applyOrder(query *CVSSQuery) *CVSSQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCVSSOrder.Field {
		query = query.Order(DefaultCVSSOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *cvssPager) orderExpr(query *CVSSQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCVSSOrder.Field {
			b.Comma().Ident(DefaultCVSSOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to CVSS.
func (c *CVSSQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CVSSPaginateOption,
) (*CVSSConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCVSSPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CVSSConnection{Edges: []*CVSSEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := c.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CVSSOrderField defines the ordering field of CVSS.
type CVSSOrderField struct {
	// Value extracts the ordering value from the given CVSS.
	Value    func(*CVSS) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) cvss.OrderOption
	toCursor func(*CVSS) Cursor
}

// CVSSOrder defines the ordering of CVSS.
type CVSSOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *CVSSOrderField `json:"field"`
}

// DefaultCVSSOrder is the default ordering of CVSS.
var DefaultCVSSOrder = &CVSSOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CVSSOrderField{
		Value: func(c *CVSS) (ent.Value, error) {
			return c.ID, nil
		},
		column: cvss.FieldID,
		toTerm: cvss.ByID,
		toCursor: func(c *CVSS) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts CVSS into CVSSEdge.
func (c *CVSS) ToEdge(order *CVSSOrder) *CVSSEdge {
	if order == nil {
		order = DefaultCVSSOrder
	}
	return &CVSSEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// CWEEdge is the edge representation of CWE.
type CWEEdge struct {
	Node   *CWE   `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// CWEConnection is the connection containing edges to CWE.
type CWEConnection struct {
	Edges      []*CWEEdge `json:"edges"`
	PageInfo   PageInfo   `json:"pageInfo"`
	TotalCount int        `json:"totalCount"`
}

func (c *CWEConnection) build(nodes []*CWE, pager *cwePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *CWE
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *CWE {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *CWE {
			return nodes[i]
		}
	}
	c.Edges = make([]*CWEEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CWEEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CWEPaginateOption enables pagination customization.
type CWEPaginateOption func(*cwePager) error

// WithCWEOrder configures pagination ordering.
func WithCWEOrder(order *CWEOrder) CWEPaginateOption {
	if order == nil {
		order = DefaultCWEOrder
	}
	o := *order
	return func(pager *cwePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCWEOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCWEFilter configures pagination filter.
func WithCWEFilter(filter func(*CWEQuery) (*CWEQuery, error)) CWEPaginateOption {
	return func(pager *cwePager) error {
		if filter == nil {
			return errors.New("CWEQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type cwePager struct {
	reverse bool
	order   *CWEOrder
	filter  func(*CWEQuery) (*CWEQuery, error)
}

func newCWEPager(opts []CWEPaginateOption, reverse bool) (*cwePager, error) {
	pager := &cwePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCWEOrder
	}
	return pager, nil
}

func (p *cwePager) applyFilter(query *CWEQuery) (*CWEQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *cwePager) toCursor(c *CWE) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *cwePager) applyCursors(query *CWEQuery, after, before *Cursor) (*CWEQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCWEOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *cwePager) applyOrder(query *CWEQuery) *CWEQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCWEOrder.Field {
		query = query.Order(DefaultCWEOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *cwePager) orderExpr(query *CWEQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCWEOrder.Field {
			b.Comma().Ident(DefaultCWEOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to CWE.
func (c *CWEQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CWEPaginateOption,
) (*CWEConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCWEPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CWEConnection{Edges: []*CWEEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := c.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CWEOrderField defines the ordering field of CWE.
type CWEOrderField struct {
	// Value extracts the ordering value from the given CWE.
	Value    func(*CWE) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) cwe.OrderOption
	toCursor func(*CWE) Cursor
}

// CWEOrder defines the ordering of CWE.
type CWEOrder struct {
	Direction OrderDirection `json:"direction"`
	Field     *CWEOrderField `json:"field"`
}

// DefaultCWEOrder is the default ordering of CWE.
var DefaultCWEOrder = &CWEOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CWEOrderField{
		Value: func(c *CWE) (ent.Value, error) {
			return c.ID, nil
		},
		column: cwe.FieldID,
		toTerm: cwe.ByID,
		toCursor: func(c *CWE) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts CWE into CWEEdge.
func (c *CWE) ToEdge(order *CWEOrder) *CWEEdge {
	if order == nil {
		order = DefaultCWEOrder
	}
	return &CWEEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// CertificationEdge is the edge representation of Certification.
type CertificationEdge struct {
	Node   *Certification `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

// CertificationConnection is the connection containing edges to Certification.
type CertificationConnection struct {
	Edges      []*CertificationEdge `json:"edges"`
	PageInfo   PageInfo             `json:"pageInfo"`
	TotalCount int                  `json:"totalCount"`
}

func (c *CertificationConnection) build(nodes []*Certification, pager *certificationPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Certification
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Certification {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Certification {
			return nodes[i]
		}
	}
	c.Edges = make([]*CertificationEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CertificationEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CertificationPaginateOption enables pagination customization.
type CertificationPaginateOption func(*certificationPager) error

// WithCertificationOrder configures pagination ordering.
func WithCertificationOrder(order *CertificationOrder) CertificationPaginateOption {
	if order == nil {
		order = DefaultCertificationOrder
	}
	o := *order
	return func(pager *certificationPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCertificationOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCertificationFilter configures pagination filter.
func WithCertificationFilter(filter func(*CertificationQuery) (*CertificationQuery, error)) CertificationPaginateOption {
	return func(pager *certificationPager) error {
		if filter == nil {
			return errors.New("CertificationQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type certificationPager struct {
	reverse bool
	order   *CertificationOrder
	filter  func(*CertificationQuery) (*CertificationQuery, error)
}

func newCertificationPager(opts []CertificationPaginateOption, reverse bool) (*certificationPager, error) {
	pager := &certificationPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCertificationOrder
	}
	return pager, nil
}

func (p *certificationPager) applyFilter(query *CertificationQuery) (*CertificationQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *certificationPager) toCursor(c *Certification) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *certificationPager) applyCursors(query *CertificationQuery, after, before *Cursor) (*CertificationQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCertificationOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *certificationPager) applyOrder(query *CertificationQuery) *CertificationQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCertificationOrder.Field {
		query = query.Order(DefaultCertificationOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *certificationPager) orderExpr(query *CertificationQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCertificationOrder.Field {
			b.Comma().Ident(DefaultCertificationOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Certification.
func (c *CertificationQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CertificationPaginateOption,
) (*CertificationConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCertificationPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CertificationConnection{Edges: []*CertificationEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := c.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CertificationOrderField defines the ordering field of Certification.
type CertificationOrderField struct {
	// Value extracts the ordering value from the given Certification.
	Value    func(*Certification) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) certification.OrderOption
	toCursor func(*Certification) Cursor
}

// CertificationOrder defines the ordering of Certification.
type CertificationOrder struct {
	Direction OrderDirection           `json:"direction"`
	Field     *CertificationOrderField `json:"field"`
}

// DefaultCertificationOrder is the default ordering of Certification.
var DefaultCertificationOrder = &CertificationOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CertificationOrderField{
		Value: func(c *Certification) (ent.Value, error) {
			return c.ID, nil
		},
		column: certification.FieldID,
		toTerm: certification.ByID,
		toCursor: func(c *Certification) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Certification into CertificationEdge.
func (c *Certification) ToEdge(order *CertificationOrder) *CertificationEdge {
	if order == nil {
		order = DefaultCertificationOrder
	}
	return &CertificationEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// CertifyLegalEdge is the edge representation of CertifyLegal.
type CertifyLegalEdge struct {
	Node   *CertifyLegal `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// CertifyLegalConnection is the connection containing edges to CertifyLegal.
type CertifyLegalConnection struct {
	Edges      []*CertifyLegalEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *CertifyLegalConnection) build(nodes []*CertifyLegal, pager *certifylegalPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *CertifyLegal
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *CertifyLegal {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *CertifyLegal {
			return nodes[i]
		}
	}
	c.Edges = make([]*CertifyLegalEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CertifyLegalEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CertifyLegalPaginateOption enables pagination customization.
type CertifyLegalPaginateOption func(*certifylegalPager) error

// WithCertifyLegalOrder configures pagination ordering.
func WithCertifyLegalOrder(order *CertifyLegalOrder) CertifyLegalPaginateOption {
	if order == nil {
		order = DefaultCertifyLegalOrder
	}
	o := *order
	return func(pager *certifylegalPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCertifyLegalOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCertifyLegalFilter configures pagination filter.
func WithCertifyLegalFilter(filter func(*CertifyLegalQuery) (*CertifyLegalQuery, error)) CertifyLegalPaginateOption {
	return func(pager *certifylegalPager) error {
		if filter == nil {
			return errors.New("CertifyLegalQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type certifylegalPager struct {
	reverse bool
	order   *CertifyLegalOrder
	filter  func(*CertifyLegalQuery) (*CertifyLegalQuery, error)
}

func newCertifyLegalPager(opts []CertifyLegalPaginateOption, reverse bool) (*certifylegalPager, error) {
	pager := &certifylegalPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCertifyLegalOrder
	}
	return pager, nil
}

func (p *certifylegalPager) applyFilter(query *CertifyLegalQuery) (*CertifyLegalQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *certifylegalPager) toCursor(cl *CertifyLegal) Cursor {
	return p.order.Field.toCursor(cl)
}

func (p *certifylegalPager) applyCursors(query *CertifyLegalQuery, after, before *Cursor) (*CertifyLegalQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCertifyLegalOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *certifylegalPager) applyOrder(query *CertifyLegalQuery) *CertifyLegalQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCertifyLegalOrder.Field {
		query = query.Order(DefaultCertifyLegalOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *certifylegalPager) orderExpr(query *CertifyLegalQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCertifyLegalOrder.Field {
			b.Comma().Ident(DefaultCertifyLegalOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to CertifyLegal.
func (cl *CertifyLegalQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CertifyLegalPaginateOption,
) (*CertifyLegalConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCertifyLegalPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if cl, err = pager.applyFilter(cl); err != nil {
		return nil, err
	}
	conn := &CertifyLegalConnection{Edges: []*CertifyLegalEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := cl.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if cl, err = pager.applyCursors(cl, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		cl.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := cl.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	cl = pager.applyOrder(cl)
	nodes, err := cl.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CertifyLegalOrderField defines the ordering field of CertifyLegal.
type CertifyLegalOrderField struct {
	// Value extracts the ordering value from the given CertifyLegal.
	Value    func(*CertifyLegal) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) certifylegal.OrderOption
	toCursor func(*CertifyLegal) Cursor
}

// CertifyLegalOrder defines the ordering of CertifyLegal.
type CertifyLegalOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *CertifyLegalOrderField `json:"field"`
}

// DefaultCertifyLegalOrder is the default ordering of CertifyLegal.
var DefaultCertifyLegalOrder = &CertifyLegalOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CertifyLegalOrderField{
		Value: func(cl *CertifyLegal) (ent.Value, error) {
			return cl.ID, nil
		},
		column: certifylegal.FieldID,
		toTerm: certifylegal.ByID,
		toCursor: func(cl *CertifyLegal) Cursor {
			return Cursor{ID: cl.ID}
		},
	},
}

// ToEdge converts CertifyLegal into CertifyLegalEdge.
func (cl *CertifyLegal) ToEdge(order *CertifyLegalOrder) *CertifyLegalEdge {
	if order == nil {
		order = DefaultCertifyLegalOrder
	}
	return &CertifyLegalEdge{
		Node:   cl,
		Cursor: order.Field.toCursor(cl),
	}
}

// CertifyScorecardEdge is the edge representation of CertifyScorecard.
type CertifyScorecardEdge struct {
	Node   *CertifyScorecard `json:"node"`
	Cursor Cursor            `json:"cursor"`
}

// CertifyScorecardConnection is the connection containing edges to CertifyScorecard.
type CertifyScorecardConnection struct {
	Edges      []*CertifyScorecardEdge `json:"edges"`
	PageInfo   PageInfo                `json:"pageInfo"`
	TotalCount int                     `json:"totalCount"`
}

func (c *CertifyScorecardConnection) build(nodes []*CertifyScorecard, pager *certifyscorecardPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *CertifyScorecard
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *CertifyScorecard {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *CertifyScorecard {
			return nodes[i]
		}
	}
	c.Edges = make([]*CertifyScorecardEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CertifyScorecardEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CertifyScorecardPaginateOption enables pagination customization.
type CertifyScorecardPaginateOption func(*certifyscorecardPager) error

// WithCertifyScorecardOrder configures pagination ordering.
func WithCertifyScorecardOrder(order *CertifyScorecardOrder) CertifyScorecardPaginateOption {
	if order == nil {
		order = DefaultCertifyScorecardOrder
	}
	o := *order
	return func(pager *certifyscorecardPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCertifyScorecardOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCertifyScorecardFilter configures pagination filter.
func WithCertifyScorecardFilter(filter func(*CertifyScorecardQuery) (*CertifyScorecardQuery, error)) CertifyScorecardPaginateOption {
	return func(pager *certifyscorecardPager) error {
		if filter == nil {
			return errors.New("CertifyScorecardQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type certifyscorecardPager struct {
	reverse bool
	order   *CertifyScorecardOrder
	filter  func(*CertifyScorecardQuery) (*CertifyScorecardQuery, error)
}

func newCertifyScorecardPager(opts []CertifyScorecardPaginateOption, reverse bool) (*certifyscorecardPager, error) {
	pager := &certifyscorecardPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCertifyScorecardOrder
	}
	return pager, nil
}

func (p *certifyscorecardPager) applyFilter(query *CertifyScorecardQuery) (*CertifyScorecardQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *certifyscorecardPager) toCursor(cs *CertifyScorecard) Cursor {
	return p.order.Field.toCursor(cs)
}

func (p *certifyscorecardPager) applyCursors(query *CertifyScorecardQuery, after, before *Cursor) (*CertifyScorecardQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCertifyScorecardOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *certifyscorecardPager) applyOrder(query *CertifyScorecardQuery) *CertifyScorecardQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCertifyScorecardOrder.Field {
		query = query.Order(DefaultCertifyScorecardOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *certifyscorecardPager) orderExpr(query *CertifyScorecardQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCertifyScorecardOrder.Field {
			b.Comma().Ident(DefaultCertifyScorecardOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to CertifyScorecard.
func (cs *CertifyScorecardQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CertifyScorecardPaginateOption,
) (*CertifyScorecardConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCertifyScorecardPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if cs, err = pager.applyFilter(cs); err != nil {
		return nil, err
	}
	conn := &CertifyScorecardConnection{Edges: []*CertifyScorecardEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := cs.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if cs, err = pager.applyCursors(cs, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		cs.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := cs.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	cs = pager.applyOrder(cs)
	nodes, err := cs.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CertifyScorecardOrderField defines the ordering field of CertifyScorecard.
type CertifyScorecardOrderField struct {
	// Value extracts the ordering value from the given CertifyScorecard.
	Value    func(*CertifyScorecard) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) certifyscorecard.OrderOption
	toCursor func(*CertifyScorecard) Cursor
}

// CertifyScorecardOrder defines the ordering of CertifyScorecard.
type CertifyScorecardOrder struct {
	Direction OrderDirection              `json:"direction"`
	Field     *CertifyScorecardOrderField `json:"field"`
}

// DefaultCertifyScorecardOrder is the default ordering of CertifyScorecard.
var DefaultCertifyScorecardOrder = &CertifyScorecardOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CertifyScorecardOrderField{
		Value: func(cs *CertifyScorecard) (ent.Value, error) {
			return cs.ID, nil
		},
		column: certifyscorecard.FieldID,
		toTerm: certifyscorecard.ByID,
		toCursor: func(cs *CertifyScorecard) Cursor {
			return Cursor{ID: cs.ID}
		},
	},
}

// ToEdge converts CertifyScorecard into CertifyScorecardEdge.
func (cs *CertifyScorecard) ToEdge(order *CertifyScorecardOrder) *CertifyScorecardEdge {
	if order == nil {
		order = DefaultCertifyScorecardOrder
	}
	return &CertifyScorecardEdge{
		Node:   cs,
		Cursor: order.Field.toCursor(cs),
	}
}

// CertifyVexEdge is the edge representation of CertifyVex.
type CertifyVexEdge struct {
	Node   *CertifyVex `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// CertifyVexConnection is the connection containing edges to CertifyVex.
type CertifyVexConnection struct {
	Edges      []*CertifyVexEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *CertifyVexConnection) build(nodes []*CertifyVex, pager *certifyvexPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *CertifyVex
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *CertifyVex {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *CertifyVex {
			return nodes[i]
		}
	}
	c.Edges = make([]*CertifyVexEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CertifyVexEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CertifyVexPaginateOption enables pagination customization.
type CertifyVexPaginateOption func(*certifyvexPager) error

// WithCertifyVexOrder configures pagination ordering.
func WithCertifyVexOrder(order *CertifyVexOrder) CertifyVexPaginateOption {
	if order == nil {
		order = DefaultCertifyVexOrder
	}
	o := *order
	return func(pager *certifyvexPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCertifyVexOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCertifyVexFilter configures pagination filter.
func WithCertifyVexFilter(filter func(*CertifyVexQuery) (*CertifyVexQuery, error)) CertifyVexPaginateOption {
	return func(pager *certifyvexPager) error {
		if filter == nil {
			return errors.New("CertifyVexQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type certifyvexPager struct {
	reverse bool
	order   *CertifyVexOrder
	filter  func(*CertifyVexQuery) (*CertifyVexQuery, error)
}

func newCertifyVexPager(opts []CertifyVexPaginateOption, reverse bool) (*certifyvexPager, error) {
	pager := &certifyvexPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCertifyVexOrder
	}
	return pager, nil
}

func (p *certifyvexPager) applyFilter(query *CertifyVexQuery) (*CertifyVexQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *certifyvexPager) toCursor(cv *CertifyVex) Cursor {
	return p.order.Field.toCursor(cv)
}

func (p *certifyvexPager) applyCursors(query *CertifyVexQuery, after, before *Cursor) (*CertifyVexQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCertifyVexOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *certifyvexPager) applyOrder(query *CertifyVexQuery) *CertifyVexQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCertifyVexOrder.Field {
		query = query.Order(DefaultCertifyVexOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *certifyvexPager) orderExpr(query *CertifyVexQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCertifyVexOrder.Field {
			b.Comma().Ident(DefaultCertifyVexOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to CertifyVex.
func (cv *CertifyVexQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CertifyVexPaginateOption,
) (*CertifyVexConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCertifyVexPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if cv, err = pager.applyFilter(cv); err != nil {
		return nil, err
	}
	conn := &CertifyVexConnection{Edges: []*CertifyVexEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := cv.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if cv, err = pager.applyCursors(cv, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		cv.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := cv.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	cv = pager.applyOrder(cv)
	nodes, err := cv.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CertifyVexOrderField defines the ordering field of CertifyVex.
type CertifyVexOrderField struct {
	// Value extracts the ordering value from the given CertifyVex.
	Value    func(*CertifyVex) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) certifyvex.OrderOption
	toCursor func(*CertifyVex) Cursor
}

// CertifyVexOrder defines the ordering of CertifyVex.
type CertifyVexOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *CertifyVexOrderField `json:"field"`
}

// DefaultCertifyVexOrder is the default ordering of CertifyVex.
var DefaultCertifyVexOrder = &CertifyVexOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CertifyVexOrderField{
		Value: func(cv *CertifyVex) (ent.Value, error) {
			return cv.ID, nil
		},
		column: certifyvex.FieldID,
		toTerm: certifyvex.ByID,
		toCursor: func(cv *CertifyVex) Cursor {
			return Cursor{ID: cv.ID}
		},
	},
}

// ToEdge converts CertifyVex into CertifyVexEdge.
func (cv *CertifyVex) ToEdge(order *CertifyVexOrder) *CertifyVexEdge {
	if order == nil {
		order = DefaultCertifyVexOrder
	}
	return &CertifyVexEdge{
		Node:   cv,
		Cursor: order.Field.toCursor(cv),
	}
}

// CertifyVulnEdge is the edge representation of CertifyVuln.
type CertifyVulnEdge struct {
	Node   *CertifyVuln `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// CertifyVulnConnection is the connection containing edges to CertifyVuln.
type CertifyVulnConnection struct {
	Edges      []*CertifyVulnEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *CertifyVulnConnection) build(nodes []*CertifyVuln, pager *certifyvulnPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *CertifyVuln
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *CertifyVuln {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *CertifyVuln {
			return nodes[i]
		}
	}
	c.Edges = make([]*CertifyVulnEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CertifyVulnEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CertifyVulnPaginateOption enables pagination customization.
type CertifyVulnPaginateOption func(*certifyvulnPager) error

// WithCertifyVulnOrder configures pagination ordering.
func WithCertifyVulnOrder(order *CertifyVulnOrder) CertifyVulnPaginateOption {
	if order == nil {
		order = DefaultCertifyVulnOrder
	}
	o := *order
	return func(pager *certifyvulnPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCertifyVulnOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCertifyVulnFilter configures pagination filter.
func WithCertifyVulnFilter(filter func(*CertifyVulnQuery) (*CertifyVulnQuery, error)) CertifyVulnPaginateOption {
	return func(pager *certifyvulnPager) error {
		if filter == nil {
			return errors.New("CertifyVulnQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type certifyvulnPager struct {
	reverse bool
	order   *CertifyVulnOrder
	filter  func(*CertifyVulnQuery) (*CertifyVulnQuery, error)
}

func newCertifyVulnPager(opts []CertifyVulnPaginateOption, reverse bool) (*certifyvulnPager, error) {
	pager := &certifyvulnPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCertifyVulnOrder
	}
	return pager, nil
}

func (p *certifyvulnPager) applyFilter(query *CertifyVulnQuery) (*CertifyVulnQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *certifyvulnPager) toCursor(cv *CertifyVuln) Cursor {
	return p.order.Field.toCursor(cv)
}

func (p *certifyvulnPager) applyCursors(query *CertifyVulnQuery, after, before *Cursor) (*CertifyVulnQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCertifyVulnOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *certifyvulnPager) applyOrder(query *CertifyVulnQuery) *CertifyVulnQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCertifyVulnOrder.Field {
		query = query.Order(DefaultCertifyVulnOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *certifyvulnPager) orderExpr(query *CertifyVulnQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCertifyVulnOrder.Field {
			b.Comma().Ident(DefaultCertifyVulnOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to CertifyVuln.
func (cv *CertifyVulnQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CertifyVulnPaginateOption,
) (*CertifyVulnConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCertifyVulnPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if cv, err = pager.applyFilter(cv); err != nil {
		return nil, err
	}
	conn := &CertifyVulnConnection{Edges: []*CertifyVulnEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := cv.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if cv, err = pager.applyCursors(cv, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		cv.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := cv.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	cv = pager.applyOrder(cv)
	nodes, err := cv.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CertifyVulnOrderField defines the ordering field of CertifyVuln.
type CertifyVulnOrderField struct {
	// Value extracts the ordering value from the given CertifyVuln.
	Value    func(*CertifyVuln) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) certifyvuln.OrderOption
	toCursor func(*CertifyVuln) Cursor
}

// CertifyVulnOrder defines the ordering of CertifyVuln.
type CertifyVulnOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *CertifyVulnOrderField `json:"field"`
}

// DefaultCertifyVulnOrder is the default ordering of CertifyVuln.
var DefaultCertifyVulnOrder = &CertifyVulnOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CertifyVulnOrderField{
		Value: func(cv *CertifyVuln) (ent.Value, error) {
			return cv.ID, nil
		},
		column: certifyvuln.FieldID,
		toTerm: certifyvuln.ByID,
		toCursor: func(cv *CertifyVuln) Cursor {
			return Cursor{ID: cv.ID}
		},
	},
}

// ToEdge converts CertifyVuln into CertifyVulnEdge.
func (cv *CertifyVuln) ToEdge(order *CertifyVulnOrder) *CertifyVulnEdge {
	if order == nil {
		order = DefaultCertifyVulnOrder
	}
	return &CertifyVulnEdge{
		Node:   cv,
		Cursor: order.Field.toCursor(cv),
	}
}

// ConsequenceEdge is the edge representation of Consequence.
type ConsequenceEdge struct {
	Node   *Consequence `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// ConsequenceConnection is the connection containing edges to Consequence.
type ConsequenceConnection struct {
	Edges      []*ConsequenceEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *ConsequenceConnection) build(nodes []*Consequence, pager *consequencePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Consequence
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Consequence {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Consequence {
			return nodes[i]
		}
	}
	c.Edges = make([]*ConsequenceEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ConsequenceEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ConsequencePaginateOption enables pagination customization.
type ConsequencePaginateOption func(*consequencePager) error

// WithConsequenceOrder configures pagination ordering.
func WithConsequenceOrder(order *ConsequenceOrder) ConsequencePaginateOption {
	if order == nil {
		order = DefaultConsequenceOrder
	}
	o := *order
	return func(pager *consequencePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultConsequenceOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithConsequenceFilter configures pagination filter.
func WithConsequenceFilter(filter func(*ConsequenceQuery) (*ConsequenceQuery, error)) ConsequencePaginateOption {
	return func(pager *consequencePager) error {
		if filter == nil {
			return errors.New("ConsequenceQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type consequencePager struct {
	reverse bool
	order   *ConsequenceOrder
	filter  func(*ConsequenceQuery) (*ConsequenceQuery, error)
}

func newConsequencePager(opts []ConsequencePaginateOption, reverse bool) (*consequencePager, error) {
	pager := &consequencePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultConsequenceOrder
	}
	return pager, nil
}

func (p *consequencePager) applyFilter(query *ConsequenceQuery) (*ConsequenceQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *consequencePager) toCursor(c *Consequence) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *consequencePager) applyCursors(query *ConsequenceQuery, after, before *Cursor) (*ConsequenceQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultConsequenceOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *consequencePager) applyOrder(query *ConsequenceQuery) *ConsequenceQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultConsequenceOrder.Field {
		query = query.Order(DefaultConsequenceOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *consequencePager) orderExpr(query *ConsequenceQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultConsequenceOrder.Field {
			b.Comma().Ident(DefaultConsequenceOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Consequence.
func (c *ConsequenceQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ConsequencePaginateOption,
) (*ConsequenceConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newConsequencePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &ConsequenceConnection{Edges: []*ConsequenceEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := c.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// ConsequenceOrderField defines the ordering field of Consequence.
type ConsequenceOrderField struct {
	// Value extracts the ordering value from the given Consequence.
	Value    func(*Consequence) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) consequence.OrderOption
	toCursor func(*Consequence) Cursor
}

// ConsequenceOrder defines the ordering of Consequence.
type ConsequenceOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *ConsequenceOrderField `json:"field"`
}

// DefaultConsequenceOrder is the default ordering of Consequence.
var DefaultConsequenceOrder = &ConsequenceOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ConsequenceOrderField{
		Value: func(c *Consequence) (ent.Value, error) {
			return c.ID, nil
		},
		column: consequence.FieldID,
		toTerm: consequence.ByID,
		toCursor: func(c *Consequence) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Consequence into ConsequenceEdge.
func (c *Consequence) ToEdge(order *ConsequenceOrder) *ConsequenceEdge {
	if order == nil {
		order = DefaultConsequenceOrder
	}
	return &ConsequenceEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// Consequence_ImpactEdge is the edge representation of Consequence_Impact.
type Consequence_ImpactEdge struct {
	Node   *Consequence_Impact `json:"node"`
	Cursor Cursor              `json:"cursor"`
}

// Consequence_ImpactConnection is the connection containing edges to Consequence_Impact.
type Consequence_ImpactConnection struct {
	Edges      []*Consequence_ImpactEdge `json:"edges"`
	PageInfo   PageInfo                  `json:"pageInfo"`
	TotalCount int                       `json:"totalCount"`
}

func (c *Consequence_ImpactConnection) build(nodes []*Consequence_Impact, pager *consequenceImpactPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Consequence_Impact
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Consequence_Impact {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Consequence_Impact {
			return nodes[i]
		}
	}
	c.Edges = make([]*Consequence_ImpactEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &Consequence_ImpactEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// Consequence_ImpactPaginateOption enables pagination customization.
type Consequence_ImpactPaginateOption func(*consequenceImpactPager) error

// WithConsequence_ImpactOrder configures pagination ordering.
func WithConsequence_ImpactOrder(order *Consequence_ImpactOrder) Consequence_ImpactPaginateOption {
	if order == nil {
		order = DefaultConsequence_ImpactOrder
	}
	o := *order
	return func(pager *consequenceImpactPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultConsequence_ImpactOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithConsequence_ImpactFilter configures pagination filter.
func WithConsequence_ImpactFilter(filter func(*ConsequenceImpactQuery) (*ConsequenceImpactQuery, error)) Consequence_ImpactPaginateOption {
	return func(pager *consequenceImpactPager) error {
		if filter == nil {
			return errors.New("ConsequenceImpactQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type consequenceImpactPager struct {
	reverse bool
	order   *Consequence_ImpactOrder
	filter  func(*ConsequenceImpactQuery) (*ConsequenceImpactQuery, error)
}

func newConsequence_ImpactPager(opts []Consequence_ImpactPaginateOption, reverse bool) (*consequenceImpactPager, error) {
	pager := &consequenceImpactPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultConsequence_ImpactOrder
	}
	return pager, nil
}

func (p *consequenceImpactPager) applyFilter(query *ConsequenceImpactQuery) (*ConsequenceImpactQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *consequenceImpactPager) toCursor(ci *Consequence_Impact) Cursor {
	return p.order.Field.toCursor(ci)
}

func (p *consequenceImpactPager) applyCursors(query *ConsequenceImpactQuery, after, before *Cursor) (*ConsequenceImpactQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultConsequence_ImpactOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *consequenceImpactPager) applyOrder(query *ConsequenceImpactQuery) *ConsequenceImpactQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultConsequence_ImpactOrder.Field {
		query = query.Order(DefaultConsequence_ImpactOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *consequenceImpactPager) orderExpr(query *ConsequenceImpactQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultConsequence_ImpactOrder.Field {
			b.Comma().Ident(DefaultConsequence_ImpactOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Consequence_Impact.
func (ci *ConsequenceImpactQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...Consequence_ImpactPaginateOption,
) (*Consequence_ImpactConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newConsequence_ImpactPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ci, err = pager.applyFilter(ci); err != nil {
		return nil, err
	}
	conn := &Consequence_ImpactConnection{Edges: []*Consequence_ImpactEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := ci.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ci, err = pager.applyCursors(ci, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		ci.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ci.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ci = pager.applyOrder(ci)
	nodes, err := ci.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// Consequence_ImpactOrderField defines the ordering field of Consequence_Impact.
type Consequence_ImpactOrderField struct {
	// Value extracts the ordering value from the given Consequence_Impact.
	Value    func(*Consequence_Impact) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) consequence_impact.OrderOption
	toCursor func(*Consequence_Impact) Cursor
}

// Consequence_ImpactOrder defines the ordering of Consequence_Impact.
type Consequence_ImpactOrder struct {
	Direction OrderDirection                `json:"direction"`
	Field     *Consequence_ImpactOrderField `json:"field"`
}

// DefaultConsequence_ImpactOrder is the default ordering of Consequence_Impact.
var DefaultConsequence_ImpactOrder = &Consequence_ImpactOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &Consequence_ImpactOrderField{
		Value: func(ci *Consequence_Impact) (ent.Value, error) {
			return ci.ID, nil
		},
		column: consequence_impact.FieldID,
		toTerm: consequence_impact.ByID,
		toCursor: func(ci *Consequence_Impact) Cursor {
			return Cursor{ID: ci.ID}
		},
	},
}

// ToEdge converts Consequence_Impact into Consequence_ImpactEdge.
func (ci *Consequence_Impact) ToEdge(order *Consequence_ImpactOrder) *Consequence_ImpactEdge {
	if order == nil {
		order = DefaultConsequence_ImpactOrder
	}
	return &Consequence_ImpactEdge{
		Node:   ci,
		Cursor: order.Field.toCursor(ci),
	}
}

// Consequence_ScopeEdge is the edge representation of Consequence_Scope.
type Consequence_ScopeEdge struct {
	Node   *Consequence_Scope `json:"node"`
	Cursor Cursor             `json:"cursor"`
}

// Consequence_ScopeConnection is the connection containing edges to Consequence_Scope.
type Consequence_ScopeConnection struct {
	Edges      []*Consequence_ScopeEdge `json:"edges"`
	PageInfo   PageInfo                 `json:"pageInfo"`
	TotalCount int                      `json:"totalCount"`
}

func (c *Consequence_ScopeConnection) build(nodes []*Consequence_Scope, pager *consequenceScopePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Consequence_Scope
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Consequence_Scope {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Consequence_Scope {
			return nodes[i]
		}
	}
	c.Edges = make([]*Consequence_ScopeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &Consequence_ScopeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// Consequence_ScopePaginateOption enables pagination customization.
type Consequence_ScopePaginateOption func(*consequenceScopePager) error

// WithConsequence_ScopeOrder configures pagination ordering.
func WithConsequence_ScopeOrder(order *Consequence_ScopeOrder) Consequence_ScopePaginateOption {
	if order == nil {
		order = DefaultConsequence_ScopeOrder
	}
	o := *order
	return func(pager *consequenceScopePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultConsequence_ScopeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithConsequence_ScopeFilter configures pagination filter.
func WithConsequence_ScopeFilter(filter func(*ConsequenceScopeQuery) (*ConsequenceScopeQuery, error)) Consequence_ScopePaginateOption {
	return func(pager *consequenceScopePager) error {
		if filter == nil {
			return errors.New("ConsequenceScopeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type consequenceScopePager struct {
	reverse bool
	order   *Consequence_ScopeOrder
	filter  func(*ConsequenceScopeQuery) (*ConsequenceScopeQuery, error)
}

func newConsequence_ScopePager(opts []Consequence_ScopePaginateOption, reverse bool) (*consequenceScopePager, error) {
	pager := &consequenceScopePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultConsequence_ScopeOrder
	}
	return pager, nil
}

func (p *consequenceScopePager) applyFilter(query *ConsequenceScopeQuery) (*ConsequenceScopeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *consequenceScopePager) toCursor(cs *Consequence_Scope) Cursor {
	return p.order.Field.toCursor(cs)
}

func (p *consequenceScopePager) applyCursors(query *ConsequenceScopeQuery, after, before *Cursor) (*ConsequenceScopeQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultConsequence_ScopeOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *consequenceScopePager) applyOrder(query *ConsequenceScopeQuery) *ConsequenceScopeQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultConsequence_ScopeOrder.Field {
		query = query.Order(DefaultConsequence_ScopeOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *consequenceScopePager) orderExpr(query *ConsequenceScopeQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultConsequence_ScopeOrder.Field {
			b.Comma().Ident(DefaultConsequence_ScopeOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Consequence_Scope.
func (cs *ConsequenceScopeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...Consequence_ScopePaginateOption,
) (*Consequence_ScopeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newConsequence_ScopePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if cs, err = pager.applyFilter(cs); err != nil {
		return nil, err
	}
	conn := &Consequence_ScopeConnection{Edges: []*Consequence_ScopeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := cs.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if cs, err = pager.applyCursors(cs, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		cs.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := cs.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	cs = pager.applyOrder(cs)
	nodes, err := cs.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// Consequence_ScopeOrderField defines the ordering field of Consequence_Scope.
type Consequence_ScopeOrderField struct {
	// Value extracts the ordering value from the given Consequence_Scope.
	Value    func(*Consequence_Scope) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) consequence_scope.OrderOption
	toCursor func(*Consequence_Scope) Cursor
}

// Consequence_ScopeOrder defines the ordering of Consequence_Scope.
type Consequence_ScopeOrder struct {
	Direction OrderDirection               `json:"direction"`
	Field     *Consequence_ScopeOrderField `json:"field"`
}

// DefaultConsequence_ScopeOrder is the default ordering of Consequence_Scope.
var DefaultConsequence_ScopeOrder = &Consequence_ScopeOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &Consequence_ScopeOrderField{
		Value: func(cs *Consequence_Scope) (ent.Value, error) {
			return cs.ID, nil
		},
		column: consequence_scope.FieldID,
		toTerm: consequence_scope.ByID,
		toCursor: func(cs *Consequence_Scope) Cursor {
			return Cursor{ID: cs.ID}
		},
	},
}

// ToEdge converts Consequence_Scope into Consequence_ScopeEdge.
func (cs *Consequence_Scope) ToEdge(order *Consequence_ScopeOrder) *Consequence_ScopeEdge {
	if order == nil {
		order = DefaultConsequence_ScopeOrder
	}
	return &Consequence_ScopeEdge{
		Node:   cs,
		Cursor: order.Field.toCursor(cs),
	}
}

// DemonstrativeExampleEdge is the edge representation of DemonstrativeExample.
type DemonstrativeExampleEdge struct {
	Node   *DemonstrativeExample `json:"node"`
	Cursor Cursor                `json:"cursor"`
}

// DemonstrativeExampleConnection is the connection containing edges to DemonstrativeExample.
type DemonstrativeExampleConnection struct {
	Edges      []*DemonstrativeExampleEdge `json:"edges"`
	PageInfo   PageInfo                    `json:"pageInfo"`
	TotalCount int                         `json:"totalCount"`
}

func (c *DemonstrativeExampleConnection) build(nodes []*DemonstrativeExample, pager *demonstrativeexamplePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *DemonstrativeExample
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *DemonstrativeExample {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *DemonstrativeExample {
			return nodes[i]
		}
	}
	c.Edges = make([]*DemonstrativeExampleEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &DemonstrativeExampleEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// DemonstrativeExamplePaginateOption enables pagination customization.
type DemonstrativeExamplePaginateOption func(*demonstrativeexamplePager) error

// WithDemonstrativeExampleOrder configures pagination ordering.
func WithDemonstrativeExampleOrder(order *DemonstrativeExampleOrder) DemonstrativeExamplePaginateOption {
	if order == nil {
		order = DefaultDemonstrativeExampleOrder
	}
	o := *order
	return func(pager *demonstrativeexamplePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultDemonstrativeExampleOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithDemonstrativeExampleFilter configures pagination filter.
func WithDemonstrativeExampleFilter(filter func(*DemonstrativeExampleQuery) (*DemonstrativeExampleQuery, error)) DemonstrativeExamplePaginateOption {
	return func(pager *demonstrativeexamplePager) error {
		if filter == nil {
			return errors.New("DemonstrativeExampleQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type demonstrativeexamplePager struct {
	reverse bool
	order   *DemonstrativeExampleOrder
	filter  func(*DemonstrativeExampleQuery) (*DemonstrativeExampleQuery, error)
}

func newDemonstrativeExamplePager(opts []DemonstrativeExamplePaginateOption, reverse bool) (*demonstrativeexamplePager, error) {
	pager := &demonstrativeexamplePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultDemonstrativeExampleOrder
	}
	return pager, nil
}

func (p *demonstrativeexamplePager) applyFilter(query *DemonstrativeExampleQuery) (*DemonstrativeExampleQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *demonstrativeexamplePager) toCursor(de *DemonstrativeExample) Cursor {
	return p.order.Field.toCursor(de)
}

func (p *demonstrativeexamplePager) applyCursors(query *DemonstrativeExampleQuery, after, before *Cursor) (*DemonstrativeExampleQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultDemonstrativeExampleOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *demonstrativeexamplePager) applyOrder(query *DemonstrativeExampleQuery) *DemonstrativeExampleQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultDemonstrativeExampleOrder.Field {
		query = query.Order(DefaultDemonstrativeExampleOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *demonstrativeexamplePager) orderExpr(query *DemonstrativeExampleQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultDemonstrativeExampleOrder.Field {
			b.Comma().Ident(DefaultDemonstrativeExampleOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to DemonstrativeExample.
func (de *DemonstrativeExampleQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DemonstrativeExamplePaginateOption,
) (*DemonstrativeExampleConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDemonstrativeExamplePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if de, err = pager.applyFilter(de); err != nil {
		return nil, err
	}
	conn := &DemonstrativeExampleConnection{Edges: []*DemonstrativeExampleEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := de.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if de, err = pager.applyCursors(de, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		de.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := de.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	de = pager.applyOrder(de)
	nodes, err := de.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// DemonstrativeExampleOrderField defines the ordering field of DemonstrativeExample.
type DemonstrativeExampleOrderField struct {
	// Value extracts the ordering value from the given DemonstrativeExample.
	Value    func(*DemonstrativeExample) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) demonstrativeexample.OrderOption
	toCursor func(*DemonstrativeExample) Cursor
}

// DemonstrativeExampleOrder defines the ordering of DemonstrativeExample.
type DemonstrativeExampleOrder struct {
	Direction OrderDirection                  `json:"direction"`
	Field     *DemonstrativeExampleOrderField `json:"field"`
}

// DefaultDemonstrativeExampleOrder is the default ordering of DemonstrativeExample.
var DefaultDemonstrativeExampleOrder = &DemonstrativeExampleOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &DemonstrativeExampleOrderField{
		Value: func(de *DemonstrativeExample) (ent.Value, error) {
			return de.ID, nil
		},
		column: demonstrativeexample.FieldID,
		toTerm: demonstrativeexample.ByID,
		toCursor: func(de *DemonstrativeExample) Cursor {
			return Cursor{ID: de.ID}
		},
	},
}

// ToEdge converts DemonstrativeExample into DemonstrativeExampleEdge.
func (de *DemonstrativeExample) ToEdge(order *DemonstrativeExampleOrder) *DemonstrativeExampleEdge {
	if order == nil {
		order = DefaultDemonstrativeExampleOrder
	}
	return &DemonstrativeExampleEdge{
		Node:   de,
		Cursor: order.Field.toCursor(de),
	}
}

// DependencyEdge is the edge representation of Dependency.
type DependencyEdge struct {
	Node   *Dependency `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// DependencyConnection is the connection containing edges to Dependency.
type DependencyConnection struct {
	Edges      []*DependencyEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *DependencyConnection) build(nodes []*Dependency, pager *dependencyPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Dependency
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Dependency {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Dependency {
			return nodes[i]
		}
	}
	c.Edges = make([]*DependencyEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &DependencyEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// DependencyPaginateOption enables pagination customization.
type DependencyPaginateOption func(*dependencyPager) error

// WithDependencyOrder configures pagination ordering.
func WithDependencyOrder(order *DependencyOrder) DependencyPaginateOption {
	if order == nil {
		order = DefaultDependencyOrder
	}
	o := *order
	return func(pager *dependencyPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultDependencyOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithDependencyFilter configures pagination filter.
func WithDependencyFilter(filter func(*DependencyQuery) (*DependencyQuery, error)) DependencyPaginateOption {
	return func(pager *dependencyPager) error {
		if filter == nil {
			return errors.New("DependencyQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type dependencyPager struct {
	reverse bool
	order   *DependencyOrder
	filter  func(*DependencyQuery) (*DependencyQuery, error)
}

func newDependencyPager(opts []DependencyPaginateOption, reverse bool) (*dependencyPager, error) {
	pager := &dependencyPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultDependencyOrder
	}
	return pager, nil
}

func (p *dependencyPager) applyFilter(query *DependencyQuery) (*DependencyQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *dependencyPager) toCursor(d *Dependency) Cursor {
	return p.order.Field.toCursor(d)
}

func (p *dependencyPager) applyCursors(query *DependencyQuery, after, before *Cursor) (*DependencyQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultDependencyOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *dependencyPager) applyOrder(query *DependencyQuery) *DependencyQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultDependencyOrder.Field {
		query = query.Order(DefaultDependencyOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *dependencyPager) orderExpr(query *DependencyQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultDependencyOrder.Field {
			b.Comma().Ident(DefaultDependencyOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Dependency.
func (d *DependencyQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DependencyPaginateOption,
) (*DependencyConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDependencyPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if d, err = pager.applyFilter(d); err != nil {
		return nil, err
	}
	conn := &DependencyConnection{Edges: []*DependencyEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := d.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if d, err = pager.applyCursors(d, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		d.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := d.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	d = pager.applyOrder(d)
	nodes, err := d.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// DependencyOrderField defines the ordering field of Dependency.
type DependencyOrderField struct {
	// Value extracts the ordering value from the given Dependency.
	Value    func(*Dependency) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) dependency.OrderOption
	toCursor func(*Dependency) Cursor
}

// DependencyOrder defines the ordering of Dependency.
type DependencyOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *DependencyOrderField `json:"field"`
}

// DefaultDependencyOrder is the default ordering of Dependency.
var DefaultDependencyOrder = &DependencyOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &DependencyOrderField{
		Value: func(d *Dependency) (ent.Value, error) {
			return d.ID, nil
		},
		column: dependency.FieldID,
		toTerm: dependency.ByID,
		toCursor: func(d *Dependency) Cursor {
			return Cursor{ID: d.ID}
		},
	},
}

// ToEdge converts Dependency into DependencyEdge.
func (d *Dependency) ToEdge(order *DependencyOrder) *DependencyEdge {
	if order == nil {
		order = DefaultDependencyOrder
	}
	return &DependencyEdge{
		Node:   d,
		Cursor: order.Field.toCursor(d),
	}
}

// DetectionMethodEdge is the edge representation of DetectionMethod.
type DetectionMethodEdge struct {
	Node   *DetectionMethod `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// DetectionMethodConnection is the connection containing edges to DetectionMethod.
type DetectionMethodConnection struct {
	Edges      []*DetectionMethodEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

func (c *DetectionMethodConnection) build(nodes []*DetectionMethod, pager *detectionmethodPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *DetectionMethod
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *DetectionMethod {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *DetectionMethod {
			return nodes[i]
		}
	}
	c.Edges = make([]*DetectionMethodEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &DetectionMethodEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// DetectionMethodPaginateOption enables pagination customization.
type DetectionMethodPaginateOption func(*detectionmethodPager) error

// WithDetectionMethodOrder configures pagination ordering.
func WithDetectionMethodOrder(order *DetectionMethodOrder) DetectionMethodPaginateOption {
	if order == nil {
		order = DefaultDetectionMethodOrder
	}
	o := *order
	return func(pager *detectionmethodPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultDetectionMethodOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithDetectionMethodFilter configures pagination filter.
func WithDetectionMethodFilter(filter func(*DetectionMethodQuery) (*DetectionMethodQuery, error)) DetectionMethodPaginateOption {
	return func(pager *detectionmethodPager) error {
		if filter == nil {
			return errors.New("DetectionMethodQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type detectionmethodPager struct {
	reverse bool
	order   *DetectionMethodOrder
	filter  func(*DetectionMethodQuery) (*DetectionMethodQuery, error)
}

func newDetectionMethodPager(opts []DetectionMethodPaginateOption, reverse bool) (*detectionmethodPager, error) {
	pager := &detectionmethodPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultDetectionMethodOrder
	}
	return pager, nil
}

func (p *detectionmethodPager) applyFilter(query *DetectionMethodQuery) (*DetectionMethodQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *detectionmethodPager) toCursor(dm *DetectionMethod) Cursor {
	return p.order.Field.toCursor(dm)
}

func (p *detectionmethodPager) applyCursors(query *DetectionMethodQuery, after, before *Cursor) (*DetectionMethodQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultDetectionMethodOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *detectionmethodPager) applyOrder(query *DetectionMethodQuery) *DetectionMethodQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultDetectionMethodOrder.Field {
		query = query.Order(DefaultDetectionMethodOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *detectionmethodPager) orderExpr(query *DetectionMethodQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultDetectionMethodOrder.Field {
			b.Comma().Ident(DefaultDetectionMethodOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to DetectionMethod.
func (dm *DetectionMethodQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DetectionMethodPaginateOption,
) (*DetectionMethodConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDetectionMethodPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if dm, err = pager.applyFilter(dm); err != nil {
		return nil, err
	}
	conn := &DetectionMethodConnection{Edges: []*DetectionMethodEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := dm.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if dm, err = pager.applyCursors(dm, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		dm.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := dm.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	dm = pager.applyOrder(dm)
	nodes, err := dm.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// DetectionMethodOrderField defines the ordering field of DetectionMethod.
type DetectionMethodOrderField struct {
	// Value extracts the ordering value from the given DetectionMethod.
	Value    func(*DetectionMethod) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) detectionmethod.OrderOption
	toCursor func(*DetectionMethod) Cursor
}

// DetectionMethodOrder defines the ordering of DetectionMethod.
type DetectionMethodOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *DetectionMethodOrderField `json:"field"`
}

// DefaultDetectionMethodOrder is the default ordering of DetectionMethod.
var DefaultDetectionMethodOrder = &DetectionMethodOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &DetectionMethodOrderField{
		Value: func(dm *DetectionMethod) (ent.Value, error) {
			return dm.ID, nil
		},
		column: detectionmethod.FieldID,
		toTerm: detectionmethod.ByID,
		toCursor: func(dm *DetectionMethod) Cursor {
			return Cursor{ID: dm.ID}
		},
	},
}

// ToEdge converts DetectionMethod into DetectionMethodEdge.
func (dm *DetectionMethod) ToEdge(order *DetectionMethodOrder) *DetectionMethodEdge {
	if order == nil {
		order = DefaultDetectionMethodOrder
	}
	return &DetectionMethodEdge{
		Node:   dm,
		Cursor: order.Field.toCursor(dm),
	}
}

// ExploitEdge is the edge representation of Exploit.
type ExploitEdge struct {
	Node   *Exploit `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// ExploitConnection is the connection containing edges to Exploit.
type ExploitConnection struct {
	Edges      []*ExploitEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *ExploitConnection) build(nodes []*Exploit, pager *exploitPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Exploit
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Exploit {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Exploit {
			return nodes[i]
		}
	}
	c.Edges = make([]*ExploitEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ExploitEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ExploitPaginateOption enables pagination customization.
type ExploitPaginateOption func(*exploitPager) error

// WithExploitOrder configures pagination ordering.
func WithExploitOrder(order *ExploitOrder) ExploitPaginateOption {
	if order == nil {
		order = DefaultExploitOrder
	}
	o := *order
	return func(pager *exploitPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultExploitOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithExploitFilter configures pagination filter.
func WithExploitFilter(filter func(*ExploitQuery) (*ExploitQuery, error)) ExploitPaginateOption {
	return func(pager *exploitPager) error {
		if filter == nil {
			return errors.New("ExploitQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type exploitPager struct {
	reverse bool
	order   *ExploitOrder
	filter  func(*ExploitQuery) (*ExploitQuery, error)
}

func newExploitPager(opts []ExploitPaginateOption, reverse bool) (*exploitPager, error) {
	pager := &exploitPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultExploitOrder
	}
	return pager, nil
}

func (p *exploitPager) applyFilter(query *ExploitQuery) (*ExploitQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *exploitPager) toCursor(e *Exploit) Cursor {
	return p.order.Field.toCursor(e)
}

func (p *exploitPager) applyCursors(query *ExploitQuery, after, before *Cursor) (*ExploitQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultExploitOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *exploitPager) applyOrder(query *ExploitQuery) *ExploitQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultExploitOrder.Field {
		query = query.Order(DefaultExploitOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *exploitPager) orderExpr(query *ExploitQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultExploitOrder.Field {
			b.Comma().Ident(DefaultExploitOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Exploit.
func (e *ExploitQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ExploitPaginateOption,
) (*ExploitConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newExploitPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if e, err = pager.applyFilter(e); err != nil {
		return nil, err
	}
	conn := &ExploitConnection{Edges: []*ExploitEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := e.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if e, err = pager.applyCursors(e, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		e.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := e.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	e = pager.applyOrder(e)
	nodes, err := e.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// ExploitOrderField defines the ordering field of Exploit.
type ExploitOrderField struct {
	// Value extracts the ordering value from the given Exploit.
	Value    func(*Exploit) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) exploit.OrderOption
	toCursor func(*Exploit) Cursor
}

// ExploitOrder defines the ordering of Exploit.
type ExploitOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *ExploitOrderField `json:"field"`
}

// DefaultExploitOrder is the default ordering of Exploit.
var DefaultExploitOrder = &ExploitOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ExploitOrderField{
		Value: func(e *Exploit) (ent.Value, error) {
			return e.ID, nil
		},
		column: exploit.FieldID,
		toTerm: exploit.ByID,
		toCursor: func(e *Exploit) Cursor {
			return Cursor{ID: e.ID}
		},
	},
}

// ToEdge converts Exploit into ExploitEdge.
func (e *Exploit) ToEdge(order *ExploitOrder) *ExploitEdge {
	if order == nil {
		order = DefaultExploitOrder
	}
	return &ExploitEdge{
		Node:   e,
		Cursor: order.Field.toCursor(e),
	}
}

// HasMetadataEdge is the edge representation of HasMetadata.
type HasMetadataEdge struct {
	Node   *HasMetadata `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// HasMetadataConnection is the connection containing edges to HasMetadata.
type HasMetadataConnection struct {
	Edges      []*HasMetadataEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *HasMetadataConnection) build(nodes []*HasMetadata, pager *hasmetadataPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *HasMetadata
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *HasMetadata {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *HasMetadata {
			return nodes[i]
		}
	}
	c.Edges = make([]*HasMetadataEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &HasMetadataEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// HasMetadataPaginateOption enables pagination customization.
type HasMetadataPaginateOption func(*hasmetadataPager) error

// WithHasMetadataOrder configures pagination ordering.
func WithHasMetadataOrder(order *HasMetadataOrder) HasMetadataPaginateOption {
	if order == nil {
		order = DefaultHasMetadataOrder
	}
	o := *order
	return func(pager *hasmetadataPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultHasMetadataOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithHasMetadataFilter configures pagination filter.
func WithHasMetadataFilter(filter func(*HasMetadataQuery) (*HasMetadataQuery, error)) HasMetadataPaginateOption {
	return func(pager *hasmetadataPager) error {
		if filter == nil {
			return errors.New("HasMetadataQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type hasmetadataPager struct {
	reverse bool
	order   *HasMetadataOrder
	filter  func(*HasMetadataQuery) (*HasMetadataQuery, error)
}

func newHasMetadataPager(opts []HasMetadataPaginateOption, reverse bool) (*hasmetadataPager, error) {
	pager := &hasmetadataPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultHasMetadataOrder
	}
	return pager, nil
}

func (p *hasmetadataPager) applyFilter(query *HasMetadataQuery) (*HasMetadataQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *hasmetadataPager) toCursor(hm *HasMetadata) Cursor {
	return p.order.Field.toCursor(hm)
}

func (p *hasmetadataPager) applyCursors(query *HasMetadataQuery, after, before *Cursor) (*HasMetadataQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultHasMetadataOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *hasmetadataPager) applyOrder(query *HasMetadataQuery) *HasMetadataQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultHasMetadataOrder.Field {
		query = query.Order(DefaultHasMetadataOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *hasmetadataPager) orderExpr(query *HasMetadataQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultHasMetadataOrder.Field {
			b.Comma().Ident(DefaultHasMetadataOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to HasMetadata.
func (hm *HasMetadataQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...HasMetadataPaginateOption,
) (*HasMetadataConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newHasMetadataPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if hm, err = pager.applyFilter(hm); err != nil {
		return nil, err
	}
	conn := &HasMetadataConnection{Edges: []*HasMetadataEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := hm.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if hm, err = pager.applyCursors(hm, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		hm.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := hm.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	hm = pager.applyOrder(hm)
	nodes, err := hm.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// HasMetadataOrderField defines the ordering field of HasMetadata.
type HasMetadataOrderField struct {
	// Value extracts the ordering value from the given HasMetadata.
	Value    func(*HasMetadata) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) hasmetadata.OrderOption
	toCursor func(*HasMetadata) Cursor
}

// HasMetadataOrder defines the ordering of HasMetadata.
type HasMetadataOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *HasMetadataOrderField `json:"field"`
}

// DefaultHasMetadataOrder is the default ordering of HasMetadata.
var DefaultHasMetadataOrder = &HasMetadataOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &HasMetadataOrderField{
		Value: func(hm *HasMetadata) (ent.Value, error) {
			return hm.ID, nil
		},
		column: hasmetadata.FieldID,
		toTerm: hasmetadata.ByID,
		toCursor: func(hm *HasMetadata) Cursor {
			return Cursor{ID: hm.ID}
		},
	},
}

// ToEdge converts HasMetadata into HasMetadataEdge.
func (hm *HasMetadata) ToEdge(order *HasMetadataOrder) *HasMetadataEdge {
	if order == nil {
		order = DefaultHasMetadataOrder
	}
	return &HasMetadataEdge{
		Node:   hm,
		Cursor: order.Field.toCursor(hm),
	}
}

// HasSourceAtEdge is the edge representation of HasSourceAt.
type HasSourceAtEdge struct {
	Node   *HasSourceAt `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// HasSourceAtConnection is the connection containing edges to HasSourceAt.
type HasSourceAtConnection struct {
	Edges      []*HasSourceAtEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *HasSourceAtConnection) build(nodes []*HasSourceAt, pager *hassourceatPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *HasSourceAt
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *HasSourceAt {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *HasSourceAt {
			return nodes[i]
		}
	}
	c.Edges = make([]*HasSourceAtEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &HasSourceAtEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// HasSourceAtPaginateOption enables pagination customization.
type HasSourceAtPaginateOption func(*hassourceatPager) error

// WithHasSourceAtOrder configures pagination ordering.
func WithHasSourceAtOrder(order *HasSourceAtOrder) HasSourceAtPaginateOption {
	if order == nil {
		order = DefaultHasSourceAtOrder
	}
	o := *order
	return func(pager *hassourceatPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultHasSourceAtOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithHasSourceAtFilter configures pagination filter.
func WithHasSourceAtFilter(filter func(*HasSourceAtQuery) (*HasSourceAtQuery, error)) HasSourceAtPaginateOption {
	return func(pager *hassourceatPager) error {
		if filter == nil {
			return errors.New("HasSourceAtQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type hassourceatPager struct {
	reverse bool
	order   *HasSourceAtOrder
	filter  func(*HasSourceAtQuery) (*HasSourceAtQuery, error)
}

func newHasSourceAtPager(opts []HasSourceAtPaginateOption, reverse bool) (*hassourceatPager, error) {
	pager := &hassourceatPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultHasSourceAtOrder
	}
	return pager, nil
}

func (p *hassourceatPager) applyFilter(query *HasSourceAtQuery) (*HasSourceAtQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *hassourceatPager) toCursor(hsa *HasSourceAt) Cursor {
	return p.order.Field.toCursor(hsa)
}

func (p *hassourceatPager) applyCursors(query *HasSourceAtQuery, after, before *Cursor) (*HasSourceAtQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultHasSourceAtOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *hassourceatPager) applyOrder(query *HasSourceAtQuery) *HasSourceAtQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultHasSourceAtOrder.Field {
		query = query.Order(DefaultHasSourceAtOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *hassourceatPager) orderExpr(query *HasSourceAtQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultHasSourceAtOrder.Field {
			b.Comma().Ident(DefaultHasSourceAtOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to HasSourceAt.
func (hsa *HasSourceAtQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...HasSourceAtPaginateOption,
) (*HasSourceAtConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newHasSourceAtPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if hsa, err = pager.applyFilter(hsa); err != nil {
		return nil, err
	}
	conn := &HasSourceAtConnection{Edges: []*HasSourceAtEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := hsa.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if hsa, err = pager.applyCursors(hsa, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		hsa.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := hsa.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	hsa = pager.applyOrder(hsa)
	nodes, err := hsa.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// HasSourceAtOrderField defines the ordering field of HasSourceAt.
type HasSourceAtOrderField struct {
	// Value extracts the ordering value from the given HasSourceAt.
	Value    func(*HasSourceAt) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) hassourceat.OrderOption
	toCursor func(*HasSourceAt) Cursor
}

// HasSourceAtOrder defines the ordering of HasSourceAt.
type HasSourceAtOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *HasSourceAtOrderField `json:"field"`
}

// DefaultHasSourceAtOrder is the default ordering of HasSourceAt.
var DefaultHasSourceAtOrder = &HasSourceAtOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &HasSourceAtOrderField{
		Value: func(hsa *HasSourceAt) (ent.Value, error) {
			return hsa.ID, nil
		},
		column: hassourceat.FieldID,
		toTerm: hassourceat.ByID,
		toCursor: func(hsa *HasSourceAt) Cursor {
			return Cursor{ID: hsa.ID}
		},
	},
}

// ToEdge converts HasSourceAt into HasSourceAtEdge.
func (hsa *HasSourceAt) ToEdge(order *HasSourceAtOrder) *HasSourceAtEdge {
	if order == nil {
		order = DefaultHasSourceAtOrder
	}
	return &HasSourceAtEdge{
		Node:   hsa,
		Cursor: order.Field.toCursor(hsa),
	}
}

// HashEqualEdge is the edge representation of HashEqual.
type HashEqualEdge struct {
	Node   *HashEqual `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// HashEqualConnection is the connection containing edges to HashEqual.
type HashEqualConnection struct {
	Edges      []*HashEqualEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *HashEqualConnection) build(nodes []*HashEqual, pager *hashequalPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *HashEqual
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *HashEqual {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *HashEqual {
			return nodes[i]
		}
	}
	c.Edges = make([]*HashEqualEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &HashEqualEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// HashEqualPaginateOption enables pagination customization.
type HashEqualPaginateOption func(*hashequalPager) error

// WithHashEqualOrder configures pagination ordering.
func WithHashEqualOrder(order *HashEqualOrder) HashEqualPaginateOption {
	if order == nil {
		order = DefaultHashEqualOrder
	}
	o := *order
	return func(pager *hashequalPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultHashEqualOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithHashEqualFilter configures pagination filter.
func WithHashEqualFilter(filter func(*HashEqualQuery) (*HashEqualQuery, error)) HashEqualPaginateOption {
	return func(pager *hashequalPager) error {
		if filter == nil {
			return errors.New("HashEqualQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type hashequalPager struct {
	reverse bool
	order   *HashEqualOrder
	filter  func(*HashEqualQuery) (*HashEqualQuery, error)
}

func newHashEqualPager(opts []HashEqualPaginateOption, reverse bool) (*hashequalPager, error) {
	pager := &hashequalPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultHashEqualOrder
	}
	return pager, nil
}

func (p *hashequalPager) applyFilter(query *HashEqualQuery) (*HashEqualQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *hashequalPager) toCursor(he *HashEqual) Cursor {
	return p.order.Field.toCursor(he)
}

func (p *hashequalPager) applyCursors(query *HashEqualQuery, after, before *Cursor) (*HashEqualQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultHashEqualOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *hashequalPager) applyOrder(query *HashEqualQuery) *HashEqualQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultHashEqualOrder.Field {
		query = query.Order(DefaultHashEqualOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *hashequalPager) orderExpr(query *HashEqualQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultHashEqualOrder.Field {
			b.Comma().Ident(DefaultHashEqualOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to HashEqual.
func (he *HashEqualQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...HashEqualPaginateOption,
) (*HashEqualConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newHashEqualPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if he, err = pager.applyFilter(he); err != nil {
		return nil, err
	}
	conn := &HashEqualConnection{Edges: []*HashEqualEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := he.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if he, err = pager.applyCursors(he, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		he.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := he.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	he = pager.applyOrder(he)
	nodes, err := he.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// HashEqualOrderField defines the ordering field of HashEqual.
type HashEqualOrderField struct {
	// Value extracts the ordering value from the given HashEqual.
	Value    func(*HashEqual) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) hashequal.OrderOption
	toCursor func(*HashEqual) Cursor
}

// HashEqualOrder defines the ordering of HashEqual.
type HashEqualOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *HashEqualOrderField `json:"field"`
}

// DefaultHashEqualOrder is the default ordering of HashEqual.
var DefaultHashEqualOrder = &HashEqualOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &HashEqualOrderField{
		Value: func(he *HashEqual) (ent.Value, error) {
			return he.ID, nil
		},
		column: hashequal.FieldID,
		toTerm: hashequal.ByID,
		toCursor: func(he *HashEqual) Cursor {
			return Cursor{ID: he.ID}
		},
	},
}

// ToEdge converts HashEqual into HashEqualEdge.
func (he *HashEqual) ToEdge(order *HashEqualOrder) *HashEqualEdge {
	if order == nil {
		order = DefaultHashEqualOrder
	}
	return &HashEqualEdge{
		Node:   he,
		Cursor: order.Field.toCursor(he),
	}
}

// LicenseEdge is the edge representation of License.
type LicenseEdge struct {
	Node   *License `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// LicenseConnection is the connection containing edges to License.
type LicenseConnection struct {
	Edges      []*LicenseEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *LicenseConnection) build(nodes []*License, pager *licensePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *License
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *License {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *License {
			return nodes[i]
		}
	}
	c.Edges = make([]*LicenseEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &LicenseEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// LicensePaginateOption enables pagination customization.
type LicensePaginateOption func(*licensePager) error

// WithLicenseOrder configures pagination ordering.
func WithLicenseOrder(order *LicenseOrder) LicensePaginateOption {
	if order == nil {
		order = DefaultLicenseOrder
	}
	o := *order
	return func(pager *licensePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultLicenseOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithLicenseFilter configures pagination filter.
func WithLicenseFilter(filter func(*LicenseQuery) (*LicenseQuery, error)) LicensePaginateOption {
	return func(pager *licensePager) error {
		if filter == nil {
			return errors.New("LicenseQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type licensePager struct {
	reverse bool
	order   *LicenseOrder
	filter  func(*LicenseQuery) (*LicenseQuery, error)
}

func newLicensePager(opts []LicensePaginateOption, reverse bool) (*licensePager, error) {
	pager := &licensePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultLicenseOrder
	}
	return pager, nil
}

func (p *licensePager) applyFilter(query *LicenseQuery) (*LicenseQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *licensePager) toCursor(l *License) Cursor {
	return p.order.Field.toCursor(l)
}

func (p *licensePager) applyCursors(query *LicenseQuery, after, before *Cursor) (*LicenseQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultLicenseOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *licensePager) applyOrder(query *LicenseQuery) *LicenseQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultLicenseOrder.Field {
		query = query.Order(DefaultLicenseOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *licensePager) orderExpr(query *LicenseQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultLicenseOrder.Field {
			b.Comma().Ident(DefaultLicenseOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to License.
func (l *LicenseQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...LicensePaginateOption,
) (*LicenseConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newLicensePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if l, err = pager.applyFilter(l); err != nil {
		return nil, err
	}
	conn := &LicenseConnection{Edges: []*LicenseEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := l.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if l, err = pager.applyCursors(l, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		l.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := l.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	l = pager.applyOrder(l)
	nodes, err := l.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// LicenseOrderField defines the ordering field of License.
type LicenseOrderField struct {
	// Value extracts the ordering value from the given License.
	Value    func(*License) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) license.OrderOption
	toCursor func(*License) Cursor
}

// LicenseOrder defines the ordering of License.
type LicenseOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *LicenseOrderField `json:"field"`
}

// DefaultLicenseOrder is the default ordering of License.
var DefaultLicenseOrder = &LicenseOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &LicenseOrderField{
		Value: func(l *License) (ent.Value, error) {
			return l.ID, nil
		},
		column: license.FieldID,
		toTerm: license.ByID,
		toCursor: func(l *License) Cursor {
			return Cursor{ID: l.ID}
		},
	},
}

// ToEdge converts License into LicenseEdge.
func (l *License) ToEdge(order *LicenseOrder) *LicenseEdge {
	if order == nil {
		order = DefaultLicenseOrder
	}
	return &LicenseEdge{
		Node:   l,
		Cursor: order.Field.toCursor(l),
	}
}

// OccurrenceEdge is the edge representation of Occurrence.
type OccurrenceEdge struct {
	Node   *Occurrence `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// OccurrenceConnection is the connection containing edges to Occurrence.
type OccurrenceConnection struct {
	Edges      []*OccurrenceEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *OccurrenceConnection) build(nodes []*Occurrence, pager *occurrencePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Occurrence
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Occurrence {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Occurrence {
			return nodes[i]
		}
	}
	c.Edges = make([]*OccurrenceEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &OccurrenceEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// OccurrencePaginateOption enables pagination customization.
type OccurrencePaginateOption func(*occurrencePager) error

// WithOccurrenceOrder configures pagination ordering.
func WithOccurrenceOrder(order *OccurrenceOrder) OccurrencePaginateOption {
	if order == nil {
		order = DefaultOccurrenceOrder
	}
	o := *order
	return func(pager *occurrencePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOccurrenceOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOccurrenceFilter configures pagination filter.
func WithOccurrenceFilter(filter func(*OccurrenceQuery) (*OccurrenceQuery, error)) OccurrencePaginateOption {
	return func(pager *occurrencePager) error {
		if filter == nil {
			return errors.New("OccurrenceQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type occurrencePager struct {
	reverse bool
	order   *OccurrenceOrder
	filter  func(*OccurrenceQuery) (*OccurrenceQuery, error)
}

func newOccurrencePager(opts []OccurrencePaginateOption, reverse bool) (*occurrencePager, error) {
	pager := &occurrencePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOccurrenceOrder
	}
	return pager, nil
}

func (p *occurrencePager) applyFilter(query *OccurrenceQuery) (*OccurrenceQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *occurrencePager) toCursor(o *Occurrence) Cursor {
	return p.order.Field.toCursor(o)
}

func (p *occurrencePager) applyCursors(query *OccurrenceQuery, after, before *Cursor) (*OccurrenceQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultOccurrenceOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *occurrencePager) applyOrder(query *OccurrenceQuery) *OccurrenceQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultOccurrenceOrder.Field {
		query = query.Order(DefaultOccurrenceOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *occurrencePager) orderExpr(query *OccurrenceQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultOccurrenceOrder.Field {
			b.Comma().Ident(DefaultOccurrenceOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Occurrence.
func (o *OccurrenceQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OccurrencePaginateOption,
) (*OccurrenceConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOccurrencePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if o, err = pager.applyFilter(o); err != nil {
		return nil, err
	}
	conn := &OccurrenceConnection{Edges: []*OccurrenceEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := o.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if o, err = pager.applyCursors(o, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		o.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := o.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	o = pager.applyOrder(o)
	nodes, err := o.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// OccurrenceOrderField defines the ordering field of Occurrence.
type OccurrenceOrderField struct {
	// Value extracts the ordering value from the given Occurrence.
	Value    func(*Occurrence) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) occurrence.OrderOption
	toCursor func(*Occurrence) Cursor
}

// OccurrenceOrder defines the ordering of Occurrence.
type OccurrenceOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *OccurrenceOrderField `json:"field"`
}

// DefaultOccurrenceOrder is the default ordering of Occurrence.
var DefaultOccurrenceOrder = &OccurrenceOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &OccurrenceOrderField{
		Value: func(o *Occurrence) (ent.Value, error) {
			return o.ID, nil
		},
		column: occurrence.FieldID,
		toTerm: occurrence.ByID,
		toCursor: func(o *Occurrence) Cursor {
			return Cursor{ID: o.ID}
		},
	},
}

// ToEdge converts Occurrence into OccurrenceEdge.
func (o *Occurrence) ToEdge(order *OccurrenceOrder) *OccurrenceEdge {
	if order == nil {
		order = DefaultOccurrenceOrder
	}
	return &OccurrenceEdge{
		Node:   o,
		Cursor: order.Field.toCursor(o),
	}
}

// PackageNameEdge is the edge representation of PackageName.
type PackageNameEdge struct {
	Node   *PackageName `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// PackageNameConnection is the connection containing edges to PackageName.
type PackageNameConnection struct {
	Edges      []*PackageNameEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *PackageNameConnection) build(nodes []*PackageName, pager *packagenamePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *PackageName
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *PackageName {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *PackageName {
			return nodes[i]
		}
	}
	c.Edges = make([]*PackageNameEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PackageNameEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PackageNamePaginateOption enables pagination customization.
type PackageNamePaginateOption func(*packagenamePager) error

// WithPackageNameOrder configures pagination ordering.
func WithPackageNameOrder(order *PackageNameOrder) PackageNamePaginateOption {
	if order == nil {
		order = DefaultPackageNameOrder
	}
	o := *order
	return func(pager *packagenamePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPackageNameOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPackageNameFilter configures pagination filter.
func WithPackageNameFilter(filter func(*PackageNameQuery) (*PackageNameQuery, error)) PackageNamePaginateOption {
	return func(pager *packagenamePager) error {
		if filter == nil {
			return errors.New("PackageNameQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type packagenamePager struct {
	reverse bool
	order   *PackageNameOrder
	filter  func(*PackageNameQuery) (*PackageNameQuery, error)
}

func newPackageNamePager(opts []PackageNamePaginateOption, reverse bool) (*packagenamePager, error) {
	pager := &packagenamePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPackageNameOrder
	}
	return pager, nil
}

func (p *packagenamePager) applyFilter(query *PackageNameQuery) (*PackageNameQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *packagenamePager) toCursor(pn *PackageName) Cursor {
	return p.order.Field.toCursor(pn)
}

func (p *packagenamePager) applyCursors(query *PackageNameQuery, after, before *Cursor) (*PackageNameQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPackageNameOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *packagenamePager) applyOrder(query *PackageNameQuery) *PackageNameQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPackageNameOrder.Field {
		query = query.Order(DefaultPackageNameOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *packagenamePager) orderExpr(query *PackageNameQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPackageNameOrder.Field {
			b.Comma().Ident(DefaultPackageNameOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to PackageName.
func (pn *PackageNameQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PackageNamePaginateOption,
) (*PackageNameConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPackageNamePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pn, err = pager.applyFilter(pn); err != nil {
		return nil, err
	}
	conn := &PackageNameConnection{Edges: []*PackageNameEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := pn.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pn, err = pager.applyCursors(pn, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		pn.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pn.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pn = pager.applyOrder(pn)
	nodes, err := pn.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// PackageNameOrderField defines the ordering field of PackageName.
type PackageNameOrderField struct {
	// Value extracts the ordering value from the given PackageName.
	Value    func(*PackageName) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) packagename.OrderOption
	toCursor func(*PackageName) Cursor
}

// PackageNameOrder defines the ordering of PackageName.
type PackageNameOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *PackageNameOrderField `json:"field"`
}

// DefaultPackageNameOrder is the default ordering of PackageName.
var DefaultPackageNameOrder = &PackageNameOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PackageNameOrderField{
		Value: func(pn *PackageName) (ent.Value, error) {
			return pn.ID, nil
		},
		column: packagename.FieldID,
		toTerm: packagename.ByID,
		toCursor: func(pn *PackageName) Cursor {
			return Cursor{ID: pn.ID}
		},
	},
}

// ToEdge converts PackageName into PackageNameEdge.
func (pn *PackageName) ToEdge(order *PackageNameOrder) *PackageNameEdge {
	if order == nil {
		order = DefaultPackageNameOrder
	}
	return &PackageNameEdge{
		Node:   pn,
		Cursor: order.Field.toCursor(pn),
	}
}

// PackageVersionEdge is the edge representation of PackageVersion.
type PackageVersionEdge struct {
	Node   *PackageVersion `json:"node"`
	Cursor Cursor          `json:"cursor"`
}

// PackageVersionConnection is the connection containing edges to PackageVersion.
type PackageVersionConnection struct {
	Edges      []*PackageVersionEdge `json:"edges"`
	PageInfo   PageInfo              `json:"pageInfo"`
	TotalCount int                   `json:"totalCount"`
}

func (c *PackageVersionConnection) build(nodes []*PackageVersion, pager *packageversionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *PackageVersion
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *PackageVersion {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *PackageVersion {
			return nodes[i]
		}
	}
	c.Edges = make([]*PackageVersionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PackageVersionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PackageVersionPaginateOption enables pagination customization.
type PackageVersionPaginateOption func(*packageversionPager) error

// WithPackageVersionOrder configures pagination ordering.
func WithPackageVersionOrder(order *PackageVersionOrder) PackageVersionPaginateOption {
	if order == nil {
		order = DefaultPackageVersionOrder
	}
	o := *order
	return func(pager *packageversionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPackageVersionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPackageVersionFilter configures pagination filter.
func WithPackageVersionFilter(filter func(*PackageVersionQuery) (*PackageVersionQuery, error)) PackageVersionPaginateOption {
	return func(pager *packageversionPager) error {
		if filter == nil {
			return errors.New("PackageVersionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type packageversionPager struct {
	reverse bool
	order   *PackageVersionOrder
	filter  func(*PackageVersionQuery) (*PackageVersionQuery, error)
}

func newPackageVersionPager(opts []PackageVersionPaginateOption, reverse bool) (*packageversionPager, error) {
	pager := &packageversionPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPackageVersionOrder
	}
	return pager, nil
}

func (p *packageversionPager) applyFilter(query *PackageVersionQuery) (*PackageVersionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *packageversionPager) toCursor(pv *PackageVersion) Cursor {
	return p.order.Field.toCursor(pv)
}

func (p *packageversionPager) applyCursors(query *PackageVersionQuery, after, before *Cursor) (*PackageVersionQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPackageVersionOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *packageversionPager) applyOrder(query *PackageVersionQuery) *PackageVersionQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPackageVersionOrder.Field {
		query = query.Order(DefaultPackageVersionOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *packageversionPager) orderExpr(query *PackageVersionQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPackageVersionOrder.Field {
			b.Comma().Ident(DefaultPackageVersionOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to PackageVersion.
func (pv *PackageVersionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PackageVersionPaginateOption,
) (*PackageVersionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPackageVersionPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pv, err = pager.applyFilter(pv); err != nil {
		return nil, err
	}
	conn := &PackageVersionConnection{Edges: []*PackageVersionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := pv.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pv, err = pager.applyCursors(pv, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		pv.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pv.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pv = pager.applyOrder(pv)
	nodes, err := pv.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// PackageVersionOrderField defines the ordering field of PackageVersion.
type PackageVersionOrderField struct {
	// Value extracts the ordering value from the given PackageVersion.
	Value    func(*PackageVersion) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) packageversion.OrderOption
	toCursor func(*PackageVersion) Cursor
}

// PackageVersionOrder defines the ordering of PackageVersion.
type PackageVersionOrder struct {
	Direction OrderDirection            `json:"direction"`
	Field     *PackageVersionOrderField `json:"field"`
}

// DefaultPackageVersionOrder is the default ordering of PackageVersion.
var DefaultPackageVersionOrder = &PackageVersionOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PackageVersionOrderField{
		Value: func(pv *PackageVersion) (ent.Value, error) {
			return pv.ID, nil
		},
		column: packageversion.FieldID,
		toTerm: packageversion.ByID,
		toCursor: func(pv *PackageVersion) Cursor {
			return Cursor{ID: pv.ID}
		},
	},
}

// ToEdge converts PackageVersion into PackageVersionEdge.
func (pv *PackageVersion) ToEdge(order *PackageVersionOrder) *PackageVersionEdge {
	if order == nil {
		order = DefaultPackageVersionOrder
	}
	return &PackageVersionEdge{
		Node:   pv,
		Cursor: order.Field.toCursor(pv),
	}
}

// PkgEqualEdge is the edge representation of PkgEqual.
type PkgEqualEdge struct {
	Node   *PkgEqual `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// PkgEqualConnection is the connection containing edges to PkgEqual.
type PkgEqualConnection struct {
	Edges      []*PkgEqualEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *PkgEqualConnection) build(nodes []*PkgEqual, pager *pkgequalPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *PkgEqual
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *PkgEqual {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *PkgEqual {
			return nodes[i]
		}
	}
	c.Edges = make([]*PkgEqualEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PkgEqualEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PkgEqualPaginateOption enables pagination customization.
type PkgEqualPaginateOption func(*pkgequalPager) error

// WithPkgEqualOrder configures pagination ordering.
func WithPkgEqualOrder(order *PkgEqualOrder) PkgEqualPaginateOption {
	if order == nil {
		order = DefaultPkgEqualOrder
	}
	o := *order
	return func(pager *pkgequalPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPkgEqualOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPkgEqualFilter configures pagination filter.
func WithPkgEqualFilter(filter func(*PkgEqualQuery) (*PkgEqualQuery, error)) PkgEqualPaginateOption {
	return func(pager *pkgequalPager) error {
		if filter == nil {
			return errors.New("PkgEqualQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type pkgequalPager struct {
	reverse bool
	order   *PkgEqualOrder
	filter  func(*PkgEqualQuery) (*PkgEqualQuery, error)
}

func newPkgEqualPager(opts []PkgEqualPaginateOption, reverse bool) (*pkgequalPager, error) {
	pager := &pkgequalPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPkgEqualOrder
	}
	return pager, nil
}

func (p *pkgequalPager) applyFilter(query *PkgEqualQuery) (*PkgEqualQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *pkgequalPager) toCursor(pe *PkgEqual) Cursor {
	return p.order.Field.toCursor(pe)
}

func (p *pkgequalPager) applyCursors(query *PkgEqualQuery, after, before *Cursor) (*PkgEqualQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPkgEqualOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *pkgequalPager) applyOrder(query *PkgEqualQuery) *PkgEqualQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPkgEqualOrder.Field {
		query = query.Order(DefaultPkgEqualOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *pkgequalPager) orderExpr(query *PkgEqualQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPkgEqualOrder.Field {
			b.Comma().Ident(DefaultPkgEqualOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to PkgEqual.
func (pe *PkgEqualQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PkgEqualPaginateOption,
) (*PkgEqualConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPkgEqualPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pe, err = pager.applyFilter(pe); err != nil {
		return nil, err
	}
	conn := &PkgEqualConnection{Edges: []*PkgEqualEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := pe.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pe, err = pager.applyCursors(pe, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		pe.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pe.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pe = pager.applyOrder(pe)
	nodes, err := pe.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// PkgEqualOrderField defines the ordering field of PkgEqual.
type PkgEqualOrderField struct {
	// Value extracts the ordering value from the given PkgEqual.
	Value    func(*PkgEqual) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) pkgequal.OrderOption
	toCursor func(*PkgEqual) Cursor
}

// PkgEqualOrder defines the ordering of PkgEqual.
type PkgEqualOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *PkgEqualOrderField `json:"field"`
}

// DefaultPkgEqualOrder is the default ordering of PkgEqual.
var DefaultPkgEqualOrder = &PkgEqualOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PkgEqualOrderField{
		Value: func(pe *PkgEqual) (ent.Value, error) {
			return pe.ID, nil
		},
		column: pkgequal.FieldID,
		toTerm: pkgequal.ByID,
		toCursor: func(pe *PkgEqual) Cursor {
			return Cursor{ID: pe.ID}
		},
	},
}

// ToEdge converts PkgEqual into PkgEqualEdge.
func (pe *PkgEqual) ToEdge(order *PkgEqualOrder) *PkgEqualEdge {
	if order == nil {
		order = DefaultPkgEqualOrder
	}
	return &PkgEqualEdge{
		Node:   pe,
		Cursor: order.Field.toCursor(pe),
	}
}

// PointOfContactEdge is the edge representation of PointOfContact.
type PointOfContactEdge struct {
	Node   *PointOfContact `json:"node"`
	Cursor Cursor          `json:"cursor"`
}

// PointOfContactConnection is the connection containing edges to PointOfContact.
type PointOfContactConnection struct {
	Edges      []*PointOfContactEdge `json:"edges"`
	PageInfo   PageInfo              `json:"pageInfo"`
	TotalCount int                   `json:"totalCount"`
}

func (c *PointOfContactConnection) build(nodes []*PointOfContact, pager *pointofcontactPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *PointOfContact
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *PointOfContact {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *PointOfContact {
			return nodes[i]
		}
	}
	c.Edges = make([]*PointOfContactEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PointOfContactEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PointOfContactPaginateOption enables pagination customization.
type PointOfContactPaginateOption func(*pointofcontactPager) error

// WithPointOfContactOrder configures pagination ordering.
func WithPointOfContactOrder(order *PointOfContactOrder) PointOfContactPaginateOption {
	if order == nil {
		order = DefaultPointOfContactOrder
	}
	o := *order
	return func(pager *pointofcontactPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPointOfContactOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPointOfContactFilter configures pagination filter.
func WithPointOfContactFilter(filter func(*PointOfContactQuery) (*PointOfContactQuery, error)) PointOfContactPaginateOption {
	return func(pager *pointofcontactPager) error {
		if filter == nil {
			return errors.New("PointOfContactQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type pointofcontactPager struct {
	reverse bool
	order   *PointOfContactOrder
	filter  func(*PointOfContactQuery) (*PointOfContactQuery, error)
}

func newPointOfContactPager(opts []PointOfContactPaginateOption, reverse bool) (*pointofcontactPager, error) {
	pager := &pointofcontactPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPointOfContactOrder
	}
	return pager, nil
}

func (p *pointofcontactPager) applyFilter(query *PointOfContactQuery) (*PointOfContactQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *pointofcontactPager) toCursor(poc *PointOfContact) Cursor {
	return p.order.Field.toCursor(poc)
}

func (p *pointofcontactPager) applyCursors(query *PointOfContactQuery, after, before *Cursor) (*PointOfContactQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPointOfContactOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *pointofcontactPager) applyOrder(query *PointOfContactQuery) *PointOfContactQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPointOfContactOrder.Field {
		query = query.Order(DefaultPointOfContactOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *pointofcontactPager) orderExpr(query *PointOfContactQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPointOfContactOrder.Field {
			b.Comma().Ident(DefaultPointOfContactOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to PointOfContact.
func (poc *PointOfContactQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PointOfContactPaginateOption,
) (*PointOfContactConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPointOfContactPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if poc, err = pager.applyFilter(poc); err != nil {
		return nil, err
	}
	conn := &PointOfContactConnection{Edges: []*PointOfContactEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := poc.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if poc, err = pager.applyCursors(poc, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		poc.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := poc.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	poc = pager.applyOrder(poc)
	nodes, err := poc.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// PointOfContactOrderField defines the ordering field of PointOfContact.
type PointOfContactOrderField struct {
	// Value extracts the ordering value from the given PointOfContact.
	Value    func(*PointOfContact) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) pointofcontact.OrderOption
	toCursor func(*PointOfContact) Cursor
}

// PointOfContactOrder defines the ordering of PointOfContact.
type PointOfContactOrder struct {
	Direction OrderDirection            `json:"direction"`
	Field     *PointOfContactOrderField `json:"field"`
}

// DefaultPointOfContactOrder is the default ordering of PointOfContact.
var DefaultPointOfContactOrder = &PointOfContactOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PointOfContactOrderField{
		Value: func(poc *PointOfContact) (ent.Value, error) {
			return poc.ID, nil
		},
		column: pointofcontact.FieldID,
		toTerm: pointofcontact.ByID,
		toCursor: func(poc *PointOfContact) Cursor {
			return Cursor{ID: poc.ID}
		},
	},
}

// ToEdge converts PointOfContact into PointOfContactEdge.
func (poc *PointOfContact) ToEdge(order *PointOfContactOrder) *PointOfContactEdge {
	if order == nil {
		order = DefaultPointOfContactOrder
	}
	return &PointOfContactEdge{
		Node:   poc,
		Cursor: order.Field.toCursor(poc),
	}
}

// PotentialMitigationEdge is the edge representation of PotentialMitigation.
type PotentialMitigationEdge struct {
	Node   *PotentialMitigation `json:"node"`
	Cursor Cursor               `json:"cursor"`
}

// PotentialMitigationConnection is the connection containing edges to PotentialMitigation.
type PotentialMitigationConnection struct {
	Edges      []*PotentialMitigationEdge `json:"edges"`
	PageInfo   PageInfo                   `json:"pageInfo"`
	TotalCount int                        `json:"totalCount"`
}

func (c *PotentialMitigationConnection) build(nodes []*PotentialMitigation, pager *potentialmitigationPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *PotentialMitigation
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *PotentialMitigation {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *PotentialMitigation {
			return nodes[i]
		}
	}
	c.Edges = make([]*PotentialMitigationEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PotentialMitigationEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PotentialMitigationPaginateOption enables pagination customization.
type PotentialMitigationPaginateOption func(*potentialmitigationPager) error

// WithPotentialMitigationOrder configures pagination ordering.
func WithPotentialMitigationOrder(order *PotentialMitigationOrder) PotentialMitigationPaginateOption {
	if order == nil {
		order = DefaultPotentialMitigationOrder
	}
	o := *order
	return func(pager *potentialmitigationPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPotentialMitigationOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPotentialMitigationFilter configures pagination filter.
func WithPotentialMitigationFilter(filter func(*PotentialMitigationQuery) (*PotentialMitigationQuery, error)) PotentialMitigationPaginateOption {
	return func(pager *potentialmitigationPager) error {
		if filter == nil {
			return errors.New("PotentialMitigationQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type potentialmitigationPager struct {
	reverse bool
	order   *PotentialMitigationOrder
	filter  func(*PotentialMitigationQuery) (*PotentialMitigationQuery, error)
}

func newPotentialMitigationPager(opts []PotentialMitigationPaginateOption, reverse bool) (*potentialmitigationPager, error) {
	pager := &potentialmitigationPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPotentialMitigationOrder
	}
	return pager, nil
}

func (p *potentialmitigationPager) applyFilter(query *PotentialMitigationQuery) (*PotentialMitigationQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *potentialmitigationPager) toCursor(pm *PotentialMitigation) Cursor {
	return p.order.Field.toCursor(pm)
}

func (p *potentialmitigationPager) applyCursors(query *PotentialMitigationQuery, after, before *Cursor) (*PotentialMitigationQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPotentialMitigationOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *potentialmitigationPager) applyOrder(query *PotentialMitigationQuery) *PotentialMitigationQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPotentialMitigationOrder.Field {
		query = query.Order(DefaultPotentialMitigationOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *potentialmitigationPager) orderExpr(query *PotentialMitigationQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPotentialMitigationOrder.Field {
			b.Comma().Ident(DefaultPotentialMitigationOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to PotentialMitigation.
func (pm *PotentialMitigationQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PotentialMitigationPaginateOption,
) (*PotentialMitigationConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPotentialMitigationPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pm, err = pager.applyFilter(pm); err != nil {
		return nil, err
	}
	conn := &PotentialMitigationConnection{Edges: []*PotentialMitigationEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := pm.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pm, err = pager.applyCursors(pm, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		pm.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pm.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pm = pager.applyOrder(pm)
	nodes, err := pm.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// PotentialMitigationOrderField defines the ordering field of PotentialMitigation.
type PotentialMitigationOrderField struct {
	// Value extracts the ordering value from the given PotentialMitigation.
	Value    func(*PotentialMitigation) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) potentialmitigation.OrderOption
	toCursor func(*PotentialMitigation) Cursor
}

// PotentialMitigationOrder defines the ordering of PotentialMitigation.
type PotentialMitigationOrder struct {
	Direction OrderDirection                 `json:"direction"`
	Field     *PotentialMitigationOrderField `json:"field"`
}

// DefaultPotentialMitigationOrder is the default ordering of PotentialMitigation.
var DefaultPotentialMitigationOrder = &PotentialMitigationOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PotentialMitigationOrderField{
		Value: func(pm *PotentialMitigation) (ent.Value, error) {
			return pm.ID, nil
		},
		column: potentialmitigation.FieldID,
		toTerm: potentialmitigation.ByID,
		toCursor: func(pm *PotentialMitigation) Cursor {
			return Cursor{ID: pm.ID}
		},
	},
}

// ToEdge converts PotentialMitigation into PotentialMitigationEdge.
func (pm *PotentialMitigation) ToEdge(order *PotentialMitigationOrder) *PotentialMitigationEdge {
	if order == nil {
		order = DefaultPotentialMitigationOrder
	}
	return &PotentialMitigationEdge{
		Node:   pm,
		Cursor: order.Field.toCursor(pm),
	}
}

// ReachableCodeEdge is the edge representation of ReachableCode.
type ReachableCodeEdge struct {
	Node   *ReachableCode `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

// ReachableCodeConnection is the connection containing edges to ReachableCode.
type ReachableCodeConnection struct {
	Edges      []*ReachableCodeEdge `json:"edges"`
	PageInfo   PageInfo             `json:"pageInfo"`
	TotalCount int                  `json:"totalCount"`
}

func (c *ReachableCodeConnection) build(nodes []*ReachableCode, pager *reachablecodePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ReachableCode
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ReachableCode {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ReachableCode {
			return nodes[i]
		}
	}
	c.Edges = make([]*ReachableCodeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ReachableCodeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ReachableCodePaginateOption enables pagination customization.
type ReachableCodePaginateOption func(*reachablecodePager) error

// WithReachableCodeOrder configures pagination ordering.
func WithReachableCodeOrder(order *ReachableCodeOrder) ReachableCodePaginateOption {
	if order == nil {
		order = DefaultReachableCodeOrder
	}
	o := *order
	return func(pager *reachablecodePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultReachableCodeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithReachableCodeFilter configures pagination filter.
func WithReachableCodeFilter(filter func(*ReachableCodeQuery) (*ReachableCodeQuery, error)) ReachableCodePaginateOption {
	return func(pager *reachablecodePager) error {
		if filter == nil {
			return errors.New("ReachableCodeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type reachablecodePager struct {
	reverse bool
	order   *ReachableCodeOrder
	filter  func(*ReachableCodeQuery) (*ReachableCodeQuery, error)
}

func newReachableCodePager(opts []ReachableCodePaginateOption, reverse bool) (*reachablecodePager, error) {
	pager := &reachablecodePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultReachableCodeOrder
	}
	return pager, nil
}

func (p *reachablecodePager) applyFilter(query *ReachableCodeQuery) (*ReachableCodeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *reachablecodePager) toCursor(rc *ReachableCode) Cursor {
	return p.order.Field.toCursor(rc)
}

func (p *reachablecodePager) applyCursors(query *ReachableCodeQuery, after, before *Cursor) (*ReachableCodeQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultReachableCodeOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *reachablecodePager) applyOrder(query *ReachableCodeQuery) *ReachableCodeQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultReachableCodeOrder.Field {
		query = query.Order(DefaultReachableCodeOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *reachablecodePager) orderExpr(query *ReachableCodeQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultReachableCodeOrder.Field {
			b.Comma().Ident(DefaultReachableCodeOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ReachableCode.
func (rc *ReachableCodeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ReachableCodePaginateOption,
) (*ReachableCodeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newReachableCodePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if rc, err = pager.applyFilter(rc); err != nil {
		return nil, err
	}
	conn := &ReachableCodeConnection{Edges: []*ReachableCodeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := rc.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if rc, err = pager.applyCursors(rc, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		rc.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := rc.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	rc = pager.applyOrder(rc)
	nodes, err := rc.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// ReachableCodeOrderField defines the ordering field of ReachableCode.
type ReachableCodeOrderField struct {
	// Value extracts the ordering value from the given ReachableCode.
	Value    func(*ReachableCode) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) reachablecode.OrderOption
	toCursor func(*ReachableCode) Cursor
}

// ReachableCodeOrder defines the ordering of ReachableCode.
type ReachableCodeOrder struct {
	Direction OrderDirection           `json:"direction"`
	Field     *ReachableCodeOrderField `json:"field"`
}

// DefaultReachableCodeOrder is the default ordering of ReachableCode.
var DefaultReachableCodeOrder = &ReachableCodeOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ReachableCodeOrderField{
		Value: func(rc *ReachableCode) (ent.Value, error) {
			return rc.ID, nil
		},
		column: reachablecode.FieldID,
		toTerm: reachablecode.ByID,
		toCursor: func(rc *ReachableCode) Cursor {
			return Cursor{ID: rc.ID}
		},
	},
}

// ToEdge converts ReachableCode into ReachableCodeEdge.
func (rc *ReachableCode) ToEdge(order *ReachableCodeOrder) *ReachableCodeEdge {
	if order == nil {
		order = DefaultReachableCodeOrder
	}
	return &ReachableCodeEdge{
		Node:   rc,
		Cursor: order.Field.toCursor(rc),
	}
}

// ReachableCodeArtifactEdge is the edge representation of ReachableCodeArtifact.
type ReachableCodeArtifactEdge struct {
	Node   *ReachableCodeArtifact `json:"node"`
	Cursor Cursor                 `json:"cursor"`
}

// ReachableCodeArtifactConnection is the connection containing edges to ReachableCodeArtifact.
type ReachableCodeArtifactConnection struct {
	Edges      []*ReachableCodeArtifactEdge `json:"edges"`
	PageInfo   PageInfo                     `json:"pageInfo"`
	TotalCount int                          `json:"totalCount"`
}

func (c *ReachableCodeArtifactConnection) build(nodes []*ReachableCodeArtifact, pager *reachablecodeartifactPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ReachableCodeArtifact
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ReachableCodeArtifact {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ReachableCodeArtifact {
			return nodes[i]
		}
	}
	c.Edges = make([]*ReachableCodeArtifactEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ReachableCodeArtifactEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ReachableCodeArtifactPaginateOption enables pagination customization.
type ReachableCodeArtifactPaginateOption func(*reachablecodeartifactPager) error

// WithReachableCodeArtifactOrder configures pagination ordering.
func WithReachableCodeArtifactOrder(order *ReachableCodeArtifactOrder) ReachableCodeArtifactPaginateOption {
	if order == nil {
		order = DefaultReachableCodeArtifactOrder
	}
	o := *order
	return func(pager *reachablecodeartifactPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultReachableCodeArtifactOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithReachableCodeArtifactFilter configures pagination filter.
func WithReachableCodeArtifactFilter(filter func(*ReachableCodeArtifactQuery) (*ReachableCodeArtifactQuery, error)) ReachableCodeArtifactPaginateOption {
	return func(pager *reachablecodeartifactPager) error {
		if filter == nil {
			return errors.New("ReachableCodeArtifactQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type reachablecodeartifactPager struct {
	reverse bool
	order   *ReachableCodeArtifactOrder
	filter  func(*ReachableCodeArtifactQuery) (*ReachableCodeArtifactQuery, error)
}

func newReachableCodeArtifactPager(opts []ReachableCodeArtifactPaginateOption, reverse bool) (*reachablecodeartifactPager, error) {
	pager := &reachablecodeartifactPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultReachableCodeArtifactOrder
	}
	return pager, nil
}

func (p *reachablecodeartifactPager) applyFilter(query *ReachableCodeArtifactQuery) (*ReachableCodeArtifactQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *reachablecodeartifactPager) toCursor(rca *ReachableCodeArtifact) Cursor {
	return p.order.Field.toCursor(rca)
}

func (p *reachablecodeartifactPager) applyCursors(query *ReachableCodeArtifactQuery, after, before *Cursor) (*ReachableCodeArtifactQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultReachableCodeArtifactOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *reachablecodeartifactPager) applyOrder(query *ReachableCodeArtifactQuery) *ReachableCodeArtifactQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultReachableCodeArtifactOrder.Field {
		query = query.Order(DefaultReachableCodeArtifactOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *reachablecodeartifactPager) orderExpr(query *ReachableCodeArtifactQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultReachableCodeArtifactOrder.Field {
			b.Comma().Ident(DefaultReachableCodeArtifactOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ReachableCodeArtifact.
func (rca *ReachableCodeArtifactQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ReachableCodeArtifactPaginateOption,
) (*ReachableCodeArtifactConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newReachableCodeArtifactPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if rca, err = pager.applyFilter(rca); err != nil {
		return nil, err
	}
	conn := &ReachableCodeArtifactConnection{Edges: []*ReachableCodeArtifactEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := rca.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if rca, err = pager.applyCursors(rca, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		rca.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := rca.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	rca = pager.applyOrder(rca)
	nodes, err := rca.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// ReachableCodeArtifactOrderField defines the ordering field of ReachableCodeArtifact.
type ReachableCodeArtifactOrderField struct {
	// Value extracts the ordering value from the given ReachableCodeArtifact.
	Value    func(*ReachableCodeArtifact) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) reachablecodeartifact.OrderOption
	toCursor func(*ReachableCodeArtifact) Cursor
}

// ReachableCodeArtifactOrder defines the ordering of ReachableCodeArtifact.
type ReachableCodeArtifactOrder struct {
	Direction OrderDirection                   `json:"direction"`
	Field     *ReachableCodeArtifactOrderField `json:"field"`
}

// DefaultReachableCodeArtifactOrder is the default ordering of ReachableCodeArtifact.
var DefaultReachableCodeArtifactOrder = &ReachableCodeArtifactOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ReachableCodeArtifactOrderField{
		Value: func(rca *ReachableCodeArtifact) (ent.Value, error) {
			return rca.ID, nil
		},
		column: reachablecodeartifact.FieldID,
		toTerm: reachablecodeartifact.ByID,
		toCursor: func(rca *ReachableCodeArtifact) Cursor {
			return Cursor{ID: rca.ID}
		},
	},
}

// ToEdge converts ReachableCodeArtifact into ReachableCodeArtifactEdge.
func (rca *ReachableCodeArtifact) ToEdge(order *ReachableCodeArtifactOrder) *ReachableCodeArtifactEdge {
	if order == nil {
		order = DefaultReachableCodeArtifactOrder
	}
	return &ReachableCodeArtifactEdge{
		Node:   rca,
		Cursor: order.Field.toCursor(rca),
	}
}

// SLSAAttestationEdge is the edge representation of SLSAAttestation.
type SLSAAttestationEdge struct {
	Node   *SLSAAttestation `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// SLSAAttestationConnection is the connection containing edges to SLSAAttestation.
type SLSAAttestationConnection struct {
	Edges      []*SLSAAttestationEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

func (c *SLSAAttestationConnection) build(nodes []*SLSAAttestation, pager *slsaattestationPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *SLSAAttestation
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *SLSAAttestation {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *SLSAAttestation {
			return nodes[i]
		}
	}
	c.Edges = make([]*SLSAAttestationEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &SLSAAttestationEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// SLSAAttestationPaginateOption enables pagination customization.
type SLSAAttestationPaginateOption func(*slsaattestationPager) error

// WithSLSAAttestationOrder configures pagination ordering.
func WithSLSAAttestationOrder(order *SLSAAttestationOrder) SLSAAttestationPaginateOption {
	if order == nil {
		order = DefaultSLSAAttestationOrder
	}
	o := *order
	return func(pager *slsaattestationPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSLSAAttestationOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSLSAAttestationFilter configures pagination filter.
func WithSLSAAttestationFilter(filter func(*SLSAAttestationQuery) (*SLSAAttestationQuery, error)) SLSAAttestationPaginateOption {
	return func(pager *slsaattestationPager) error {
		if filter == nil {
			return errors.New("SLSAAttestationQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type slsaattestationPager struct {
	reverse bool
	order   *SLSAAttestationOrder
	filter  func(*SLSAAttestationQuery) (*SLSAAttestationQuery, error)
}

func newSLSAAttestationPager(opts []SLSAAttestationPaginateOption, reverse bool) (*slsaattestationPager, error) {
	pager := &slsaattestationPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSLSAAttestationOrder
	}
	return pager, nil
}

func (p *slsaattestationPager) applyFilter(query *SLSAAttestationQuery) (*SLSAAttestationQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *slsaattestationPager) toCursor(sa *SLSAAttestation) Cursor {
	return p.order.Field.toCursor(sa)
}

func (p *slsaattestationPager) applyCursors(query *SLSAAttestationQuery, after, before *Cursor) (*SLSAAttestationQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultSLSAAttestationOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *slsaattestationPager) applyOrder(query *SLSAAttestationQuery) *SLSAAttestationQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultSLSAAttestationOrder.Field {
		query = query.Order(DefaultSLSAAttestationOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *slsaattestationPager) orderExpr(query *SLSAAttestationQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultSLSAAttestationOrder.Field {
			b.Comma().Ident(DefaultSLSAAttestationOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to SLSAAttestation.
func (sa *SLSAAttestationQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SLSAAttestationPaginateOption,
) (*SLSAAttestationConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSLSAAttestationPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if sa, err = pager.applyFilter(sa); err != nil {
		return nil, err
	}
	conn := &SLSAAttestationConnection{Edges: []*SLSAAttestationEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := sa.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if sa, err = pager.applyCursors(sa, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		sa.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := sa.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	sa = pager.applyOrder(sa)
	nodes, err := sa.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// SLSAAttestationOrderField defines the ordering field of SLSAAttestation.
type SLSAAttestationOrderField struct {
	// Value extracts the ordering value from the given SLSAAttestation.
	Value    func(*SLSAAttestation) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) slsaattestation.OrderOption
	toCursor func(*SLSAAttestation) Cursor
}

// SLSAAttestationOrder defines the ordering of SLSAAttestation.
type SLSAAttestationOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *SLSAAttestationOrderField `json:"field"`
}

// DefaultSLSAAttestationOrder is the default ordering of SLSAAttestation.
var DefaultSLSAAttestationOrder = &SLSAAttestationOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &SLSAAttestationOrderField{
		Value: func(sa *SLSAAttestation) (ent.Value, error) {
			return sa.ID, nil
		},
		column: slsaattestation.FieldID,
		toTerm: slsaattestation.ByID,
		toCursor: func(sa *SLSAAttestation) Cursor {
			return Cursor{ID: sa.ID}
		},
	},
}

// ToEdge converts SLSAAttestation into SLSAAttestationEdge.
func (sa *SLSAAttestation) ToEdge(order *SLSAAttestationOrder) *SLSAAttestationEdge {
	if order == nil {
		order = DefaultSLSAAttestationOrder
	}
	return &SLSAAttestationEdge{
		Node:   sa,
		Cursor: order.Field.toCursor(sa),
	}
}

// SourceNameEdge is the edge representation of SourceName.
type SourceNameEdge struct {
	Node   *SourceName `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// SourceNameConnection is the connection containing edges to SourceName.
type SourceNameConnection struct {
	Edges      []*SourceNameEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *SourceNameConnection) build(nodes []*SourceName, pager *sourcenamePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *SourceName
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *SourceName {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *SourceName {
			return nodes[i]
		}
	}
	c.Edges = make([]*SourceNameEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &SourceNameEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// SourceNamePaginateOption enables pagination customization.
type SourceNamePaginateOption func(*sourcenamePager) error

// WithSourceNameOrder configures pagination ordering.
func WithSourceNameOrder(order *SourceNameOrder) SourceNamePaginateOption {
	if order == nil {
		order = DefaultSourceNameOrder
	}
	o := *order
	return func(pager *sourcenamePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSourceNameOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSourceNameFilter configures pagination filter.
func WithSourceNameFilter(filter func(*SourceNameQuery) (*SourceNameQuery, error)) SourceNamePaginateOption {
	return func(pager *sourcenamePager) error {
		if filter == nil {
			return errors.New("SourceNameQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type sourcenamePager struct {
	reverse bool
	order   *SourceNameOrder
	filter  func(*SourceNameQuery) (*SourceNameQuery, error)
}

func newSourceNamePager(opts []SourceNamePaginateOption, reverse bool) (*sourcenamePager, error) {
	pager := &sourcenamePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSourceNameOrder
	}
	return pager, nil
}

func (p *sourcenamePager) applyFilter(query *SourceNameQuery) (*SourceNameQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *sourcenamePager) toCursor(sn *SourceName) Cursor {
	return p.order.Field.toCursor(sn)
}

func (p *sourcenamePager) applyCursors(query *SourceNameQuery, after, before *Cursor) (*SourceNameQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultSourceNameOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *sourcenamePager) applyOrder(query *SourceNameQuery) *SourceNameQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultSourceNameOrder.Field {
		query = query.Order(DefaultSourceNameOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *sourcenamePager) orderExpr(query *SourceNameQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultSourceNameOrder.Field {
			b.Comma().Ident(DefaultSourceNameOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to SourceName.
func (sn *SourceNameQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SourceNamePaginateOption,
) (*SourceNameConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSourceNamePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if sn, err = pager.applyFilter(sn); err != nil {
		return nil, err
	}
	conn := &SourceNameConnection{Edges: []*SourceNameEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := sn.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if sn, err = pager.applyCursors(sn, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		sn.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := sn.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	sn = pager.applyOrder(sn)
	nodes, err := sn.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// SourceNameOrderField defines the ordering field of SourceName.
type SourceNameOrderField struct {
	// Value extracts the ordering value from the given SourceName.
	Value    func(*SourceName) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) sourcename.OrderOption
	toCursor func(*SourceName) Cursor
}

// SourceNameOrder defines the ordering of SourceName.
type SourceNameOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *SourceNameOrderField `json:"field"`
}

// DefaultSourceNameOrder is the default ordering of SourceName.
var DefaultSourceNameOrder = &SourceNameOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &SourceNameOrderField{
		Value: func(sn *SourceName) (ent.Value, error) {
			return sn.ID, nil
		},
		column: sourcename.FieldID,
		toTerm: sourcename.ByID,
		toCursor: func(sn *SourceName) Cursor {
			return Cursor{ID: sn.ID}
		},
	},
}

// ToEdge converts SourceName into SourceNameEdge.
func (sn *SourceName) ToEdge(order *SourceNameOrder) *SourceNameEdge {
	if order == nil {
		order = DefaultSourceNameOrder
	}
	return &SourceNameEdge{
		Node:   sn,
		Cursor: order.Field.toCursor(sn),
	}
}

// VulnEqualEdge is the edge representation of VulnEqual.
type VulnEqualEdge struct {
	Node   *VulnEqual `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// VulnEqualConnection is the connection containing edges to VulnEqual.
type VulnEqualConnection struct {
	Edges      []*VulnEqualEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *VulnEqualConnection) build(nodes []*VulnEqual, pager *vulnequalPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *VulnEqual
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *VulnEqual {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *VulnEqual {
			return nodes[i]
		}
	}
	c.Edges = make([]*VulnEqualEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &VulnEqualEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// VulnEqualPaginateOption enables pagination customization.
type VulnEqualPaginateOption func(*vulnequalPager) error

// WithVulnEqualOrder configures pagination ordering.
func WithVulnEqualOrder(order *VulnEqualOrder) VulnEqualPaginateOption {
	if order == nil {
		order = DefaultVulnEqualOrder
	}
	o := *order
	return func(pager *vulnequalPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultVulnEqualOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithVulnEqualFilter configures pagination filter.
func WithVulnEqualFilter(filter func(*VulnEqualQuery) (*VulnEqualQuery, error)) VulnEqualPaginateOption {
	return func(pager *vulnequalPager) error {
		if filter == nil {
			return errors.New("VulnEqualQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type vulnequalPager struct {
	reverse bool
	order   *VulnEqualOrder
	filter  func(*VulnEqualQuery) (*VulnEqualQuery, error)
}

func newVulnEqualPager(opts []VulnEqualPaginateOption, reverse bool) (*vulnequalPager, error) {
	pager := &vulnequalPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultVulnEqualOrder
	}
	return pager, nil
}

func (p *vulnequalPager) applyFilter(query *VulnEqualQuery) (*VulnEqualQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *vulnequalPager) toCursor(ve *VulnEqual) Cursor {
	return p.order.Field.toCursor(ve)
}

func (p *vulnequalPager) applyCursors(query *VulnEqualQuery, after, before *Cursor) (*VulnEqualQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultVulnEqualOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *vulnequalPager) applyOrder(query *VulnEqualQuery) *VulnEqualQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultVulnEqualOrder.Field {
		query = query.Order(DefaultVulnEqualOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *vulnequalPager) orderExpr(query *VulnEqualQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultVulnEqualOrder.Field {
			b.Comma().Ident(DefaultVulnEqualOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to VulnEqual.
func (ve *VulnEqualQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...VulnEqualPaginateOption,
) (*VulnEqualConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newVulnEqualPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ve, err = pager.applyFilter(ve); err != nil {
		return nil, err
	}
	conn := &VulnEqualConnection{Edges: []*VulnEqualEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := ve.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ve, err = pager.applyCursors(ve, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		ve.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ve.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ve = pager.applyOrder(ve)
	nodes, err := ve.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// VulnEqualOrderField defines the ordering field of VulnEqual.
type VulnEqualOrderField struct {
	// Value extracts the ordering value from the given VulnEqual.
	Value    func(*VulnEqual) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) vulnequal.OrderOption
	toCursor func(*VulnEqual) Cursor
}

// VulnEqualOrder defines the ordering of VulnEqual.
type VulnEqualOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *VulnEqualOrderField `json:"field"`
}

// DefaultVulnEqualOrder is the default ordering of VulnEqual.
var DefaultVulnEqualOrder = &VulnEqualOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &VulnEqualOrderField{
		Value: func(ve *VulnEqual) (ent.Value, error) {
			return ve.ID, nil
		},
		column: vulnequal.FieldID,
		toTerm: vulnequal.ByID,
		toCursor: func(ve *VulnEqual) Cursor {
			return Cursor{ID: ve.ID}
		},
	},
}

// ToEdge converts VulnEqual into VulnEqualEdge.
func (ve *VulnEqual) ToEdge(order *VulnEqualOrder) *VulnEqualEdge {
	if order == nil {
		order = DefaultVulnEqualOrder
	}
	return &VulnEqualEdge{
		Node:   ve,
		Cursor: order.Field.toCursor(ve),
	}
}

// VulnerabilityIDEdge is the edge representation of VulnerabilityID.
type VulnerabilityIDEdge struct {
	Node   *VulnerabilityID `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// VulnerabilityIDConnection is the connection containing edges to VulnerabilityID.
type VulnerabilityIDConnection struct {
	Edges      []*VulnerabilityIDEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

func (c *VulnerabilityIDConnection) build(nodes []*VulnerabilityID, pager *vulnerabilityidPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *VulnerabilityID
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *VulnerabilityID {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *VulnerabilityID {
			return nodes[i]
		}
	}
	c.Edges = make([]*VulnerabilityIDEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &VulnerabilityIDEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// VulnerabilityIDPaginateOption enables pagination customization.
type VulnerabilityIDPaginateOption func(*vulnerabilityidPager) error

// WithVulnerabilityIDOrder configures pagination ordering.
func WithVulnerabilityIDOrder(order *VulnerabilityIDOrder) VulnerabilityIDPaginateOption {
	if order == nil {
		order = DefaultVulnerabilityIDOrder
	}
	o := *order
	return func(pager *vulnerabilityidPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultVulnerabilityIDOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithVulnerabilityIDFilter configures pagination filter.
func WithVulnerabilityIDFilter(filter func(*VulnerabilityIDQuery) (*VulnerabilityIDQuery, error)) VulnerabilityIDPaginateOption {
	return func(pager *vulnerabilityidPager) error {
		if filter == nil {
			return errors.New("VulnerabilityIDQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type vulnerabilityidPager struct {
	reverse bool
	order   *VulnerabilityIDOrder
	filter  func(*VulnerabilityIDQuery) (*VulnerabilityIDQuery, error)
}

func newVulnerabilityIDPager(opts []VulnerabilityIDPaginateOption, reverse bool) (*vulnerabilityidPager, error) {
	pager := &vulnerabilityidPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultVulnerabilityIDOrder
	}
	return pager, nil
}

func (p *vulnerabilityidPager) applyFilter(query *VulnerabilityIDQuery) (*VulnerabilityIDQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *vulnerabilityidPager) toCursor(vi *VulnerabilityID) Cursor {
	return p.order.Field.toCursor(vi)
}

func (p *vulnerabilityidPager) applyCursors(query *VulnerabilityIDQuery, after, before *Cursor) (*VulnerabilityIDQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultVulnerabilityIDOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *vulnerabilityidPager) applyOrder(query *VulnerabilityIDQuery) *VulnerabilityIDQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultVulnerabilityIDOrder.Field {
		query = query.Order(DefaultVulnerabilityIDOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *vulnerabilityidPager) orderExpr(query *VulnerabilityIDQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultVulnerabilityIDOrder.Field {
			b.Comma().Ident(DefaultVulnerabilityIDOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to VulnerabilityID.
func (vi *VulnerabilityIDQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...VulnerabilityIDPaginateOption,
) (*VulnerabilityIDConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newVulnerabilityIDPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if vi, err = pager.applyFilter(vi); err != nil {
		return nil, err
	}
	conn := &VulnerabilityIDConnection{Edges: []*VulnerabilityIDEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := vi.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if vi, err = pager.applyCursors(vi, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		vi.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := vi.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	vi = pager.applyOrder(vi)
	nodes, err := vi.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// VulnerabilityIDOrderField defines the ordering field of VulnerabilityID.
type VulnerabilityIDOrderField struct {
	// Value extracts the ordering value from the given VulnerabilityID.
	Value    func(*VulnerabilityID) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) vulnerabilityid.OrderOption
	toCursor func(*VulnerabilityID) Cursor
}

// VulnerabilityIDOrder defines the ordering of VulnerabilityID.
type VulnerabilityIDOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *VulnerabilityIDOrderField `json:"field"`
}

// DefaultVulnerabilityIDOrder is the default ordering of VulnerabilityID.
var DefaultVulnerabilityIDOrder = &VulnerabilityIDOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &VulnerabilityIDOrderField{
		Value: func(vi *VulnerabilityID) (ent.Value, error) {
			return vi.ID, nil
		},
		column: vulnerabilityid.FieldID,
		toTerm: vulnerabilityid.ByID,
		toCursor: func(vi *VulnerabilityID) Cursor {
			return Cursor{ID: vi.ID}
		},
	},
}

// ToEdge converts VulnerabilityID into VulnerabilityIDEdge.
func (vi *VulnerabilityID) ToEdge(order *VulnerabilityIDOrder) *VulnerabilityIDEdge {
	if order == nil {
		order = DefaultVulnerabilityIDOrder
	}
	return &VulnerabilityIDEdge{
		Node:   vi,
		Cursor: order.Field.toCursor(vi),
	}
}

// VulnerabilityMetadataEdge is the edge representation of VulnerabilityMetadata.
type VulnerabilityMetadataEdge struct {
	Node   *VulnerabilityMetadata `json:"node"`
	Cursor Cursor                 `json:"cursor"`
}

// VulnerabilityMetadataConnection is the connection containing edges to VulnerabilityMetadata.
type VulnerabilityMetadataConnection struct {
	Edges      []*VulnerabilityMetadataEdge `json:"edges"`
	PageInfo   PageInfo                     `json:"pageInfo"`
	TotalCount int                          `json:"totalCount"`
}

func (c *VulnerabilityMetadataConnection) build(nodes []*VulnerabilityMetadata, pager *vulnerabilitymetadataPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *VulnerabilityMetadata
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *VulnerabilityMetadata {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *VulnerabilityMetadata {
			return nodes[i]
		}
	}
	c.Edges = make([]*VulnerabilityMetadataEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &VulnerabilityMetadataEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// VulnerabilityMetadataPaginateOption enables pagination customization.
type VulnerabilityMetadataPaginateOption func(*vulnerabilitymetadataPager) error

// WithVulnerabilityMetadataOrder configures pagination ordering.
func WithVulnerabilityMetadataOrder(order *VulnerabilityMetadataOrder) VulnerabilityMetadataPaginateOption {
	if order == nil {
		order = DefaultVulnerabilityMetadataOrder
	}
	o := *order
	return func(pager *vulnerabilitymetadataPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultVulnerabilityMetadataOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithVulnerabilityMetadataFilter configures pagination filter.
func WithVulnerabilityMetadataFilter(filter func(*VulnerabilityMetadataQuery) (*VulnerabilityMetadataQuery, error)) VulnerabilityMetadataPaginateOption {
	return func(pager *vulnerabilitymetadataPager) error {
		if filter == nil {
			return errors.New("VulnerabilityMetadataQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type vulnerabilitymetadataPager struct {
	reverse bool
	order   *VulnerabilityMetadataOrder
	filter  func(*VulnerabilityMetadataQuery) (*VulnerabilityMetadataQuery, error)
}

func newVulnerabilityMetadataPager(opts []VulnerabilityMetadataPaginateOption, reverse bool) (*vulnerabilitymetadataPager, error) {
	pager := &vulnerabilitymetadataPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultVulnerabilityMetadataOrder
	}
	return pager, nil
}

func (p *vulnerabilitymetadataPager) applyFilter(query *VulnerabilityMetadataQuery) (*VulnerabilityMetadataQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *vulnerabilitymetadataPager) toCursor(vm *VulnerabilityMetadata) Cursor {
	return p.order.Field.toCursor(vm)
}

func (p *vulnerabilitymetadataPager) applyCursors(query *VulnerabilityMetadataQuery, after, before *Cursor) (*VulnerabilityMetadataQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultVulnerabilityMetadataOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *vulnerabilitymetadataPager) applyOrder(query *VulnerabilityMetadataQuery) *VulnerabilityMetadataQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultVulnerabilityMetadataOrder.Field {
		query = query.Order(DefaultVulnerabilityMetadataOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *vulnerabilitymetadataPager) orderExpr(query *VulnerabilityMetadataQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultVulnerabilityMetadataOrder.Field {
			b.Comma().Ident(DefaultVulnerabilityMetadataOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to VulnerabilityMetadata.
func (vm *VulnerabilityMetadataQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...VulnerabilityMetadataPaginateOption,
) (*VulnerabilityMetadataConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newVulnerabilityMetadataPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if vm, err = pager.applyFilter(vm); err != nil {
		return nil, err
	}
	conn := &VulnerabilityMetadataConnection{Edges: []*VulnerabilityMetadataEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := vm.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if vm, err = pager.applyCursors(vm, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		vm.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := vm.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	vm = pager.applyOrder(vm)
	nodes, err := vm.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// VulnerabilityMetadataOrderField defines the ordering field of VulnerabilityMetadata.
type VulnerabilityMetadataOrderField struct {
	// Value extracts the ordering value from the given VulnerabilityMetadata.
	Value    func(*VulnerabilityMetadata) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) vulnerabilitymetadata.OrderOption
	toCursor func(*VulnerabilityMetadata) Cursor
}

// VulnerabilityMetadataOrder defines the ordering of VulnerabilityMetadata.
type VulnerabilityMetadataOrder struct {
	Direction OrderDirection                   `json:"direction"`
	Field     *VulnerabilityMetadataOrderField `json:"field"`
}

// DefaultVulnerabilityMetadataOrder is the default ordering of VulnerabilityMetadata.
var DefaultVulnerabilityMetadataOrder = &VulnerabilityMetadataOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &VulnerabilityMetadataOrderField{
		Value: func(vm *VulnerabilityMetadata) (ent.Value, error) {
			return vm.ID, nil
		},
		column: vulnerabilitymetadata.FieldID,
		toTerm: vulnerabilitymetadata.ByID,
		toCursor: func(vm *VulnerabilityMetadata) Cursor {
			return Cursor{ID: vm.ID}
		},
	},
}

// ToEdge converts VulnerabilityMetadata into VulnerabilityMetadataEdge.
func (vm *VulnerabilityMetadata) ToEdge(order *VulnerabilityMetadataOrder) *VulnerabilityMetadataEdge {
	if order == nil {
		order = DefaultVulnerabilityMetadataOrder
	}
	return &VulnerabilityMetadataEdge{
		Node:   vm,
		Cursor: order.Field.toCursor(vm),
	}
}
