// Code generated by ent, DO NOT EDIT.

package detectionmethod

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the detectionmethod type in the database.
	Label = "detection_method"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDetectionID holds the string denoting the detection_id field in the database.
	FieldDetectionID = "detection_id"
	// FieldMethod holds the string denoting the method field in the database.
	FieldMethod = "method"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldEffectiveness holds the string denoting the effectiveness field in the database.
	FieldEffectiveness = "effectiveness"
	// EdgeCwe holds the string denoting the cwe edge name in mutations.
	EdgeCwe = "cwe"
	// Table holds the table name of the detectionmethod in the database.
	Table = "detection_methods"
	// CweTable is the table that holds the cwe relation/edge. The primary key declared below.
	CweTable = "cwe_detection_method"
	// CweInverseTable is the table name for the CWE entity.
	// It exists in this package in order to avoid circular dependency with the "cwe" package.
	CweInverseTable = "cw_es"
)

// Columns holds all SQL columns for detectionmethod fields.
var Columns = []string{
	FieldID,
	FieldDetectionID,
	FieldMethod,
	FieldDescription,
	FieldEffectiveness,
}

var (
	// CwePrimaryKey and CweColumn2 are the table columns denoting the
	// primary key for the cwe relation (M2M).
	CwePrimaryKey = []string{"cwe_id", "detection_method_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the DetectionMethod queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDetectionID orders the results by the detection_id field.
func ByDetectionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDetectionID, opts...).ToFunc()
}

// ByMethod orders the results by the method field.
func ByMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMethod, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByEffectiveness orders the results by the effectiveness field.
func ByEffectiveness(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEffectiveness, opts...).ToFunc()
}

// ByCweCount orders the results by cwe count.
func ByCweCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCweStep(), opts...)
	}
}

// ByCwe orders the results by cwe terms.
func ByCwe(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCweStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCweStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CweInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CweTable, CwePrimaryKey...),
	)
}
