// Code generated by ent, DO NOT EDIT.

package consequence_impact

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Consequence_Impact {
	return predicate.Consequence_Impact(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Consequence_Impact {
	return predicate.Consequence_Impact(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Consequence_Impact {
	return predicate.Consequence_Impact(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Consequence_Impact {
	return predicate.Consequence_Impact(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Consequence_Impact {
	return predicate.Consequence_Impact(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Consequence_Impact {
	return predicate.Consequence_Impact(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Consequence_Impact {
	return predicate.Consequence_Impact(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Consequence_Impact {
	return predicate.Consequence_Impact(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Consequence_Impact {
	return predicate.Consequence_Impact(sql.FieldLTE(FieldID, id))
}

// Impact applies equality check predicate on the "impact" field. It's identical to ImpactEQ.
func Impact(v string) predicate.Consequence_Impact {
	return predicate.Consequence_Impact(sql.FieldEQ(FieldImpact, v))
}

// ImpactEQ applies the EQ predicate on the "impact" field.
func ImpactEQ(v string) predicate.Consequence_Impact {
	return predicate.Consequence_Impact(sql.FieldEQ(FieldImpact, v))
}

// ImpactNEQ applies the NEQ predicate on the "impact" field.
func ImpactNEQ(v string) predicate.Consequence_Impact {
	return predicate.Consequence_Impact(sql.FieldNEQ(FieldImpact, v))
}

// ImpactIn applies the In predicate on the "impact" field.
func ImpactIn(vs ...string) predicate.Consequence_Impact {
	return predicate.Consequence_Impact(sql.FieldIn(FieldImpact, vs...))
}

// ImpactNotIn applies the NotIn predicate on the "impact" field.
func ImpactNotIn(vs ...string) predicate.Consequence_Impact {
	return predicate.Consequence_Impact(sql.FieldNotIn(FieldImpact, vs...))
}

// ImpactGT applies the GT predicate on the "impact" field.
func ImpactGT(v string) predicate.Consequence_Impact {
	return predicate.Consequence_Impact(sql.FieldGT(FieldImpact, v))
}

// ImpactGTE applies the GTE predicate on the "impact" field.
func ImpactGTE(v string) predicate.Consequence_Impact {
	return predicate.Consequence_Impact(sql.FieldGTE(FieldImpact, v))
}

// ImpactLT applies the LT predicate on the "impact" field.
func ImpactLT(v string) predicate.Consequence_Impact {
	return predicate.Consequence_Impact(sql.FieldLT(FieldImpact, v))
}

// ImpactLTE applies the LTE predicate on the "impact" field.
func ImpactLTE(v string) predicate.Consequence_Impact {
	return predicate.Consequence_Impact(sql.FieldLTE(FieldImpact, v))
}

// ImpactContains applies the Contains predicate on the "impact" field.
func ImpactContains(v string) predicate.Consequence_Impact {
	return predicate.Consequence_Impact(sql.FieldContains(FieldImpact, v))
}

// ImpactHasPrefix applies the HasPrefix predicate on the "impact" field.
func ImpactHasPrefix(v string) predicate.Consequence_Impact {
	return predicate.Consequence_Impact(sql.FieldHasPrefix(FieldImpact, v))
}

// ImpactHasSuffix applies the HasSuffix predicate on the "impact" field.
func ImpactHasSuffix(v string) predicate.Consequence_Impact {
	return predicate.Consequence_Impact(sql.FieldHasSuffix(FieldImpact, v))
}

// ImpactEqualFold applies the EqualFold predicate on the "impact" field.
func ImpactEqualFold(v string) predicate.Consequence_Impact {
	return predicate.Consequence_Impact(sql.FieldEqualFold(FieldImpact, v))
}

// ImpactContainsFold applies the ContainsFold predicate on the "impact" field.
func ImpactContainsFold(v string) predicate.Consequence_Impact {
	return predicate.Consequence_Impact(sql.FieldContainsFold(FieldImpact, v))
}

// HasConsequence applies the HasEdge predicate on the "consequence" edge.
func HasConsequence() predicate.Consequence_Impact {
	return predicate.Consequence_Impact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ConsequenceTable, ConsequencePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConsequenceWith applies the HasEdge predicate on the "consequence" edge with a given conditions (other predicates).
func HasConsequenceWith(preds ...predicate.Consequence) predicate.Consequence_Impact {
	return predicate.Consequence_Impact(func(s *sql.Selector) {
		step := newConsequenceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Consequence_Impact) predicate.Consequence_Impact {
	return predicate.Consequence_Impact(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Consequence_Impact) predicate.Consequence_Impact {
	return predicate.Consequence_Impact(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Consequence_Impact) predicate.Consequence_Impact {
	return predicate.Consequence_Impact(sql.NotPredicates(p))
}
