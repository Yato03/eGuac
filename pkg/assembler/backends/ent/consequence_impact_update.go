// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/consequence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/consequence_impact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// ConsequenceImpactUpdate is the builder for updating Consequence_Impact entities.
type ConsequenceImpactUpdate struct {
	config
	hooks    []Hook
	mutation *ConsequenceImpactMutation
}

// Where appends a list predicates to the ConsequenceImpactUpdate builder.
func (ciu *ConsequenceImpactUpdate) Where(ps ...predicate.Consequence_Impact) *ConsequenceImpactUpdate {
	ciu.mutation.Where(ps...)
	return ciu
}

// SetImpact sets the "impact" field.
func (ciu *ConsequenceImpactUpdate) SetImpact(s string) *ConsequenceImpactUpdate {
	ciu.mutation.SetImpact(s)
	return ciu
}

// SetNillableImpact sets the "impact" field if the given value is not nil.
func (ciu *ConsequenceImpactUpdate) SetNillableImpact(s *string) *ConsequenceImpactUpdate {
	if s != nil {
		ciu.SetImpact(*s)
	}
	return ciu
}

// AddConsequenceIDs adds the "consequence" edge to the Consequence entity by IDs.
func (ciu *ConsequenceImpactUpdate) AddConsequenceIDs(ids ...uuid.UUID) *ConsequenceImpactUpdate {
	ciu.mutation.AddConsequenceIDs(ids...)
	return ciu
}

// AddConsequence adds the "consequence" edges to the Consequence entity.
func (ciu *ConsequenceImpactUpdate) AddConsequence(c ...*Consequence) *ConsequenceImpactUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciu.AddConsequenceIDs(ids...)
}

// Mutation returns the ConsequenceImpactMutation object of the builder.
func (ciu *ConsequenceImpactUpdate) Mutation() *ConsequenceImpactMutation {
	return ciu.mutation
}

// ClearConsequence clears all "consequence" edges to the Consequence entity.
func (ciu *ConsequenceImpactUpdate) ClearConsequence() *ConsequenceImpactUpdate {
	ciu.mutation.ClearConsequence()
	return ciu
}

// RemoveConsequenceIDs removes the "consequence" edge to Consequence entities by IDs.
func (ciu *ConsequenceImpactUpdate) RemoveConsequenceIDs(ids ...uuid.UUID) *ConsequenceImpactUpdate {
	ciu.mutation.RemoveConsequenceIDs(ids...)
	return ciu
}

// RemoveConsequence removes "consequence" edges to Consequence entities.
func (ciu *ConsequenceImpactUpdate) RemoveConsequence(c ...*Consequence) *ConsequenceImpactUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciu.RemoveConsequenceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ciu *ConsequenceImpactUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ciu.sqlSave, ciu.mutation, ciu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ciu *ConsequenceImpactUpdate) SaveX(ctx context.Context) int {
	affected, err := ciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ciu *ConsequenceImpactUpdate) Exec(ctx context.Context) error {
	_, err := ciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciu *ConsequenceImpactUpdate) ExecX(ctx context.Context) {
	if err := ciu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ciu *ConsequenceImpactUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(consequence_impact.Table, consequence_impact.Columns, sqlgraph.NewFieldSpec(consequence_impact.FieldID, field.TypeUUID))
	if ps := ciu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciu.mutation.Impact(); ok {
		_spec.SetField(consequence_impact.FieldImpact, field.TypeString, value)
	}
	if ciu.mutation.ConsequenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consequence_impact.ConsequenceTable,
			Columns: consequence_impact.ConsequencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.RemovedConsequenceIDs(); len(nodes) > 0 && !ciu.mutation.ConsequenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consequence_impact.ConsequenceTable,
			Columns: consequence_impact.ConsequencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.ConsequenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consequence_impact.ConsequenceTable,
			Columns: consequence_impact.ConsequencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{consequence_impact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ciu.mutation.done = true
	return n, nil
}

// ConsequenceImpactUpdateOne is the builder for updating a single Consequence_Impact entity.
type ConsequenceImpactUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConsequenceImpactMutation
}

// SetImpact sets the "impact" field.
func (ciuo *ConsequenceImpactUpdateOne) SetImpact(s string) *ConsequenceImpactUpdateOne {
	ciuo.mutation.SetImpact(s)
	return ciuo
}

// SetNillableImpact sets the "impact" field if the given value is not nil.
func (ciuo *ConsequenceImpactUpdateOne) SetNillableImpact(s *string) *ConsequenceImpactUpdateOne {
	if s != nil {
		ciuo.SetImpact(*s)
	}
	return ciuo
}

// AddConsequenceIDs adds the "consequence" edge to the Consequence entity by IDs.
func (ciuo *ConsequenceImpactUpdateOne) AddConsequenceIDs(ids ...uuid.UUID) *ConsequenceImpactUpdateOne {
	ciuo.mutation.AddConsequenceIDs(ids...)
	return ciuo
}

// AddConsequence adds the "consequence" edges to the Consequence entity.
func (ciuo *ConsequenceImpactUpdateOne) AddConsequence(c ...*Consequence) *ConsequenceImpactUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciuo.AddConsequenceIDs(ids...)
}

// Mutation returns the ConsequenceImpactMutation object of the builder.
func (ciuo *ConsequenceImpactUpdateOne) Mutation() *ConsequenceImpactMutation {
	return ciuo.mutation
}

// ClearConsequence clears all "consequence" edges to the Consequence entity.
func (ciuo *ConsequenceImpactUpdateOne) ClearConsequence() *ConsequenceImpactUpdateOne {
	ciuo.mutation.ClearConsequence()
	return ciuo
}

// RemoveConsequenceIDs removes the "consequence" edge to Consequence entities by IDs.
func (ciuo *ConsequenceImpactUpdateOne) RemoveConsequenceIDs(ids ...uuid.UUID) *ConsequenceImpactUpdateOne {
	ciuo.mutation.RemoveConsequenceIDs(ids...)
	return ciuo
}

// RemoveConsequence removes "consequence" edges to Consequence entities.
func (ciuo *ConsequenceImpactUpdateOne) RemoveConsequence(c ...*Consequence) *ConsequenceImpactUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciuo.RemoveConsequenceIDs(ids...)
}

// Where appends a list predicates to the ConsequenceImpactUpdate builder.
func (ciuo *ConsequenceImpactUpdateOne) Where(ps ...predicate.Consequence_Impact) *ConsequenceImpactUpdateOne {
	ciuo.mutation.Where(ps...)
	return ciuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ciuo *ConsequenceImpactUpdateOne) Select(field string, fields ...string) *ConsequenceImpactUpdateOne {
	ciuo.fields = append([]string{field}, fields...)
	return ciuo
}

// Save executes the query and returns the updated Consequence_Impact entity.
func (ciuo *ConsequenceImpactUpdateOne) Save(ctx context.Context) (*Consequence_Impact, error) {
	return withHooks(ctx, ciuo.sqlSave, ciuo.mutation, ciuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ciuo *ConsequenceImpactUpdateOne) SaveX(ctx context.Context) *Consequence_Impact {
	node, err := ciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ciuo *ConsequenceImpactUpdateOne) Exec(ctx context.Context) error {
	_, err := ciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciuo *ConsequenceImpactUpdateOne) ExecX(ctx context.Context) {
	if err := ciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ciuo *ConsequenceImpactUpdateOne) sqlSave(ctx context.Context) (_node *Consequence_Impact, err error) {
	_spec := sqlgraph.NewUpdateSpec(consequence_impact.Table, consequence_impact.Columns, sqlgraph.NewFieldSpec(consequence_impact.FieldID, field.TypeUUID))
	id, ok := ciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Consequence_Impact.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ciuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, consequence_impact.FieldID)
		for _, f := range fields {
			if !consequence_impact.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != consequence_impact.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ciuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciuo.mutation.Impact(); ok {
		_spec.SetField(consequence_impact.FieldImpact, field.TypeString, value)
	}
	if ciuo.mutation.ConsequenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consequence_impact.ConsequenceTable,
			Columns: consequence_impact.ConsequencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.RemovedConsequenceIDs(); len(nodes) > 0 && !ciuo.mutation.ConsequenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consequence_impact.ConsequenceTable,
			Columns: consequence_impact.ConsequencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.ConsequenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consequence_impact.ConsequenceTable,
			Columns: consequence_impact.ConsequencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Consequence_Impact{config: ciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{consequence_impact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ciuo.mutation.done = true
	return _node, nil
}
