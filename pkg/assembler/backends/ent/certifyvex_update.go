// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyvex"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/cvss"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/cwe"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/exploit"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/reachablecode"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilityid"
)

// CertifyVexUpdate is the builder for updating CertifyVex entities.
type CertifyVexUpdate struct {
	config
	hooks    []Hook
	mutation *CertifyVexMutation
}

// Where appends a list predicates to the CertifyVexUpdate builder.
func (cvu *CertifyVexUpdate) Where(ps ...predicate.CertifyVex) *CertifyVexUpdate {
	cvu.mutation.Where(ps...)
	return cvu
}

// SetPackageID sets the "package_id" field.
func (cvu *CertifyVexUpdate) SetPackageID(u uuid.UUID) *CertifyVexUpdate {
	cvu.mutation.SetPackageID(u)
	return cvu
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (cvu *CertifyVexUpdate) SetNillablePackageID(u *uuid.UUID) *CertifyVexUpdate {
	if u != nil {
		cvu.SetPackageID(*u)
	}
	return cvu
}

// ClearPackageID clears the value of the "package_id" field.
func (cvu *CertifyVexUpdate) ClearPackageID() *CertifyVexUpdate {
	cvu.mutation.ClearPackageID()
	return cvu
}

// SetArtifactID sets the "artifact_id" field.
func (cvu *CertifyVexUpdate) SetArtifactID(u uuid.UUID) *CertifyVexUpdate {
	cvu.mutation.SetArtifactID(u)
	return cvu
}

// SetNillableArtifactID sets the "artifact_id" field if the given value is not nil.
func (cvu *CertifyVexUpdate) SetNillableArtifactID(u *uuid.UUID) *CertifyVexUpdate {
	if u != nil {
		cvu.SetArtifactID(*u)
	}
	return cvu
}

// ClearArtifactID clears the value of the "artifact_id" field.
func (cvu *CertifyVexUpdate) ClearArtifactID() *CertifyVexUpdate {
	cvu.mutation.ClearArtifactID()
	return cvu
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (cvu *CertifyVexUpdate) SetVulnerabilityID(u uuid.UUID) *CertifyVexUpdate {
	cvu.mutation.SetVulnerabilityID(u)
	return cvu
}

// SetNillableVulnerabilityID sets the "vulnerability_id" field if the given value is not nil.
func (cvu *CertifyVexUpdate) SetNillableVulnerabilityID(u *uuid.UUID) *CertifyVexUpdate {
	if u != nil {
		cvu.SetVulnerabilityID(*u)
	}
	return cvu
}

// SetKnownSince sets the "known_since" field.
func (cvu *CertifyVexUpdate) SetKnownSince(t time.Time) *CertifyVexUpdate {
	cvu.mutation.SetKnownSince(t)
	return cvu
}

// SetNillableKnownSince sets the "known_since" field if the given value is not nil.
func (cvu *CertifyVexUpdate) SetNillableKnownSince(t *time.Time) *CertifyVexUpdate {
	if t != nil {
		cvu.SetKnownSince(*t)
	}
	return cvu
}

// SetStatus sets the "status" field.
func (cvu *CertifyVexUpdate) SetStatus(s string) *CertifyVexUpdate {
	cvu.mutation.SetStatus(s)
	return cvu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cvu *CertifyVexUpdate) SetNillableStatus(s *string) *CertifyVexUpdate {
	if s != nil {
		cvu.SetStatus(*s)
	}
	return cvu
}

// SetStatement sets the "statement" field.
func (cvu *CertifyVexUpdate) SetStatement(s string) *CertifyVexUpdate {
	cvu.mutation.SetStatement(s)
	return cvu
}

// SetNillableStatement sets the "statement" field if the given value is not nil.
func (cvu *CertifyVexUpdate) SetNillableStatement(s *string) *CertifyVexUpdate {
	if s != nil {
		cvu.SetStatement(*s)
	}
	return cvu
}

// SetStatusNotes sets the "status_notes" field.
func (cvu *CertifyVexUpdate) SetStatusNotes(s string) *CertifyVexUpdate {
	cvu.mutation.SetStatusNotes(s)
	return cvu
}

// SetNillableStatusNotes sets the "status_notes" field if the given value is not nil.
func (cvu *CertifyVexUpdate) SetNillableStatusNotes(s *string) *CertifyVexUpdate {
	if s != nil {
		cvu.SetStatusNotes(*s)
	}
	return cvu
}

// SetJustification sets the "justification" field.
func (cvu *CertifyVexUpdate) SetJustification(s string) *CertifyVexUpdate {
	cvu.mutation.SetJustification(s)
	return cvu
}

// SetNillableJustification sets the "justification" field if the given value is not nil.
func (cvu *CertifyVexUpdate) SetNillableJustification(s *string) *CertifyVexUpdate {
	if s != nil {
		cvu.SetJustification(*s)
	}
	return cvu
}

// SetOrigin sets the "origin" field.
func (cvu *CertifyVexUpdate) SetOrigin(s string) *CertifyVexUpdate {
	cvu.mutation.SetOrigin(s)
	return cvu
}

// SetNillableOrigin sets the "origin" field if the given value is not nil.
func (cvu *CertifyVexUpdate) SetNillableOrigin(s *string) *CertifyVexUpdate {
	if s != nil {
		cvu.SetOrigin(*s)
	}
	return cvu
}

// SetCollector sets the "collector" field.
func (cvu *CertifyVexUpdate) SetCollector(s string) *CertifyVexUpdate {
	cvu.mutation.SetCollector(s)
	return cvu
}

// SetNillableCollector sets the "collector" field if the given value is not nil.
func (cvu *CertifyVexUpdate) SetNillableCollector(s *string) *CertifyVexUpdate {
	if s != nil {
		cvu.SetCollector(*s)
	}
	return cvu
}

// SetDocumentRef sets the "document_ref" field.
func (cvu *CertifyVexUpdate) SetDocumentRef(s string) *CertifyVexUpdate {
	cvu.mutation.SetDocumentRef(s)
	return cvu
}

// SetNillableDocumentRef sets the "document_ref" field if the given value is not nil.
func (cvu *CertifyVexUpdate) SetNillableDocumentRef(s *string) *CertifyVexUpdate {
	if s != nil {
		cvu.SetDocumentRef(*s)
	}
	return cvu
}

// SetDescription sets the "description" field.
func (cvu *CertifyVexUpdate) SetDescription(s string) *CertifyVexUpdate {
	cvu.mutation.SetDescription(s)
	return cvu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cvu *CertifyVexUpdate) SetNillableDescription(s *string) *CertifyVexUpdate {
	if s != nil {
		cvu.SetDescription(*s)
	}
	return cvu
}

// ClearDescription clears the value of the "description" field.
func (cvu *CertifyVexUpdate) ClearDescription() *CertifyVexUpdate {
	cvu.mutation.ClearDescription()
	return cvu
}

// SetPriority sets the "priority" field.
func (cvu *CertifyVexUpdate) SetPriority(f float64) *CertifyVexUpdate {
	cvu.mutation.ResetPriority()
	cvu.mutation.SetPriority(f)
	return cvu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (cvu *CertifyVexUpdate) SetNillablePriority(f *float64) *CertifyVexUpdate {
	if f != nil {
		cvu.SetPriority(*f)
	}
	return cvu
}

// AddPriority adds f to the "priority" field.
func (cvu *CertifyVexUpdate) AddPriority(f float64) *CertifyVexUpdate {
	cvu.mutation.AddPriority(f)
	return cvu
}

// ClearPriority clears the value of the "priority" field.
func (cvu *CertifyVexUpdate) ClearPriority() *CertifyVexUpdate {
	cvu.mutation.ClearPriority()
	return cvu
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (cvu *CertifyVexUpdate) SetPackage(p *PackageVersion) *CertifyVexUpdate {
	return cvu.SetPackageID(p.ID)
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (cvu *CertifyVexUpdate) SetArtifact(a *Artifact) *CertifyVexUpdate {
	return cvu.SetArtifactID(a.ID)
}

// SetVulnerability sets the "vulnerability" edge to the VulnerabilityID entity.
func (cvu *CertifyVexUpdate) SetVulnerability(v *VulnerabilityID) *CertifyVexUpdate {
	return cvu.SetVulnerabilityID(v.ID)
}

// SetCvssID sets the "cvss" edge to the CVSS entity by ID.
func (cvu *CertifyVexUpdate) SetCvssID(id uuid.UUID) *CertifyVexUpdate {
	cvu.mutation.SetCvssID(id)
	return cvu
}

// SetNillableCvssID sets the "cvss" edge to the CVSS entity by ID if the given value is not nil.
func (cvu *CertifyVexUpdate) SetNillableCvssID(id *uuid.UUID) *CertifyVexUpdate {
	if id != nil {
		cvu = cvu.SetCvssID(*id)
	}
	return cvu
}

// SetCvss sets the "cvss" edge to the CVSS entity.
func (cvu *CertifyVexUpdate) SetCvss(c *CVSS) *CertifyVexUpdate {
	return cvu.SetCvssID(c.ID)
}

// AddCweIDs adds the "cwe" edge to the CWE entity by IDs.
func (cvu *CertifyVexUpdate) AddCweIDs(ids ...uuid.UUID) *CertifyVexUpdate {
	cvu.mutation.AddCweIDs(ids...)
	return cvu
}

// AddCwe adds the "cwe" edges to the CWE entity.
func (cvu *CertifyVexUpdate) AddCwe(c ...*CWE) *CertifyVexUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cvu.AddCweIDs(ids...)
}

// AddExploitIDs adds the "exploit" edge to the Exploit entity by IDs.
func (cvu *CertifyVexUpdate) AddExploitIDs(ids ...uuid.UUID) *CertifyVexUpdate {
	cvu.mutation.AddExploitIDs(ids...)
	return cvu
}

// AddExploit adds the "exploit" edges to the Exploit entity.
func (cvu *CertifyVexUpdate) AddExploit(e ...*Exploit) *CertifyVexUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cvu.AddExploitIDs(ids...)
}

// AddReachableCodeIDs adds the "reachable_code" edge to the ReachableCode entity by IDs.
func (cvu *CertifyVexUpdate) AddReachableCodeIDs(ids ...uuid.UUID) *CertifyVexUpdate {
	cvu.mutation.AddReachableCodeIDs(ids...)
	return cvu
}

// AddReachableCode adds the "reachable_code" edges to the ReachableCode entity.
func (cvu *CertifyVexUpdate) AddReachableCode(r ...*ReachableCode) *CertifyVexUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cvu.AddReachableCodeIDs(ids...)
}

// Mutation returns the CertifyVexMutation object of the builder.
func (cvu *CertifyVexUpdate) Mutation() *CertifyVexMutation {
	return cvu.mutation
}

// ClearPackage clears the "package" edge to the PackageVersion entity.
func (cvu *CertifyVexUpdate) ClearPackage() *CertifyVexUpdate {
	cvu.mutation.ClearPackage()
	return cvu
}

// ClearArtifact clears the "artifact" edge to the Artifact entity.
func (cvu *CertifyVexUpdate) ClearArtifact() *CertifyVexUpdate {
	cvu.mutation.ClearArtifact()
	return cvu
}

// ClearVulnerability clears the "vulnerability" edge to the VulnerabilityID entity.
func (cvu *CertifyVexUpdate) ClearVulnerability() *CertifyVexUpdate {
	cvu.mutation.ClearVulnerability()
	return cvu
}

// ClearCvss clears the "cvss" edge to the CVSS entity.
func (cvu *CertifyVexUpdate) ClearCvss() *CertifyVexUpdate {
	cvu.mutation.ClearCvss()
	return cvu
}

// ClearCwe clears all "cwe" edges to the CWE entity.
func (cvu *CertifyVexUpdate) ClearCwe() *CertifyVexUpdate {
	cvu.mutation.ClearCwe()
	return cvu
}

// RemoveCweIDs removes the "cwe" edge to CWE entities by IDs.
func (cvu *CertifyVexUpdate) RemoveCweIDs(ids ...uuid.UUID) *CertifyVexUpdate {
	cvu.mutation.RemoveCweIDs(ids...)
	return cvu
}

// RemoveCwe removes "cwe" edges to CWE entities.
func (cvu *CertifyVexUpdate) RemoveCwe(c ...*CWE) *CertifyVexUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cvu.RemoveCweIDs(ids...)
}

// ClearExploit clears all "exploit" edges to the Exploit entity.
func (cvu *CertifyVexUpdate) ClearExploit() *CertifyVexUpdate {
	cvu.mutation.ClearExploit()
	return cvu
}

// RemoveExploitIDs removes the "exploit" edge to Exploit entities by IDs.
func (cvu *CertifyVexUpdate) RemoveExploitIDs(ids ...uuid.UUID) *CertifyVexUpdate {
	cvu.mutation.RemoveExploitIDs(ids...)
	return cvu
}

// RemoveExploit removes "exploit" edges to Exploit entities.
func (cvu *CertifyVexUpdate) RemoveExploit(e ...*Exploit) *CertifyVexUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cvu.RemoveExploitIDs(ids...)
}

// ClearReachableCode clears all "reachable_code" edges to the ReachableCode entity.
func (cvu *CertifyVexUpdate) ClearReachableCode() *CertifyVexUpdate {
	cvu.mutation.ClearReachableCode()
	return cvu
}

// RemoveReachableCodeIDs removes the "reachable_code" edge to ReachableCode entities by IDs.
func (cvu *CertifyVexUpdate) RemoveReachableCodeIDs(ids ...uuid.UUID) *CertifyVexUpdate {
	cvu.mutation.RemoveReachableCodeIDs(ids...)
	return cvu
}

// RemoveReachableCode removes "reachable_code" edges to ReachableCode entities.
func (cvu *CertifyVexUpdate) RemoveReachableCode(r ...*ReachableCode) *CertifyVexUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cvu.RemoveReachableCodeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cvu *CertifyVexUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cvu.sqlSave, cvu.mutation, cvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cvu *CertifyVexUpdate) SaveX(ctx context.Context) int {
	affected, err := cvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cvu *CertifyVexUpdate) Exec(ctx context.Context) error {
	_, err := cvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvu *CertifyVexUpdate) ExecX(ctx context.Context) {
	if err := cvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cvu *CertifyVexUpdate) check() error {
	if cvu.mutation.VulnerabilityCleared() && len(cvu.mutation.VulnerabilityIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CertifyVex.vulnerability"`)
	}
	return nil
}

func (cvu *CertifyVexUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cvu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(certifyvex.Table, certifyvex.Columns, sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID))
	if ps := cvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cvu.mutation.KnownSince(); ok {
		_spec.SetField(certifyvex.FieldKnownSince, field.TypeTime, value)
	}
	if value, ok := cvu.mutation.Status(); ok {
		_spec.SetField(certifyvex.FieldStatus, field.TypeString, value)
	}
	if value, ok := cvu.mutation.Statement(); ok {
		_spec.SetField(certifyvex.FieldStatement, field.TypeString, value)
	}
	if value, ok := cvu.mutation.StatusNotes(); ok {
		_spec.SetField(certifyvex.FieldStatusNotes, field.TypeString, value)
	}
	if value, ok := cvu.mutation.Justification(); ok {
		_spec.SetField(certifyvex.FieldJustification, field.TypeString, value)
	}
	if value, ok := cvu.mutation.Origin(); ok {
		_spec.SetField(certifyvex.FieldOrigin, field.TypeString, value)
	}
	if value, ok := cvu.mutation.Collector(); ok {
		_spec.SetField(certifyvex.FieldCollector, field.TypeString, value)
	}
	if value, ok := cvu.mutation.DocumentRef(); ok {
		_spec.SetField(certifyvex.FieldDocumentRef, field.TypeString, value)
	}
	if value, ok := cvu.mutation.Description(); ok {
		_spec.SetField(certifyvex.FieldDescription, field.TypeString, value)
	}
	if cvu.mutation.DescriptionCleared() {
		_spec.ClearField(certifyvex.FieldDescription, field.TypeString)
	}
	if value, ok := cvu.mutation.Priority(); ok {
		_spec.SetField(certifyvex.FieldPriority, field.TypeFloat64, value)
	}
	if value, ok := cvu.mutation.AddedPriority(); ok {
		_spec.AddField(certifyvex.FieldPriority, field.TypeFloat64, value)
	}
	if cvu.mutation.PriorityCleared() {
		_spec.ClearField(certifyvex.FieldPriority, field.TypeFloat64)
	}
	if cvu.mutation.PackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifyvex.PackageTable,
			Columns: []string{certifyvex.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvu.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifyvex.PackageTable,
			Columns: []string{certifyvex.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cvu.mutation.ArtifactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifyvex.ArtifactTable,
			Columns: []string{certifyvex.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvu.mutation.ArtifactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifyvex.ArtifactTable,
			Columns: []string{certifyvex.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cvu.mutation.VulnerabilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifyvex.VulnerabilityTable,
			Columns: []string{certifyvex.VulnerabilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvu.mutation.VulnerabilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifyvex.VulnerabilityTable,
			Columns: []string{certifyvex.VulnerabilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cvu.mutation.CvssCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifyvex.CvssTable,
			Columns: []string{certifyvex.CvssColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cvss.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvu.mutation.CvssIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifyvex.CvssTable,
			Columns: []string{certifyvex.CvssColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cvss.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cvu.mutation.CweCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifyvex.CweTable,
			Columns: certifyvex.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvu.mutation.RemovedCweIDs(); len(nodes) > 0 && !cvu.mutation.CweCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifyvex.CweTable,
			Columns: certifyvex.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvu.mutation.CweIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifyvex.CweTable,
			Columns: certifyvex.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cvu.mutation.ExploitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifyvex.ExploitTable,
			Columns: certifyvex.ExploitPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exploit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvu.mutation.RemovedExploitIDs(); len(nodes) > 0 && !cvu.mutation.ExploitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifyvex.ExploitTable,
			Columns: certifyvex.ExploitPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exploit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvu.mutation.ExploitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifyvex.ExploitTable,
			Columns: certifyvex.ExploitPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exploit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cvu.mutation.ReachableCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifyvex.ReachableCodeTable,
			Columns: certifyvex.ReachableCodePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reachablecode.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvu.mutation.RemovedReachableCodeIDs(); len(nodes) > 0 && !cvu.mutation.ReachableCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifyvex.ReachableCodeTable,
			Columns: certifyvex.ReachableCodePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reachablecode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvu.mutation.ReachableCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifyvex.ReachableCodeTable,
			Columns: certifyvex.ReachableCodePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reachablecode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{certifyvex.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cvu.mutation.done = true
	return n, nil
}

// CertifyVexUpdateOne is the builder for updating a single CertifyVex entity.
type CertifyVexUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CertifyVexMutation
}

// SetPackageID sets the "package_id" field.
func (cvuo *CertifyVexUpdateOne) SetPackageID(u uuid.UUID) *CertifyVexUpdateOne {
	cvuo.mutation.SetPackageID(u)
	return cvuo
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (cvuo *CertifyVexUpdateOne) SetNillablePackageID(u *uuid.UUID) *CertifyVexUpdateOne {
	if u != nil {
		cvuo.SetPackageID(*u)
	}
	return cvuo
}

// ClearPackageID clears the value of the "package_id" field.
func (cvuo *CertifyVexUpdateOne) ClearPackageID() *CertifyVexUpdateOne {
	cvuo.mutation.ClearPackageID()
	return cvuo
}

// SetArtifactID sets the "artifact_id" field.
func (cvuo *CertifyVexUpdateOne) SetArtifactID(u uuid.UUID) *CertifyVexUpdateOne {
	cvuo.mutation.SetArtifactID(u)
	return cvuo
}

// SetNillableArtifactID sets the "artifact_id" field if the given value is not nil.
func (cvuo *CertifyVexUpdateOne) SetNillableArtifactID(u *uuid.UUID) *CertifyVexUpdateOne {
	if u != nil {
		cvuo.SetArtifactID(*u)
	}
	return cvuo
}

// ClearArtifactID clears the value of the "artifact_id" field.
func (cvuo *CertifyVexUpdateOne) ClearArtifactID() *CertifyVexUpdateOne {
	cvuo.mutation.ClearArtifactID()
	return cvuo
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (cvuo *CertifyVexUpdateOne) SetVulnerabilityID(u uuid.UUID) *CertifyVexUpdateOne {
	cvuo.mutation.SetVulnerabilityID(u)
	return cvuo
}

// SetNillableVulnerabilityID sets the "vulnerability_id" field if the given value is not nil.
func (cvuo *CertifyVexUpdateOne) SetNillableVulnerabilityID(u *uuid.UUID) *CertifyVexUpdateOne {
	if u != nil {
		cvuo.SetVulnerabilityID(*u)
	}
	return cvuo
}

// SetKnownSince sets the "known_since" field.
func (cvuo *CertifyVexUpdateOne) SetKnownSince(t time.Time) *CertifyVexUpdateOne {
	cvuo.mutation.SetKnownSince(t)
	return cvuo
}

// SetNillableKnownSince sets the "known_since" field if the given value is not nil.
func (cvuo *CertifyVexUpdateOne) SetNillableKnownSince(t *time.Time) *CertifyVexUpdateOne {
	if t != nil {
		cvuo.SetKnownSince(*t)
	}
	return cvuo
}

// SetStatus sets the "status" field.
func (cvuo *CertifyVexUpdateOne) SetStatus(s string) *CertifyVexUpdateOne {
	cvuo.mutation.SetStatus(s)
	return cvuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cvuo *CertifyVexUpdateOne) SetNillableStatus(s *string) *CertifyVexUpdateOne {
	if s != nil {
		cvuo.SetStatus(*s)
	}
	return cvuo
}

// SetStatement sets the "statement" field.
func (cvuo *CertifyVexUpdateOne) SetStatement(s string) *CertifyVexUpdateOne {
	cvuo.mutation.SetStatement(s)
	return cvuo
}

// SetNillableStatement sets the "statement" field if the given value is not nil.
func (cvuo *CertifyVexUpdateOne) SetNillableStatement(s *string) *CertifyVexUpdateOne {
	if s != nil {
		cvuo.SetStatement(*s)
	}
	return cvuo
}

// SetStatusNotes sets the "status_notes" field.
func (cvuo *CertifyVexUpdateOne) SetStatusNotes(s string) *CertifyVexUpdateOne {
	cvuo.mutation.SetStatusNotes(s)
	return cvuo
}

// SetNillableStatusNotes sets the "status_notes" field if the given value is not nil.
func (cvuo *CertifyVexUpdateOne) SetNillableStatusNotes(s *string) *CertifyVexUpdateOne {
	if s != nil {
		cvuo.SetStatusNotes(*s)
	}
	return cvuo
}

// SetJustification sets the "justification" field.
func (cvuo *CertifyVexUpdateOne) SetJustification(s string) *CertifyVexUpdateOne {
	cvuo.mutation.SetJustification(s)
	return cvuo
}

// SetNillableJustification sets the "justification" field if the given value is not nil.
func (cvuo *CertifyVexUpdateOne) SetNillableJustification(s *string) *CertifyVexUpdateOne {
	if s != nil {
		cvuo.SetJustification(*s)
	}
	return cvuo
}

// SetOrigin sets the "origin" field.
func (cvuo *CertifyVexUpdateOne) SetOrigin(s string) *CertifyVexUpdateOne {
	cvuo.mutation.SetOrigin(s)
	return cvuo
}

// SetNillableOrigin sets the "origin" field if the given value is not nil.
func (cvuo *CertifyVexUpdateOne) SetNillableOrigin(s *string) *CertifyVexUpdateOne {
	if s != nil {
		cvuo.SetOrigin(*s)
	}
	return cvuo
}

// SetCollector sets the "collector" field.
func (cvuo *CertifyVexUpdateOne) SetCollector(s string) *CertifyVexUpdateOne {
	cvuo.mutation.SetCollector(s)
	return cvuo
}

// SetNillableCollector sets the "collector" field if the given value is not nil.
func (cvuo *CertifyVexUpdateOne) SetNillableCollector(s *string) *CertifyVexUpdateOne {
	if s != nil {
		cvuo.SetCollector(*s)
	}
	return cvuo
}

// SetDocumentRef sets the "document_ref" field.
func (cvuo *CertifyVexUpdateOne) SetDocumentRef(s string) *CertifyVexUpdateOne {
	cvuo.mutation.SetDocumentRef(s)
	return cvuo
}

// SetNillableDocumentRef sets the "document_ref" field if the given value is not nil.
func (cvuo *CertifyVexUpdateOne) SetNillableDocumentRef(s *string) *CertifyVexUpdateOne {
	if s != nil {
		cvuo.SetDocumentRef(*s)
	}
	return cvuo
}

// SetDescription sets the "description" field.
func (cvuo *CertifyVexUpdateOne) SetDescription(s string) *CertifyVexUpdateOne {
	cvuo.mutation.SetDescription(s)
	return cvuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cvuo *CertifyVexUpdateOne) SetNillableDescription(s *string) *CertifyVexUpdateOne {
	if s != nil {
		cvuo.SetDescription(*s)
	}
	return cvuo
}

// ClearDescription clears the value of the "description" field.
func (cvuo *CertifyVexUpdateOne) ClearDescription() *CertifyVexUpdateOne {
	cvuo.mutation.ClearDescription()
	return cvuo
}

// SetPriority sets the "priority" field.
func (cvuo *CertifyVexUpdateOne) SetPriority(f float64) *CertifyVexUpdateOne {
	cvuo.mutation.ResetPriority()
	cvuo.mutation.SetPriority(f)
	return cvuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (cvuo *CertifyVexUpdateOne) SetNillablePriority(f *float64) *CertifyVexUpdateOne {
	if f != nil {
		cvuo.SetPriority(*f)
	}
	return cvuo
}

// AddPriority adds f to the "priority" field.
func (cvuo *CertifyVexUpdateOne) AddPriority(f float64) *CertifyVexUpdateOne {
	cvuo.mutation.AddPriority(f)
	return cvuo
}

// ClearPriority clears the value of the "priority" field.
func (cvuo *CertifyVexUpdateOne) ClearPriority() *CertifyVexUpdateOne {
	cvuo.mutation.ClearPriority()
	return cvuo
}

// SetPackage sets the "package" edge to the PackageVersion entity.
func (cvuo *CertifyVexUpdateOne) SetPackage(p *PackageVersion) *CertifyVexUpdateOne {
	return cvuo.SetPackageID(p.ID)
}

// SetArtifact sets the "artifact" edge to the Artifact entity.
func (cvuo *CertifyVexUpdateOne) SetArtifact(a *Artifact) *CertifyVexUpdateOne {
	return cvuo.SetArtifactID(a.ID)
}

// SetVulnerability sets the "vulnerability" edge to the VulnerabilityID entity.
func (cvuo *CertifyVexUpdateOne) SetVulnerability(v *VulnerabilityID) *CertifyVexUpdateOne {
	return cvuo.SetVulnerabilityID(v.ID)
}

// SetCvssID sets the "cvss" edge to the CVSS entity by ID.
func (cvuo *CertifyVexUpdateOne) SetCvssID(id uuid.UUID) *CertifyVexUpdateOne {
	cvuo.mutation.SetCvssID(id)
	return cvuo
}

// SetNillableCvssID sets the "cvss" edge to the CVSS entity by ID if the given value is not nil.
func (cvuo *CertifyVexUpdateOne) SetNillableCvssID(id *uuid.UUID) *CertifyVexUpdateOne {
	if id != nil {
		cvuo = cvuo.SetCvssID(*id)
	}
	return cvuo
}

// SetCvss sets the "cvss" edge to the CVSS entity.
func (cvuo *CertifyVexUpdateOne) SetCvss(c *CVSS) *CertifyVexUpdateOne {
	return cvuo.SetCvssID(c.ID)
}

// AddCweIDs adds the "cwe" edge to the CWE entity by IDs.
func (cvuo *CertifyVexUpdateOne) AddCweIDs(ids ...uuid.UUID) *CertifyVexUpdateOne {
	cvuo.mutation.AddCweIDs(ids...)
	return cvuo
}

// AddCwe adds the "cwe" edges to the CWE entity.
func (cvuo *CertifyVexUpdateOne) AddCwe(c ...*CWE) *CertifyVexUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cvuo.AddCweIDs(ids...)
}

// AddExploitIDs adds the "exploit" edge to the Exploit entity by IDs.
func (cvuo *CertifyVexUpdateOne) AddExploitIDs(ids ...uuid.UUID) *CertifyVexUpdateOne {
	cvuo.mutation.AddExploitIDs(ids...)
	return cvuo
}

// AddExploit adds the "exploit" edges to the Exploit entity.
func (cvuo *CertifyVexUpdateOne) AddExploit(e ...*Exploit) *CertifyVexUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cvuo.AddExploitIDs(ids...)
}

// AddReachableCodeIDs adds the "reachable_code" edge to the ReachableCode entity by IDs.
func (cvuo *CertifyVexUpdateOne) AddReachableCodeIDs(ids ...uuid.UUID) *CertifyVexUpdateOne {
	cvuo.mutation.AddReachableCodeIDs(ids...)
	return cvuo
}

// AddReachableCode adds the "reachable_code" edges to the ReachableCode entity.
func (cvuo *CertifyVexUpdateOne) AddReachableCode(r ...*ReachableCode) *CertifyVexUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cvuo.AddReachableCodeIDs(ids...)
}

// Mutation returns the CertifyVexMutation object of the builder.
func (cvuo *CertifyVexUpdateOne) Mutation() *CertifyVexMutation {
	return cvuo.mutation
}

// ClearPackage clears the "package" edge to the PackageVersion entity.
func (cvuo *CertifyVexUpdateOne) ClearPackage() *CertifyVexUpdateOne {
	cvuo.mutation.ClearPackage()
	return cvuo
}

// ClearArtifact clears the "artifact" edge to the Artifact entity.
func (cvuo *CertifyVexUpdateOne) ClearArtifact() *CertifyVexUpdateOne {
	cvuo.mutation.ClearArtifact()
	return cvuo
}

// ClearVulnerability clears the "vulnerability" edge to the VulnerabilityID entity.
func (cvuo *CertifyVexUpdateOne) ClearVulnerability() *CertifyVexUpdateOne {
	cvuo.mutation.ClearVulnerability()
	return cvuo
}

// ClearCvss clears the "cvss" edge to the CVSS entity.
func (cvuo *CertifyVexUpdateOne) ClearCvss() *CertifyVexUpdateOne {
	cvuo.mutation.ClearCvss()
	return cvuo
}

// ClearCwe clears all "cwe" edges to the CWE entity.
func (cvuo *CertifyVexUpdateOne) ClearCwe() *CertifyVexUpdateOne {
	cvuo.mutation.ClearCwe()
	return cvuo
}

// RemoveCweIDs removes the "cwe" edge to CWE entities by IDs.
func (cvuo *CertifyVexUpdateOne) RemoveCweIDs(ids ...uuid.UUID) *CertifyVexUpdateOne {
	cvuo.mutation.RemoveCweIDs(ids...)
	return cvuo
}

// RemoveCwe removes "cwe" edges to CWE entities.
func (cvuo *CertifyVexUpdateOne) RemoveCwe(c ...*CWE) *CertifyVexUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cvuo.RemoveCweIDs(ids...)
}

// ClearExploit clears all "exploit" edges to the Exploit entity.
func (cvuo *CertifyVexUpdateOne) ClearExploit() *CertifyVexUpdateOne {
	cvuo.mutation.ClearExploit()
	return cvuo
}

// RemoveExploitIDs removes the "exploit" edge to Exploit entities by IDs.
func (cvuo *CertifyVexUpdateOne) RemoveExploitIDs(ids ...uuid.UUID) *CertifyVexUpdateOne {
	cvuo.mutation.RemoveExploitIDs(ids...)
	return cvuo
}

// RemoveExploit removes "exploit" edges to Exploit entities.
func (cvuo *CertifyVexUpdateOne) RemoveExploit(e ...*Exploit) *CertifyVexUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cvuo.RemoveExploitIDs(ids...)
}

// ClearReachableCode clears all "reachable_code" edges to the ReachableCode entity.
func (cvuo *CertifyVexUpdateOne) ClearReachableCode() *CertifyVexUpdateOne {
	cvuo.mutation.ClearReachableCode()
	return cvuo
}

// RemoveReachableCodeIDs removes the "reachable_code" edge to ReachableCode entities by IDs.
func (cvuo *CertifyVexUpdateOne) RemoveReachableCodeIDs(ids ...uuid.UUID) *CertifyVexUpdateOne {
	cvuo.mutation.RemoveReachableCodeIDs(ids...)
	return cvuo
}

// RemoveReachableCode removes "reachable_code" edges to ReachableCode entities.
func (cvuo *CertifyVexUpdateOne) RemoveReachableCode(r ...*ReachableCode) *CertifyVexUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cvuo.RemoveReachableCodeIDs(ids...)
}

// Where appends a list predicates to the CertifyVexUpdate builder.
func (cvuo *CertifyVexUpdateOne) Where(ps ...predicate.CertifyVex) *CertifyVexUpdateOne {
	cvuo.mutation.Where(ps...)
	return cvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cvuo *CertifyVexUpdateOne) Select(field string, fields ...string) *CertifyVexUpdateOne {
	cvuo.fields = append([]string{field}, fields...)
	return cvuo
}

// Save executes the query and returns the updated CertifyVex entity.
func (cvuo *CertifyVexUpdateOne) Save(ctx context.Context) (*CertifyVex, error) {
	return withHooks(ctx, cvuo.sqlSave, cvuo.mutation, cvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cvuo *CertifyVexUpdateOne) SaveX(ctx context.Context) *CertifyVex {
	node, err := cvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cvuo *CertifyVexUpdateOne) Exec(ctx context.Context) error {
	_, err := cvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cvuo *CertifyVexUpdateOne) ExecX(ctx context.Context) {
	if err := cvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cvuo *CertifyVexUpdateOne) check() error {
	if cvuo.mutation.VulnerabilityCleared() && len(cvuo.mutation.VulnerabilityIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CertifyVex.vulnerability"`)
	}
	return nil
}

func (cvuo *CertifyVexUpdateOne) sqlSave(ctx context.Context) (_node *CertifyVex, err error) {
	if err := cvuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(certifyvex.Table, certifyvex.Columns, sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID))
	id, ok := cvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CertifyVex.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, certifyvex.FieldID)
		for _, f := range fields {
			if !certifyvex.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != certifyvex.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cvuo.mutation.KnownSince(); ok {
		_spec.SetField(certifyvex.FieldKnownSince, field.TypeTime, value)
	}
	if value, ok := cvuo.mutation.Status(); ok {
		_spec.SetField(certifyvex.FieldStatus, field.TypeString, value)
	}
	if value, ok := cvuo.mutation.Statement(); ok {
		_spec.SetField(certifyvex.FieldStatement, field.TypeString, value)
	}
	if value, ok := cvuo.mutation.StatusNotes(); ok {
		_spec.SetField(certifyvex.FieldStatusNotes, field.TypeString, value)
	}
	if value, ok := cvuo.mutation.Justification(); ok {
		_spec.SetField(certifyvex.FieldJustification, field.TypeString, value)
	}
	if value, ok := cvuo.mutation.Origin(); ok {
		_spec.SetField(certifyvex.FieldOrigin, field.TypeString, value)
	}
	if value, ok := cvuo.mutation.Collector(); ok {
		_spec.SetField(certifyvex.FieldCollector, field.TypeString, value)
	}
	if value, ok := cvuo.mutation.DocumentRef(); ok {
		_spec.SetField(certifyvex.FieldDocumentRef, field.TypeString, value)
	}
	if value, ok := cvuo.mutation.Description(); ok {
		_spec.SetField(certifyvex.FieldDescription, field.TypeString, value)
	}
	if cvuo.mutation.DescriptionCleared() {
		_spec.ClearField(certifyvex.FieldDescription, field.TypeString)
	}
	if value, ok := cvuo.mutation.Priority(); ok {
		_spec.SetField(certifyvex.FieldPriority, field.TypeFloat64, value)
	}
	if value, ok := cvuo.mutation.AddedPriority(); ok {
		_spec.AddField(certifyvex.FieldPriority, field.TypeFloat64, value)
	}
	if cvuo.mutation.PriorityCleared() {
		_spec.ClearField(certifyvex.FieldPriority, field.TypeFloat64)
	}
	if cvuo.mutation.PackageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifyvex.PackageTable,
			Columns: []string{certifyvex.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvuo.mutation.PackageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifyvex.PackageTable,
			Columns: []string{certifyvex.PackageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packageversion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cvuo.mutation.ArtifactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifyvex.ArtifactTable,
			Columns: []string{certifyvex.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvuo.mutation.ArtifactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifyvex.ArtifactTable,
			Columns: []string{certifyvex.ArtifactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cvuo.mutation.VulnerabilityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifyvex.VulnerabilityTable,
			Columns: []string{certifyvex.VulnerabilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvuo.mutation.VulnerabilityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifyvex.VulnerabilityTable,
			Columns: []string{certifyvex.VulnerabilityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerabilityid.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cvuo.mutation.CvssCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifyvex.CvssTable,
			Columns: []string{certifyvex.CvssColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cvss.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvuo.mutation.CvssIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   certifyvex.CvssTable,
			Columns: []string{certifyvex.CvssColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cvss.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cvuo.mutation.CweCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifyvex.CweTable,
			Columns: certifyvex.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvuo.mutation.RemovedCweIDs(); len(nodes) > 0 && !cvuo.mutation.CweCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifyvex.CweTable,
			Columns: certifyvex.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvuo.mutation.CweIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifyvex.CweTable,
			Columns: certifyvex.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cvuo.mutation.ExploitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifyvex.ExploitTable,
			Columns: certifyvex.ExploitPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exploit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvuo.mutation.RemovedExploitIDs(); len(nodes) > 0 && !cvuo.mutation.ExploitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifyvex.ExploitTable,
			Columns: certifyvex.ExploitPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exploit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvuo.mutation.ExploitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifyvex.ExploitTable,
			Columns: certifyvex.ExploitPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exploit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cvuo.mutation.ReachableCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifyvex.ReachableCodeTable,
			Columns: certifyvex.ReachableCodePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reachablecode.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvuo.mutation.RemovedReachableCodeIDs(); len(nodes) > 0 && !cvuo.mutation.ReachableCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifyvex.ReachableCodeTable,
			Columns: certifyvex.ReachableCodePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reachablecode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cvuo.mutation.ReachableCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   certifyvex.ReachableCodeTable,
			Columns: certifyvex.ReachableCodePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reachablecode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CertifyVex{config: cvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{certifyvex.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cvuo.mutation.done = true
	return _node, nil
}
