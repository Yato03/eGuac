// Code generated by ent, DO NOT EDIT.

package reachablecodeartifact

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the reachablecodeartifact type in the database.
	Label = "reachable_code_artifact"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldArtifactName holds the string denoting the artifact_name field in the database.
	FieldArtifactName = "artifact_name"
	// FieldUsedInLines holds the string denoting the used_in_lines field in the database.
	FieldUsedInLines = "used_in_lines"
	// EdgeReachableCode holds the string denoting the reachable_code edge name in mutations.
	EdgeReachableCode = "reachable_code"
	// Table holds the table name of the reachablecodeartifact in the database.
	Table = "reachable_code_artifacts"
	// ReachableCodeTable is the table that holds the reachable_code relation/edge. The primary key declared below.
	ReachableCodeTable = "reachable_code_reachable_code_artifact"
	// ReachableCodeInverseTable is the table name for the ReachableCode entity.
	// It exists in this package in order to avoid circular dependency with the "reachablecode" package.
	ReachableCodeInverseTable = "reachable_codes"
)

// Columns holds all SQL columns for reachablecodeartifact fields.
var Columns = []string{
	FieldID,
	FieldArtifactName,
	FieldUsedInLines,
}

var (
	// ReachableCodePrimaryKey and ReachableCodeColumn2 are the table columns denoting the
	// primary key for the reachable_code relation (M2M).
	ReachableCodePrimaryKey = []string{"reachable_code_id", "reachable_code_artifact_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ReachableCodeArtifact queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByArtifactName orders the results by the artifact_name field.
func ByArtifactName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArtifactName, opts...).ToFunc()
}

// ByUsedInLines orders the results by the used_in_lines field.
func ByUsedInLines(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsedInLines, opts...).ToFunc()
}

// ByReachableCodeCount orders the results by reachable_code count.
func ByReachableCodeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReachableCodeStep(), opts...)
	}
}

// ByReachableCode orders the results by reachable_code terms.
func ByReachableCode(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReachableCodeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newReachableCodeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReachableCodeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ReachableCodeTable, ReachableCodePrimaryKey...),
	)
}
