// Code generated by ent, DO NOT EDIT.

package reachablecodeartifact

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldLTE(FieldID, id))
}

// ArtifactName applies equality check predicate on the "artifact_name" field. It's identical to ArtifactNameEQ.
func ArtifactName(v string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldEQ(FieldArtifactName, v))
}

// UsedInLines applies equality check predicate on the "used_in_lines" field. It's identical to UsedInLinesEQ.
func UsedInLines(v string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldEQ(FieldUsedInLines, v))
}

// ArtifactNameEQ applies the EQ predicate on the "artifact_name" field.
func ArtifactNameEQ(v string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldEQ(FieldArtifactName, v))
}

// ArtifactNameNEQ applies the NEQ predicate on the "artifact_name" field.
func ArtifactNameNEQ(v string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldNEQ(FieldArtifactName, v))
}

// ArtifactNameIn applies the In predicate on the "artifact_name" field.
func ArtifactNameIn(vs ...string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldIn(FieldArtifactName, vs...))
}

// ArtifactNameNotIn applies the NotIn predicate on the "artifact_name" field.
func ArtifactNameNotIn(vs ...string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldNotIn(FieldArtifactName, vs...))
}

// ArtifactNameGT applies the GT predicate on the "artifact_name" field.
func ArtifactNameGT(v string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldGT(FieldArtifactName, v))
}

// ArtifactNameGTE applies the GTE predicate on the "artifact_name" field.
func ArtifactNameGTE(v string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldGTE(FieldArtifactName, v))
}

// ArtifactNameLT applies the LT predicate on the "artifact_name" field.
func ArtifactNameLT(v string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldLT(FieldArtifactName, v))
}

// ArtifactNameLTE applies the LTE predicate on the "artifact_name" field.
func ArtifactNameLTE(v string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldLTE(FieldArtifactName, v))
}

// ArtifactNameContains applies the Contains predicate on the "artifact_name" field.
func ArtifactNameContains(v string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldContains(FieldArtifactName, v))
}

// ArtifactNameHasPrefix applies the HasPrefix predicate on the "artifact_name" field.
func ArtifactNameHasPrefix(v string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldHasPrefix(FieldArtifactName, v))
}

// ArtifactNameHasSuffix applies the HasSuffix predicate on the "artifact_name" field.
func ArtifactNameHasSuffix(v string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldHasSuffix(FieldArtifactName, v))
}

// ArtifactNameIsNil applies the IsNil predicate on the "artifact_name" field.
func ArtifactNameIsNil() predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldIsNull(FieldArtifactName))
}

// ArtifactNameNotNil applies the NotNil predicate on the "artifact_name" field.
func ArtifactNameNotNil() predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldNotNull(FieldArtifactName))
}

// ArtifactNameEqualFold applies the EqualFold predicate on the "artifact_name" field.
func ArtifactNameEqualFold(v string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldEqualFold(FieldArtifactName, v))
}

// ArtifactNameContainsFold applies the ContainsFold predicate on the "artifact_name" field.
func ArtifactNameContainsFold(v string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldContainsFold(FieldArtifactName, v))
}

// UsedInLinesEQ applies the EQ predicate on the "used_in_lines" field.
func UsedInLinesEQ(v string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldEQ(FieldUsedInLines, v))
}

// UsedInLinesNEQ applies the NEQ predicate on the "used_in_lines" field.
func UsedInLinesNEQ(v string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldNEQ(FieldUsedInLines, v))
}

// UsedInLinesIn applies the In predicate on the "used_in_lines" field.
func UsedInLinesIn(vs ...string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldIn(FieldUsedInLines, vs...))
}

// UsedInLinesNotIn applies the NotIn predicate on the "used_in_lines" field.
func UsedInLinesNotIn(vs ...string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldNotIn(FieldUsedInLines, vs...))
}

// UsedInLinesGT applies the GT predicate on the "used_in_lines" field.
func UsedInLinesGT(v string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldGT(FieldUsedInLines, v))
}

// UsedInLinesGTE applies the GTE predicate on the "used_in_lines" field.
func UsedInLinesGTE(v string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldGTE(FieldUsedInLines, v))
}

// UsedInLinesLT applies the LT predicate on the "used_in_lines" field.
func UsedInLinesLT(v string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldLT(FieldUsedInLines, v))
}

// UsedInLinesLTE applies the LTE predicate on the "used_in_lines" field.
func UsedInLinesLTE(v string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldLTE(FieldUsedInLines, v))
}

// UsedInLinesContains applies the Contains predicate on the "used_in_lines" field.
func UsedInLinesContains(v string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldContains(FieldUsedInLines, v))
}

// UsedInLinesHasPrefix applies the HasPrefix predicate on the "used_in_lines" field.
func UsedInLinesHasPrefix(v string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldHasPrefix(FieldUsedInLines, v))
}

// UsedInLinesHasSuffix applies the HasSuffix predicate on the "used_in_lines" field.
func UsedInLinesHasSuffix(v string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldHasSuffix(FieldUsedInLines, v))
}

// UsedInLinesIsNil applies the IsNil predicate on the "used_in_lines" field.
func UsedInLinesIsNil() predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldIsNull(FieldUsedInLines))
}

// UsedInLinesNotNil applies the NotNil predicate on the "used_in_lines" field.
func UsedInLinesNotNil() predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldNotNull(FieldUsedInLines))
}

// UsedInLinesEqualFold applies the EqualFold predicate on the "used_in_lines" field.
func UsedInLinesEqualFold(v string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldEqualFold(FieldUsedInLines, v))
}

// UsedInLinesContainsFold applies the ContainsFold predicate on the "used_in_lines" field.
func UsedInLinesContainsFold(v string) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.FieldContainsFold(FieldUsedInLines, v))
}

// HasReachableCode applies the HasEdge predicate on the "reachable_code" edge.
func HasReachableCode() predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ReachableCodeTable, ReachableCodePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReachableCodeWith applies the HasEdge predicate on the "reachable_code" edge with a given conditions (other predicates).
func HasReachableCodeWith(preds ...predicate.ReachableCode) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(func(s *sql.Selector) {
		step := newReachableCodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ReachableCodeArtifact) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ReachableCodeArtifact) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ReachableCodeArtifact) predicate.ReachableCodeArtifact {
	return predicate.ReachableCodeArtifact(sql.NotPredicates(p))
}
