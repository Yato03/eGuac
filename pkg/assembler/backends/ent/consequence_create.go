// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/consequence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/consequence_impact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/consequence_scope"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/cwe"
)

// ConsequenceCreate is the builder for creating a Consequence entity.
type ConsequenceCreate struct {
	config
	mutation *ConsequenceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNotes sets the "notes" field.
func (cc *ConsequenceCreate) SetNotes(s string) *ConsequenceCreate {
	cc.mutation.SetNotes(s)
	return cc
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (cc *ConsequenceCreate) SetNillableNotes(s *string) *ConsequenceCreate {
	if s != nil {
		cc.SetNotes(*s)
	}
	return cc
}

// SetLikelihood sets the "likelihood" field.
func (cc *ConsequenceCreate) SetLikelihood(s string) *ConsequenceCreate {
	cc.mutation.SetLikelihood(s)
	return cc
}

// SetNillableLikelihood sets the "likelihood" field if the given value is not nil.
func (cc *ConsequenceCreate) SetNillableLikelihood(s *string) *ConsequenceCreate {
	if s != nil {
		cc.SetLikelihood(*s)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ConsequenceCreate) SetID(u uuid.UUID) *ConsequenceCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *ConsequenceCreate) SetNillableID(u *uuid.UUID) *ConsequenceCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// AddCweIDs adds the "cwe" edge to the CWE entity by IDs.
func (cc *ConsequenceCreate) AddCweIDs(ids ...uuid.UUID) *ConsequenceCreate {
	cc.mutation.AddCweIDs(ids...)
	return cc
}

// AddCwe adds the "cwe" edges to the CWE entity.
func (cc *ConsequenceCreate) AddCwe(c ...*CWE) *ConsequenceCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddCweIDs(ids...)
}

// AddConsequenceScopeIDs adds the "consequence_scope" edge to the Consequence_Scope entity by IDs.
func (cc *ConsequenceCreate) AddConsequenceScopeIDs(ids ...uuid.UUID) *ConsequenceCreate {
	cc.mutation.AddConsequenceScopeIDs(ids...)
	return cc
}

// AddConsequenceScope adds the "consequence_scope" edges to the Consequence_Scope entity.
func (cc *ConsequenceCreate) AddConsequenceScope(c ...*Consequence_Scope) *ConsequenceCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddConsequenceScopeIDs(ids...)
}

// AddConsequenceImpactIDs adds the "consequence_impact" edge to the Consequence_Impact entity by IDs.
func (cc *ConsequenceCreate) AddConsequenceImpactIDs(ids ...uuid.UUID) *ConsequenceCreate {
	cc.mutation.AddConsequenceImpactIDs(ids...)
	return cc
}

// AddConsequenceImpact adds the "consequence_impact" edges to the Consequence_Impact entity.
func (cc *ConsequenceCreate) AddConsequenceImpact(c ...*Consequence_Impact) *ConsequenceCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddConsequenceImpactIDs(ids...)
}

// Mutation returns the ConsequenceMutation object of the builder.
func (cc *ConsequenceCreate) Mutation() *ConsequenceMutation {
	return cc.mutation
}

// Save creates the Consequence in the database.
func (cc *ConsequenceCreate) Save(ctx context.Context) (*Consequence, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ConsequenceCreate) SaveX(ctx context.Context) *Consequence {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ConsequenceCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ConsequenceCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ConsequenceCreate) defaults() {
	if _, ok := cc.mutation.ID(); !ok {
		v := consequence.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ConsequenceCreate) check() error {
	return nil
}

func (cc *ConsequenceCreate) sqlSave(ctx context.Context) (*Consequence, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ConsequenceCreate) createSpec() (*Consequence, *sqlgraph.CreateSpec) {
	var (
		_node = &Consequence{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(consequence.Table, sqlgraph.NewFieldSpec(consequence.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.Notes(); ok {
		_spec.SetField(consequence.FieldNotes, field.TypeString, value)
		_node.Notes = &value
	}
	if value, ok := cc.mutation.Likelihood(); ok {
		_spec.SetField(consequence.FieldLikelihood, field.TypeString, value)
		_node.Likelihood = &value
	}
	if nodes := cc.mutation.CweIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consequence.CweTable,
			Columns: consequence.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ConsequenceScopeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   consequence.ConsequenceScopeTable,
			Columns: consequence.ConsequenceScopePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence_scope.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ConsequenceImpactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   consequence.ConsequenceImpactTable,
			Columns: consequence.ConsequenceImpactPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence_impact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Consequence.Create().
//		SetNotes(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ConsequenceUpsert) {
//			SetNotes(v+v).
//		}).
//		Exec(ctx)
func (cc *ConsequenceCreate) OnConflict(opts ...sql.ConflictOption) *ConsequenceUpsertOne {
	cc.conflict = opts
	return &ConsequenceUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Consequence.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ConsequenceCreate) OnConflictColumns(columns ...string) *ConsequenceUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ConsequenceUpsertOne{
		create: cc,
	}
}

type (
	// ConsequenceUpsertOne is the builder for "upsert"-ing
	//  one Consequence node.
	ConsequenceUpsertOne struct {
		create *ConsequenceCreate
	}

	// ConsequenceUpsert is the "OnConflict" setter.
	ConsequenceUpsert struct {
		*sql.UpdateSet
	}
)

// SetNotes sets the "notes" field.
func (u *ConsequenceUpsert) SetNotes(v string) *ConsequenceUpsert {
	u.Set(consequence.FieldNotes, v)
	return u
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *ConsequenceUpsert) UpdateNotes() *ConsequenceUpsert {
	u.SetExcluded(consequence.FieldNotes)
	return u
}

// ClearNotes clears the value of the "notes" field.
func (u *ConsequenceUpsert) ClearNotes() *ConsequenceUpsert {
	u.SetNull(consequence.FieldNotes)
	return u
}

// SetLikelihood sets the "likelihood" field.
func (u *ConsequenceUpsert) SetLikelihood(v string) *ConsequenceUpsert {
	u.Set(consequence.FieldLikelihood, v)
	return u
}

// UpdateLikelihood sets the "likelihood" field to the value that was provided on create.
func (u *ConsequenceUpsert) UpdateLikelihood() *ConsequenceUpsert {
	u.SetExcluded(consequence.FieldLikelihood)
	return u
}

// ClearLikelihood clears the value of the "likelihood" field.
func (u *ConsequenceUpsert) ClearLikelihood() *ConsequenceUpsert {
	u.SetNull(consequence.FieldLikelihood)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Consequence.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(consequence.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ConsequenceUpsertOne) UpdateNewValues() *ConsequenceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(consequence.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Consequence.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ConsequenceUpsertOne) Ignore() *ConsequenceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ConsequenceUpsertOne) DoNothing() *ConsequenceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConsequenceCreate.OnConflict
// documentation for more info.
func (u *ConsequenceUpsertOne) Update(set func(*ConsequenceUpsert)) *ConsequenceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ConsequenceUpsert{UpdateSet: update})
	}))
	return u
}

// SetNotes sets the "notes" field.
func (u *ConsequenceUpsertOne) SetNotes(v string) *ConsequenceUpsertOne {
	return u.Update(func(s *ConsequenceUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *ConsequenceUpsertOne) UpdateNotes() *ConsequenceUpsertOne {
	return u.Update(func(s *ConsequenceUpsert) {
		s.UpdateNotes()
	})
}

// ClearNotes clears the value of the "notes" field.
func (u *ConsequenceUpsertOne) ClearNotes() *ConsequenceUpsertOne {
	return u.Update(func(s *ConsequenceUpsert) {
		s.ClearNotes()
	})
}

// SetLikelihood sets the "likelihood" field.
func (u *ConsequenceUpsertOne) SetLikelihood(v string) *ConsequenceUpsertOne {
	return u.Update(func(s *ConsequenceUpsert) {
		s.SetLikelihood(v)
	})
}

// UpdateLikelihood sets the "likelihood" field to the value that was provided on create.
func (u *ConsequenceUpsertOne) UpdateLikelihood() *ConsequenceUpsertOne {
	return u.Update(func(s *ConsequenceUpsert) {
		s.UpdateLikelihood()
	})
}

// ClearLikelihood clears the value of the "likelihood" field.
func (u *ConsequenceUpsertOne) ClearLikelihood() *ConsequenceUpsertOne {
	return u.Update(func(s *ConsequenceUpsert) {
		s.ClearLikelihood()
	})
}

// Exec executes the query.
func (u *ConsequenceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ConsequenceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ConsequenceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ConsequenceUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ConsequenceUpsertOne.ID is not supported by MySQL driver. Use ConsequenceUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ConsequenceUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ConsequenceCreateBulk is the builder for creating many Consequence entities in bulk.
type ConsequenceCreateBulk struct {
	config
	err      error
	builders []*ConsequenceCreate
	conflict []sql.ConflictOption
}

// Save creates the Consequence entities in the database.
func (ccb *ConsequenceCreateBulk) Save(ctx context.Context) ([]*Consequence, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Consequence, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConsequenceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ConsequenceCreateBulk) SaveX(ctx context.Context) []*Consequence {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ConsequenceCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ConsequenceCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Consequence.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ConsequenceUpsert) {
//			SetNotes(v+v).
//		}).
//		Exec(ctx)
func (ccb *ConsequenceCreateBulk) OnConflict(opts ...sql.ConflictOption) *ConsequenceUpsertBulk {
	ccb.conflict = opts
	return &ConsequenceUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Consequence.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ConsequenceCreateBulk) OnConflictColumns(columns ...string) *ConsequenceUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ConsequenceUpsertBulk{
		create: ccb,
	}
}

// ConsequenceUpsertBulk is the builder for "upsert"-ing
// a bulk of Consequence nodes.
type ConsequenceUpsertBulk struct {
	create *ConsequenceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Consequence.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(consequence.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ConsequenceUpsertBulk) UpdateNewValues() *ConsequenceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(consequence.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Consequence.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ConsequenceUpsertBulk) Ignore() *ConsequenceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ConsequenceUpsertBulk) DoNothing() *ConsequenceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConsequenceCreateBulk.OnConflict
// documentation for more info.
func (u *ConsequenceUpsertBulk) Update(set func(*ConsequenceUpsert)) *ConsequenceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ConsequenceUpsert{UpdateSet: update})
	}))
	return u
}

// SetNotes sets the "notes" field.
func (u *ConsequenceUpsertBulk) SetNotes(v string) *ConsequenceUpsertBulk {
	return u.Update(func(s *ConsequenceUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *ConsequenceUpsertBulk) UpdateNotes() *ConsequenceUpsertBulk {
	return u.Update(func(s *ConsequenceUpsert) {
		s.UpdateNotes()
	})
}

// ClearNotes clears the value of the "notes" field.
func (u *ConsequenceUpsertBulk) ClearNotes() *ConsequenceUpsertBulk {
	return u.Update(func(s *ConsequenceUpsert) {
		s.ClearNotes()
	})
}

// SetLikelihood sets the "likelihood" field.
func (u *ConsequenceUpsertBulk) SetLikelihood(v string) *ConsequenceUpsertBulk {
	return u.Update(func(s *ConsequenceUpsert) {
		s.SetLikelihood(v)
	})
}

// UpdateLikelihood sets the "likelihood" field to the value that was provided on create.
func (u *ConsequenceUpsertBulk) UpdateLikelihood() *ConsequenceUpsertBulk {
	return u.Update(func(s *ConsequenceUpsert) {
		s.UpdateLikelihood()
	})
}

// ClearLikelihood clears the value of the "likelihood" field.
func (u *ConsequenceUpsertBulk) ClearLikelihood() *ConsequenceUpsertBulk {
	return u.Update(func(s *ConsequenceUpsert) {
		s.ClearLikelihood()
	})
}

// Exec executes the query.
func (u *ConsequenceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ConsequenceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ConsequenceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ConsequenceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
