// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyvex"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/consequence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/cwe"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/demonstrativeexample"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/detectionmethod"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/potentialmitigation"
)

// CWECreate is the builder for creating a CWE entity.
type CWECreate struct {
	config
	mutation *CWEMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetVexID sets the "vex_id" field.
func (cc *CWECreate) SetVexID(s string) *CWECreate {
	cc.mutation.SetVexID(s)
	return cc
}

// SetName sets the "name" field.
func (cc *CWECreate) SetName(s string) *CWECreate {
	cc.mutation.SetName(s)
	return cc
}

// SetDescription sets the "description" field.
func (cc *CWECreate) SetDescription(s string) *CWECreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetBackgroundDetail sets the "background_detail" field.
func (cc *CWECreate) SetBackgroundDetail(s string) *CWECreate {
	cc.mutation.SetBackgroundDetail(s)
	return cc
}

// SetNillableBackgroundDetail sets the "background_detail" field if the given value is not nil.
func (cc *CWECreate) SetNillableBackgroundDetail(s *string) *CWECreate {
	if s != nil {
		cc.SetBackgroundDetail(*s)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CWECreate) SetID(u uuid.UUID) *CWECreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CWECreate) SetNillableID(u *uuid.UUID) *CWECreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// AddCertifyVexIDs adds the "certify_vex" edge to the CertifyVex entity by IDs.
func (cc *CWECreate) AddCertifyVexIDs(ids ...uuid.UUID) *CWECreate {
	cc.mutation.AddCertifyVexIDs(ids...)
	return cc
}

// AddCertifyVex adds the "certify_vex" edges to the CertifyVex entity.
func (cc *CWECreate) AddCertifyVex(c ...*CertifyVex) *CWECreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddCertifyVexIDs(ids...)
}

// AddConsequenceIDs adds the "consequence" edge to the Consequence entity by IDs.
func (cc *CWECreate) AddConsequenceIDs(ids ...uuid.UUID) *CWECreate {
	cc.mutation.AddConsequenceIDs(ids...)
	return cc
}

// AddConsequence adds the "consequence" edges to the Consequence entity.
func (cc *CWECreate) AddConsequence(c ...*Consequence) *CWECreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddConsequenceIDs(ids...)
}

// AddDemonstrativeExampleIDs adds the "demonstrative_example" edge to the DemonstrativeExample entity by IDs.
func (cc *CWECreate) AddDemonstrativeExampleIDs(ids ...uuid.UUID) *CWECreate {
	cc.mutation.AddDemonstrativeExampleIDs(ids...)
	return cc
}

// AddDemonstrativeExample adds the "demonstrative_example" edges to the DemonstrativeExample entity.
func (cc *CWECreate) AddDemonstrativeExample(d ...*DemonstrativeExample) *CWECreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cc.AddDemonstrativeExampleIDs(ids...)
}

// AddDetectionMethodIDs adds the "detection_method" edge to the DetectionMethod entity by IDs.
func (cc *CWECreate) AddDetectionMethodIDs(ids ...uuid.UUID) *CWECreate {
	cc.mutation.AddDetectionMethodIDs(ids...)
	return cc
}

// AddDetectionMethod adds the "detection_method" edges to the DetectionMethod entity.
func (cc *CWECreate) AddDetectionMethod(d ...*DetectionMethod) *CWECreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cc.AddDetectionMethodIDs(ids...)
}

// AddPotentialMitigationIDs adds the "potential_mitigation" edge to the PotentialMitigation entity by IDs.
func (cc *CWECreate) AddPotentialMitigationIDs(ids ...uuid.UUID) *CWECreate {
	cc.mutation.AddPotentialMitigationIDs(ids...)
	return cc
}

// AddPotentialMitigation adds the "potential_mitigation" edges to the PotentialMitigation entity.
func (cc *CWECreate) AddPotentialMitigation(p ...*PotentialMitigation) *CWECreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cc.AddPotentialMitigationIDs(ids...)
}

// Mutation returns the CWEMutation object of the builder.
func (cc *CWECreate) Mutation() *CWEMutation {
	return cc.mutation
}

// Save creates the CWE in the database.
func (cc *CWECreate) Save(ctx context.Context) (*CWE, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CWECreate) SaveX(ctx context.Context) *CWE {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CWECreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CWECreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CWECreate) defaults() {
	if _, ok := cc.mutation.ID(); !ok {
		v := cwe.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CWECreate) check() error {
	if _, ok := cc.mutation.VexID(); !ok {
		return &ValidationError{Name: "vex_id", err: errors.New(`ent: missing required field "CWE.vex_id"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CWE.name"`)}
	}
	if _, ok := cc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "CWE.description"`)}
	}
	return nil
}

func (cc *CWECreate) sqlSave(ctx context.Context) (*CWE, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CWECreate) createSpec() (*CWE, *sqlgraph.CreateSpec) {
	var (
		_node = &CWE{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(cwe.Table, sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.VexID(); ok {
		_spec.SetField(cwe.FieldVexID, field.TypeString, value)
		_node.VexID = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(cwe.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(cwe.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cc.mutation.BackgroundDetail(); ok {
		_spec.SetField(cwe.FieldBackgroundDetail, field.TypeString, value)
		_node.BackgroundDetail = &value
	}
	if nodes := cc.mutation.CertifyVexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   cwe.CertifyVexTable,
			Columns: cwe.CertifyVexPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ConsequenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.ConsequenceTable,
			Columns: cwe.ConsequencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DemonstrativeExampleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.DemonstrativeExampleTable,
			Columns: cwe.DemonstrativeExamplePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(demonstrativeexample.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DetectionMethodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.DetectionMethodTable,
			Columns: cwe.DetectionMethodPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(detectionmethod.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.PotentialMitigationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.PotentialMitigationTable,
			Columns: cwe.PotentialMitigationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(potentialmitigation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CWE.Create().
//		SetVexID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CWEUpsert) {
//			SetVexID(v+v).
//		}).
//		Exec(ctx)
func (cc *CWECreate) OnConflict(opts ...sql.ConflictOption) *CWEUpsertOne {
	cc.conflict = opts
	return &CWEUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CWE.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CWECreate) OnConflictColumns(columns ...string) *CWEUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CWEUpsertOne{
		create: cc,
	}
}

type (
	// CWEUpsertOne is the builder for "upsert"-ing
	//  one CWE node.
	CWEUpsertOne struct {
		create *CWECreate
	}

	// CWEUpsert is the "OnConflict" setter.
	CWEUpsert struct {
		*sql.UpdateSet
	}
)

// SetVexID sets the "vex_id" field.
func (u *CWEUpsert) SetVexID(v string) *CWEUpsert {
	u.Set(cwe.FieldVexID, v)
	return u
}

// UpdateVexID sets the "vex_id" field to the value that was provided on create.
func (u *CWEUpsert) UpdateVexID() *CWEUpsert {
	u.SetExcluded(cwe.FieldVexID)
	return u
}

// SetName sets the "name" field.
func (u *CWEUpsert) SetName(v string) *CWEUpsert {
	u.Set(cwe.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CWEUpsert) UpdateName() *CWEUpsert {
	u.SetExcluded(cwe.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *CWEUpsert) SetDescription(v string) *CWEUpsert {
	u.Set(cwe.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CWEUpsert) UpdateDescription() *CWEUpsert {
	u.SetExcluded(cwe.FieldDescription)
	return u
}

// SetBackgroundDetail sets the "background_detail" field.
func (u *CWEUpsert) SetBackgroundDetail(v string) *CWEUpsert {
	u.Set(cwe.FieldBackgroundDetail, v)
	return u
}

// UpdateBackgroundDetail sets the "background_detail" field to the value that was provided on create.
func (u *CWEUpsert) UpdateBackgroundDetail() *CWEUpsert {
	u.SetExcluded(cwe.FieldBackgroundDetail)
	return u
}

// ClearBackgroundDetail clears the value of the "background_detail" field.
func (u *CWEUpsert) ClearBackgroundDetail() *CWEUpsert {
	u.SetNull(cwe.FieldBackgroundDetail)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CWE.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(cwe.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CWEUpsertOne) UpdateNewValues() *CWEUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(cwe.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CWE.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CWEUpsertOne) Ignore() *CWEUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CWEUpsertOne) DoNothing() *CWEUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CWECreate.OnConflict
// documentation for more info.
func (u *CWEUpsertOne) Update(set func(*CWEUpsert)) *CWEUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CWEUpsert{UpdateSet: update})
	}))
	return u
}

// SetVexID sets the "vex_id" field.
func (u *CWEUpsertOne) SetVexID(v string) *CWEUpsertOne {
	return u.Update(func(s *CWEUpsert) {
		s.SetVexID(v)
	})
}

// UpdateVexID sets the "vex_id" field to the value that was provided on create.
func (u *CWEUpsertOne) UpdateVexID() *CWEUpsertOne {
	return u.Update(func(s *CWEUpsert) {
		s.UpdateVexID()
	})
}

// SetName sets the "name" field.
func (u *CWEUpsertOne) SetName(v string) *CWEUpsertOne {
	return u.Update(func(s *CWEUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CWEUpsertOne) UpdateName() *CWEUpsertOne {
	return u.Update(func(s *CWEUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *CWEUpsertOne) SetDescription(v string) *CWEUpsertOne {
	return u.Update(func(s *CWEUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CWEUpsertOne) UpdateDescription() *CWEUpsertOne {
	return u.Update(func(s *CWEUpsert) {
		s.UpdateDescription()
	})
}

// SetBackgroundDetail sets the "background_detail" field.
func (u *CWEUpsertOne) SetBackgroundDetail(v string) *CWEUpsertOne {
	return u.Update(func(s *CWEUpsert) {
		s.SetBackgroundDetail(v)
	})
}

// UpdateBackgroundDetail sets the "background_detail" field to the value that was provided on create.
func (u *CWEUpsertOne) UpdateBackgroundDetail() *CWEUpsertOne {
	return u.Update(func(s *CWEUpsert) {
		s.UpdateBackgroundDetail()
	})
}

// ClearBackgroundDetail clears the value of the "background_detail" field.
func (u *CWEUpsertOne) ClearBackgroundDetail() *CWEUpsertOne {
	return u.Update(func(s *CWEUpsert) {
		s.ClearBackgroundDetail()
	})
}

// Exec executes the query.
func (u *CWEUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CWECreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CWEUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CWEUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CWEUpsertOne.ID is not supported by MySQL driver. Use CWEUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CWEUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CWECreateBulk is the builder for creating many CWE entities in bulk.
type CWECreateBulk struct {
	config
	err      error
	builders []*CWECreate
	conflict []sql.ConflictOption
}

// Save creates the CWE entities in the database.
func (ccb *CWECreateBulk) Save(ctx context.Context) ([]*CWE, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*CWE, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CWEMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CWECreateBulk) SaveX(ctx context.Context) []*CWE {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CWECreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CWECreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CWE.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CWEUpsert) {
//			SetVexID(v+v).
//		}).
//		Exec(ctx)
func (ccb *CWECreateBulk) OnConflict(opts ...sql.ConflictOption) *CWEUpsertBulk {
	ccb.conflict = opts
	return &CWEUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CWE.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CWECreateBulk) OnConflictColumns(columns ...string) *CWEUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CWEUpsertBulk{
		create: ccb,
	}
}

// CWEUpsertBulk is the builder for "upsert"-ing
// a bulk of CWE nodes.
type CWEUpsertBulk struct {
	create *CWECreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CWE.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(cwe.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CWEUpsertBulk) UpdateNewValues() *CWEUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(cwe.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CWE.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CWEUpsertBulk) Ignore() *CWEUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CWEUpsertBulk) DoNothing() *CWEUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CWECreateBulk.OnConflict
// documentation for more info.
func (u *CWEUpsertBulk) Update(set func(*CWEUpsert)) *CWEUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CWEUpsert{UpdateSet: update})
	}))
	return u
}

// SetVexID sets the "vex_id" field.
func (u *CWEUpsertBulk) SetVexID(v string) *CWEUpsertBulk {
	return u.Update(func(s *CWEUpsert) {
		s.SetVexID(v)
	})
}

// UpdateVexID sets the "vex_id" field to the value that was provided on create.
func (u *CWEUpsertBulk) UpdateVexID() *CWEUpsertBulk {
	return u.Update(func(s *CWEUpsert) {
		s.UpdateVexID()
	})
}

// SetName sets the "name" field.
func (u *CWEUpsertBulk) SetName(v string) *CWEUpsertBulk {
	return u.Update(func(s *CWEUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CWEUpsertBulk) UpdateName() *CWEUpsertBulk {
	return u.Update(func(s *CWEUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *CWEUpsertBulk) SetDescription(v string) *CWEUpsertBulk {
	return u.Update(func(s *CWEUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CWEUpsertBulk) UpdateDescription() *CWEUpsertBulk {
	return u.Update(func(s *CWEUpsert) {
		s.UpdateDescription()
	})
}

// SetBackgroundDetail sets the "background_detail" field.
func (u *CWEUpsertBulk) SetBackgroundDetail(v string) *CWEUpsertBulk {
	return u.Update(func(s *CWEUpsert) {
		s.SetBackgroundDetail(v)
	})
}

// UpdateBackgroundDetail sets the "background_detail" field to the value that was provided on create.
func (u *CWEUpsertBulk) UpdateBackgroundDetail() *CWEUpsertBulk {
	return u.Update(func(s *CWEUpsert) {
		s.UpdateBackgroundDetail()
	})
}

// ClearBackgroundDetail clears the value of the "background_detail" field.
func (u *CWEUpsertBulk) ClearBackgroundDetail() *CWEUpsertBulk {
	return u.Update(func(s *CWEUpsert) {
		s.ClearBackgroundDetail()
	})
}

// Exec executes the query.
func (u *CWEUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CWECreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CWECreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CWEUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
