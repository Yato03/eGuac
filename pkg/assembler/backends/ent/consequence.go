// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/consequence"
)

// Consequence is the model entity for the Consequence schema.
type Consequence struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes *string `json:"notes,omitempty"`
	// Likelihood holds the value of the "likelihood" field.
	Likelihood *string `json:"likelihood,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ConsequenceQuery when eager-loading is set.
	Edges        ConsequenceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ConsequenceEdges holds the relations/edges for other nodes in the graph.
type ConsequenceEdges struct {
	// Cwe holds the value of the cwe edge.
	Cwe []*CWE `json:"cwe,omitempty"`
	// ConsequenceScope holds the value of the consequence_scope edge.
	ConsequenceScope []*Consequence_Scope `json:"consequence_scope,omitempty"`
	// ConsequenceImpact holds the value of the consequence_impact edge.
	ConsequenceImpact []*Consequence_Impact `json:"consequence_impact,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedCwe               map[string][]*CWE
	namedConsequenceScope  map[string][]*Consequence_Scope
	namedConsequenceImpact map[string][]*Consequence_Impact
}

// CweOrErr returns the Cwe value or an error if the edge
// was not loaded in eager-loading.
func (e ConsequenceEdges) CweOrErr() ([]*CWE, error) {
	if e.loadedTypes[0] {
		return e.Cwe, nil
	}
	return nil, &NotLoadedError{edge: "cwe"}
}

// ConsequenceScopeOrErr returns the ConsequenceScope value or an error if the edge
// was not loaded in eager-loading.
func (e ConsequenceEdges) ConsequenceScopeOrErr() ([]*Consequence_Scope, error) {
	if e.loadedTypes[1] {
		return e.ConsequenceScope, nil
	}
	return nil, &NotLoadedError{edge: "consequence_scope"}
}

// ConsequenceImpactOrErr returns the ConsequenceImpact value or an error if the edge
// was not loaded in eager-loading.
func (e ConsequenceEdges) ConsequenceImpactOrErr() ([]*Consequence_Impact, error) {
	if e.loadedTypes[2] {
		return e.ConsequenceImpact, nil
	}
	return nil, &NotLoadedError{edge: "consequence_impact"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Consequence) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case consequence.FieldNotes, consequence.FieldLikelihood:
			values[i] = new(sql.NullString)
		case consequence.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Consequence fields.
func (c *Consequence) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case consequence.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case consequence.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				c.Notes = new(string)
				*c.Notes = value.String
			}
		case consequence.FieldLikelihood:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field likelihood", values[i])
			} else if value.Valid {
				c.Likelihood = new(string)
				*c.Likelihood = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Consequence.
// This includes values selected through modifiers, order, etc.
func (c *Consequence) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryCwe queries the "cwe" edge of the Consequence entity.
func (c *Consequence) QueryCwe() *CWEQuery {
	return NewConsequenceClient(c.config).QueryCwe(c)
}

// QueryConsequenceScope queries the "consequence_scope" edge of the Consequence entity.
func (c *Consequence) QueryConsequenceScope() *ConsequenceScopeQuery {
	return NewConsequenceClient(c.config).QueryConsequenceScope(c)
}

// QueryConsequenceImpact queries the "consequence_impact" edge of the Consequence entity.
func (c *Consequence) QueryConsequenceImpact() *ConsequenceImpactQuery {
	return NewConsequenceClient(c.config).QueryConsequenceImpact(c)
}

// Update returns a builder for updating this Consequence.
// Note that you need to call Consequence.Unwrap() before calling this method if this Consequence
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Consequence) Update() *ConsequenceUpdateOne {
	return NewConsequenceClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Consequence entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Consequence) Unwrap() *Consequence {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Consequence is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Consequence) String() string {
	var builder strings.Builder
	builder.WriteString("Consequence(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	if v := c.Notes; v != nil {
		builder.WriteString("notes=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.Likelihood; v != nil {
		builder.WriteString("likelihood=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedCwe returns the Cwe named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Consequence) NamedCwe(name string) ([]*CWE, error) {
	if c.Edges.namedCwe == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedCwe[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Consequence) appendNamedCwe(name string, edges ...*CWE) {
	if c.Edges.namedCwe == nil {
		c.Edges.namedCwe = make(map[string][]*CWE)
	}
	if len(edges) == 0 {
		c.Edges.namedCwe[name] = []*CWE{}
	} else {
		c.Edges.namedCwe[name] = append(c.Edges.namedCwe[name], edges...)
	}
}

// NamedConsequenceScope returns the ConsequenceScope named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Consequence) NamedConsequenceScope(name string) ([]*Consequence_Scope, error) {
	if c.Edges.namedConsequenceScope == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedConsequenceScope[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Consequence) appendNamedConsequenceScope(name string, edges ...*Consequence_Scope) {
	if c.Edges.namedConsequenceScope == nil {
		c.Edges.namedConsequenceScope = make(map[string][]*Consequence_Scope)
	}
	if len(edges) == 0 {
		c.Edges.namedConsequenceScope[name] = []*Consequence_Scope{}
	} else {
		c.Edges.namedConsequenceScope[name] = append(c.Edges.namedConsequenceScope[name], edges...)
	}
}

// NamedConsequenceImpact returns the ConsequenceImpact named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Consequence) NamedConsequenceImpact(name string) ([]*Consequence_Impact, error) {
	if c.Edges.namedConsequenceImpact == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedConsequenceImpact[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Consequence) appendNamedConsequenceImpact(name string, edges ...*Consequence_Impact) {
	if c.Edges.namedConsequenceImpact == nil {
		c.Edges.namedConsequenceImpact = make(map[string][]*Consequence_Impact)
	}
	if len(edges) == 0 {
		c.Edges.namedConsequenceImpact[name] = []*Consequence_Impact{}
	} else {
		c.Edges.namedConsequenceImpact[name] = append(c.Edges.namedConsequenceImpact[name], edges...)
	}
}

// Consequences is a parsable slice of Consequence.
type Consequences []*Consequence
