// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/reachablecode"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/reachablecodeartifact"
)

// ReachableCodeArtifactQuery is the builder for querying ReachableCodeArtifact entities.
type ReachableCodeArtifactQuery struct {
	config
	ctx                    *QueryContext
	order                  []reachablecodeartifact.OrderOption
	inters                 []Interceptor
	predicates             []predicate.ReachableCodeArtifact
	withReachableCode      *ReachableCodeQuery
	modifiers              []func(*sql.Selector)
	loadTotal              []func(context.Context, []*ReachableCodeArtifact) error
	withNamedReachableCode map[string]*ReachableCodeQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ReachableCodeArtifactQuery builder.
func (rcaq *ReachableCodeArtifactQuery) Where(ps ...predicate.ReachableCodeArtifact) *ReachableCodeArtifactQuery {
	rcaq.predicates = append(rcaq.predicates, ps...)
	return rcaq
}

// Limit the number of records to be returned by this query.
func (rcaq *ReachableCodeArtifactQuery) Limit(limit int) *ReachableCodeArtifactQuery {
	rcaq.ctx.Limit = &limit
	return rcaq
}

// Offset to start from.
func (rcaq *ReachableCodeArtifactQuery) Offset(offset int) *ReachableCodeArtifactQuery {
	rcaq.ctx.Offset = &offset
	return rcaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rcaq *ReachableCodeArtifactQuery) Unique(unique bool) *ReachableCodeArtifactQuery {
	rcaq.ctx.Unique = &unique
	return rcaq
}

// Order specifies how the records should be ordered.
func (rcaq *ReachableCodeArtifactQuery) Order(o ...reachablecodeartifact.OrderOption) *ReachableCodeArtifactQuery {
	rcaq.order = append(rcaq.order, o...)
	return rcaq
}

// QueryReachableCode chains the current query on the "reachable_code" edge.
func (rcaq *ReachableCodeArtifactQuery) QueryReachableCode() *ReachableCodeQuery {
	query := (&ReachableCodeClient{config: rcaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(reachablecodeartifact.Table, reachablecodeartifact.FieldID, selector),
			sqlgraph.To(reachablecode.Table, reachablecode.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, reachablecodeartifact.ReachableCodeTable, reachablecodeartifact.ReachableCodePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rcaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ReachableCodeArtifact entity from the query.
// Returns a *NotFoundError when no ReachableCodeArtifact was found.
func (rcaq *ReachableCodeArtifactQuery) First(ctx context.Context) (*ReachableCodeArtifact, error) {
	nodes, err := rcaq.Limit(1).All(setContextOp(ctx, rcaq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{reachablecodeartifact.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rcaq *ReachableCodeArtifactQuery) FirstX(ctx context.Context) *ReachableCodeArtifact {
	node, err := rcaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ReachableCodeArtifact ID from the query.
// Returns a *NotFoundError when no ReachableCodeArtifact ID was found.
func (rcaq *ReachableCodeArtifactQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = rcaq.Limit(1).IDs(setContextOp(ctx, rcaq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{reachablecodeartifact.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rcaq *ReachableCodeArtifactQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := rcaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ReachableCodeArtifact entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ReachableCodeArtifact entity is found.
// Returns a *NotFoundError when no ReachableCodeArtifact entities are found.
func (rcaq *ReachableCodeArtifactQuery) Only(ctx context.Context) (*ReachableCodeArtifact, error) {
	nodes, err := rcaq.Limit(2).All(setContextOp(ctx, rcaq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{reachablecodeartifact.Label}
	default:
		return nil, &NotSingularError{reachablecodeartifact.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rcaq *ReachableCodeArtifactQuery) OnlyX(ctx context.Context) *ReachableCodeArtifact {
	node, err := rcaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ReachableCodeArtifact ID in the query.
// Returns a *NotSingularError when more than one ReachableCodeArtifact ID is found.
// Returns a *NotFoundError when no entities are found.
func (rcaq *ReachableCodeArtifactQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = rcaq.Limit(2).IDs(setContextOp(ctx, rcaq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{reachablecodeartifact.Label}
	default:
		err = &NotSingularError{reachablecodeartifact.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rcaq *ReachableCodeArtifactQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := rcaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ReachableCodeArtifacts.
func (rcaq *ReachableCodeArtifactQuery) All(ctx context.Context) ([]*ReachableCodeArtifact, error) {
	ctx = setContextOp(ctx, rcaq.ctx, ent.OpQueryAll)
	if err := rcaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ReachableCodeArtifact, *ReachableCodeArtifactQuery]()
	return withInterceptors[[]*ReachableCodeArtifact](ctx, rcaq, qr, rcaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rcaq *ReachableCodeArtifactQuery) AllX(ctx context.Context) []*ReachableCodeArtifact {
	nodes, err := rcaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ReachableCodeArtifact IDs.
func (rcaq *ReachableCodeArtifactQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if rcaq.ctx.Unique == nil && rcaq.path != nil {
		rcaq.Unique(true)
	}
	ctx = setContextOp(ctx, rcaq.ctx, ent.OpQueryIDs)
	if err = rcaq.Select(reachablecodeartifact.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rcaq *ReachableCodeArtifactQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := rcaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rcaq *ReachableCodeArtifactQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rcaq.ctx, ent.OpQueryCount)
	if err := rcaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rcaq, querierCount[*ReachableCodeArtifactQuery](), rcaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rcaq *ReachableCodeArtifactQuery) CountX(ctx context.Context) int {
	count, err := rcaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rcaq *ReachableCodeArtifactQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rcaq.ctx, ent.OpQueryExist)
	switch _, err := rcaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rcaq *ReachableCodeArtifactQuery) ExistX(ctx context.Context) bool {
	exist, err := rcaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ReachableCodeArtifactQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rcaq *ReachableCodeArtifactQuery) Clone() *ReachableCodeArtifactQuery {
	if rcaq == nil {
		return nil
	}
	return &ReachableCodeArtifactQuery{
		config:            rcaq.config,
		ctx:               rcaq.ctx.Clone(),
		order:             append([]reachablecodeartifact.OrderOption{}, rcaq.order...),
		inters:            append([]Interceptor{}, rcaq.inters...),
		predicates:        append([]predicate.ReachableCodeArtifact{}, rcaq.predicates...),
		withReachableCode: rcaq.withReachableCode.Clone(),
		// clone intermediate query.
		sql:  rcaq.sql.Clone(),
		path: rcaq.path,
	}
}

// WithReachableCode tells the query-builder to eager-load the nodes that are connected to
// the "reachable_code" edge. The optional arguments are used to configure the query builder of the edge.
func (rcaq *ReachableCodeArtifactQuery) WithReachableCode(opts ...func(*ReachableCodeQuery)) *ReachableCodeArtifactQuery {
	query := (&ReachableCodeClient{config: rcaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcaq.withReachableCode = query
	return rcaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ArtifactName string `json:"artifact_name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ReachableCodeArtifact.Query().
//		GroupBy(reachablecodeartifact.FieldArtifactName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rcaq *ReachableCodeArtifactQuery) GroupBy(field string, fields ...string) *ReachableCodeArtifactGroupBy {
	rcaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ReachableCodeArtifactGroupBy{build: rcaq}
	grbuild.flds = &rcaq.ctx.Fields
	grbuild.label = reachablecodeartifact.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ArtifactName string `json:"artifact_name,omitempty"`
//	}
//
//	client.ReachableCodeArtifact.Query().
//		Select(reachablecodeartifact.FieldArtifactName).
//		Scan(ctx, &v)
func (rcaq *ReachableCodeArtifactQuery) Select(fields ...string) *ReachableCodeArtifactSelect {
	rcaq.ctx.Fields = append(rcaq.ctx.Fields, fields...)
	sbuild := &ReachableCodeArtifactSelect{ReachableCodeArtifactQuery: rcaq}
	sbuild.label = reachablecodeartifact.Label
	sbuild.flds, sbuild.scan = &rcaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ReachableCodeArtifactSelect configured with the given aggregations.
func (rcaq *ReachableCodeArtifactQuery) Aggregate(fns ...AggregateFunc) *ReachableCodeArtifactSelect {
	return rcaq.Select().Aggregate(fns...)
}

func (rcaq *ReachableCodeArtifactQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rcaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rcaq); err != nil {
				return err
			}
		}
	}
	for _, f := range rcaq.ctx.Fields {
		if !reachablecodeartifact.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rcaq.path != nil {
		prev, err := rcaq.path(ctx)
		if err != nil {
			return err
		}
		rcaq.sql = prev
	}
	return nil
}

func (rcaq *ReachableCodeArtifactQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ReachableCodeArtifact, error) {
	var (
		nodes       = []*ReachableCodeArtifact{}
		_spec       = rcaq.querySpec()
		loadedTypes = [1]bool{
			rcaq.withReachableCode != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ReachableCodeArtifact).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ReachableCodeArtifact{config: rcaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(rcaq.modifiers) > 0 {
		_spec.Modifiers = rcaq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rcaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rcaq.withReachableCode; query != nil {
		if err := rcaq.loadReachableCode(ctx, query, nodes,
			func(n *ReachableCodeArtifact) { n.Edges.ReachableCode = []*ReachableCode{} },
			func(n *ReachableCodeArtifact, e *ReachableCode) {
				n.Edges.ReachableCode = append(n.Edges.ReachableCode, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range rcaq.withNamedReachableCode {
		if err := rcaq.loadReachableCode(ctx, query, nodes,
			func(n *ReachableCodeArtifact) { n.appendNamedReachableCode(name) },
			func(n *ReachableCodeArtifact, e *ReachableCode) { n.appendNamedReachableCode(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range rcaq.loadTotal {
		if err := rcaq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rcaq *ReachableCodeArtifactQuery) loadReachableCode(ctx context.Context, query *ReachableCodeQuery, nodes []*ReachableCodeArtifact, init func(*ReachableCodeArtifact), assign func(*ReachableCodeArtifact, *ReachableCode)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*ReachableCodeArtifact)
	nids := make(map[uuid.UUID]map[*ReachableCodeArtifact]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(reachablecodeartifact.ReachableCodeTable)
		s.Join(joinT).On(s.C(reachablecode.FieldID), joinT.C(reachablecodeartifact.ReachableCodePrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(reachablecodeartifact.ReachableCodePrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(reachablecodeartifact.ReachableCodePrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*ReachableCodeArtifact]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ReachableCode](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "reachable_code" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (rcaq *ReachableCodeArtifactQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rcaq.querySpec()
	if len(rcaq.modifiers) > 0 {
		_spec.Modifiers = rcaq.modifiers
	}
	_spec.Node.Columns = rcaq.ctx.Fields
	if len(rcaq.ctx.Fields) > 0 {
		_spec.Unique = rcaq.ctx.Unique != nil && *rcaq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rcaq.driver, _spec)
}

func (rcaq *ReachableCodeArtifactQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(reachablecodeartifact.Table, reachablecodeartifact.Columns, sqlgraph.NewFieldSpec(reachablecodeartifact.FieldID, field.TypeUUID))
	_spec.From = rcaq.sql
	if unique := rcaq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rcaq.path != nil {
		_spec.Unique = true
	}
	if fields := rcaq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reachablecodeartifact.FieldID)
		for i := range fields {
			if fields[i] != reachablecodeartifact.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rcaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rcaq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rcaq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rcaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rcaq *ReachableCodeArtifactQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rcaq.driver.Dialect())
	t1 := builder.Table(reachablecodeartifact.Table)
	columns := rcaq.ctx.Fields
	if len(columns) == 0 {
		columns = reachablecodeartifact.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rcaq.sql != nil {
		selector = rcaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rcaq.ctx.Unique != nil && *rcaq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range rcaq.predicates {
		p(selector)
	}
	for _, p := range rcaq.order {
		p(selector)
	}
	if offset := rcaq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rcaq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedReachableCode tells the query-builder to eager-load the nodes that are connected to the "reachable_code"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rcaq *ReachableCodeArtifactQuery) WithNamedReachableCode(name string, opts ...func(*ReachableCodeQuery)) *ReachableCodeArtifactQuery {
	query := (&ReachableCodeClient{config: rcaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rcaq.withNamedReachableCode == nil {
		rcaq.withNamedReachableCode = make(map[string]*ReachableCodeQuery)
	}
	rcaq.withNamedReachableCode[name] = query
	return rcaq
}

// ReachableCodeArtifactGroupBy is the group-by builder for ReachableCodeArtifact entities.
type ReachableCodeArtifactGroupBy struct {
	selector
	build *ReachableCodeArtifactQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rcagb *ReachableCodeArtifactGroupBy) Aggregate(fns ...AggregateFunc) *ReachableCodeArtifactGroupBy {
	rcagb.fns = append(rcagb.fns, fns...)
	return rcagb
}

// Scan applies the selector query and scans the result into the given value.
func (rcagb *ReachableCodeArtifactGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rcagb.build.ctx, ent.OpQueryGroupBy)
	if err := rcagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ReachableCodeArtifactQuery, *ReachableCodeArtifactGroupBy](ctx, rcagb.build, rcagb, rcagb.build.inters, v)
}

func (rcagb *ReachableCodeArtifactGroupBy) sqlScan(ctx context.Context, root *ReachableCodeArtifactQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rcagb.fns))
	for _, fn := range rcagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rcagb.flds)+len(rcagb.fns))
		for _, f := range *rcagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rcagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rcagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ReachableCodeArtifactSelect is the builder for selecting fields of ReachableCodeArtifact entities.
type ReachableCodeArtifactSelect struct {
	*ReachableCodeArtifactQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rcas *ReachableCodeArtifactSelect) Aggregate(fns ...AggregateFunc) *ReachableCodeArtifactSelect {
	rcas.fns = append(rcas.fns, fns...)
	return rcas
}

// Scan applies the selector query and scans the result into the given value.
func (rcas *ReachableCodeArtifactSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rcas.ctx, ent.OpQuerySelect)
	if err := rcas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ReachableCodeArtifactQuery, *ReachableCodeArtifactSelect](ctx, rcas.ReachableCodeArtifactQuery, rcas, rcas.inters, v)
}

func (rcas *ReachableCodeArtifactSelect) sqlScan(ctx context.Context, root *ReachableCodeArtifactQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rcas.fns))
	for _, fn := range rcas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rcas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rcas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
