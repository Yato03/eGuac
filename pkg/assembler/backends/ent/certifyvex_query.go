// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/artifact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyvex"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/cvss"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/cwe"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/exploit"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/packageversion"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/reachablecode"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/vulnerabilityid"
)

// CertifyVexQuery is the builder for querying CertifyVex entities.
type CertifyVexQuery struct {
	config
	ctx                    *QueryContext
	order                  []certifyvex.OrderOption
	inters                 []Interceptor
	predicates             []predicate.CertifyVex
	withPackage            *PackageVersionQuery
	withArtifact           *ArtifactQuery
	withVulnerability      *VulnerabilityIDQuery
	withCvss               *CVSSQuery
	withCwe                *CWEQuery
	withExploit            *ExploitQuery
	withReachableCode      *ReachableCodeQuery
	withFKs                bool
	modifiers              []func(*sql.Selector)
	loadTotal              []func(context.Context, []*CertifyVex) error
	withNamedCwe           map[string]*CWEQuery
	withNamedExploit       map[string]*ExploitQuery
	withNamedReachableCode map[string]*ReachableCodeQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CertifyVexQuery builder.
func (cvq *CertifyVexQuery) Where(ps ...predicate.CertifyVex) *CertifyVexQuery {
	cvq.predicates = append(cvq.predicates, ps...)
	return cvq
}

// Limit the number of records to be returned by this query.
func (cvq *CertifyVexQuery) Limit(limit int) *CertifyVexQuery {
	cvq.ctx.Limit = &limit
	return cvq
}

// Offset to start from.
func (cvq *CertifyVexQuery) Offset(offset int) *CertifyVexQuery {
	cvq.ctx.Offset = &offset
	return cvq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cvq *CertifyVexQuery) Unique(unique bool) *CertifyVexQuery {
	cvq.ctx.Unique = &unique
	return cvq
}

// Order specifies how the records should be ordered.
func (cvq *CertifyVexQuery) Order(o ...certifyvex.OrderOption) *CertifyVexQuery {
	cvq.order = append(cvq.order, o...)
	return cvq
}

// QueryPackage chains the current query on the "package" edge.
func (cvq *CertifyVexQuery) QueryPackage() *PackageVersionQuery {
	query := (&PackageVersionClient{config: cvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(certifyvex.Table, certifyvex.FieldID, selector),
			sqlgraph.To(packageversion.Table, packageversion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, certifyvex.PackageTable, certifyvex.PackageColumn),
		)
		fromU = sqlgraph.SetNeighbors(cvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryArtifact chains the current query on the "artifact" edge.
func (cvq *CertifyVexQuery) QueryArtifact() *ArtifactQuery {
	query := (&ArtifactClient{config: cvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(certifyvex.Table, certifyvex.FieldID, selector),
			sqlgraph.To(artifact.Table, artifact.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, certifyvex.ArtifactTable, certifyvex.ArtifactColumn),
		)
		fromU = sqlgraph.SetNeighbors(cvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVulnerability chains the current query on the "vulnerability" edge.
func (cvq *CertifyVexQuery) QueryVulnerability() *VulnerabilityIDQuery {
	query := (&VulnerabilityIDClient{config: cvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(certifyvex.Table, certifyvex.FieldID, selector),
			sqlgraph.To(vulnerabilityid.Table, vulnerabilityid.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, certifyvex.VulnerabilityTable, certifyvex.VulnerabilityColumn),
		)
		fromU = sqlgraph.SetNeighbors(cvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCvss chains the current query on the "cvss" edge.
func (cvq *CertifyVexQuery) QueryCvss() *CVSSQuery {
	query := (&CVSSClient{config: cvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(certifyvex.Table, certifyvex.FieldID, selector),
			sqlgraph.To(cvss.Table, cvss.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, certifyvex.CvssTable, certifyvex.CvssColumn),
		)
		fromU = sqlgraph.SetNeighbors(cvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCwe chains the current query on the "cwe" edge.
func (cvq *CertifyVexQuery) QueryCwe() *CWEQuery {
	query := (&CWEClient{config: cvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(certifyvex.Table, certifyvex.FieldID, selector),
			sqlgraph.To(cwe.Table, cwe.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, certifyvex.CweTable, certifyvex.CwePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExploit chains the current query on the "exploit" edge.
func (cvq *CertifyVexQuery) QueryExploit() *ExploitQuery {
	query := (&ExploitClient{config: cvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(certifyvex.Table, certifyvex.FieldID, selector),
			sqlgraph.To(exploit.Table, exploit.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, certifyvex.ExploitTable, certifyvex.ExploitPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReachableCode chains the current query on the "reachable_code" edge.
func (cvq *CertifyVexQuery) QueryReachableCode() *ReachableCodeQuery {
	query := (&ReachableCodeClient{config: cvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(certifyvex.Table, certifyvex.FieldID, selector),
			sqlgraph.To(reachablecode.Table, reachablecode.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, certifyvex.ReachableCodeTable, certifyvex.ReachableCodePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CertifyVex entity from the query.
// Returns a *NotFoundError when no CertifyVex was found.
func (cvq *CertifyVexQuery) First(ctx context.Context) (*CertifyVex, error) {
	nodes, err := cvq.Limit(1).All(setContextOp(ctx, cvq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{certifyvex.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cvq *CertifyVexQuery) FirstX(ctx context.Context) *CertifyVex {
	node, err := cvq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CertifyVex ID from the query.
// Returns a *NotFoundError when no CertifyVex ID was found.
func (cvq *CertifyVexQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = cvq.Limit(1).IDs(setContextOp(ctx, cvq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{certifyvex.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cvq *CertifyVexQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := cvq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CertifyVex entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CertifyVex entity is found.
// Returns a *NotFoundError when no CertifyVex entities are found.
func (cvq *CertifyVexQuery) Only(ctx context.Context) (*CertifyVex, error) {
	nodes, err := cvq.Limit(2).All(setContextOp(ctx, cvq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{certifyvex.Label}
	default:
		return nil, &NotSingularError{certifyvex.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cvq *CertifyVexQuery) OnlyX(ctx context.Context) *CertifyVex {
	node, err := cvq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CertifyVex ID in the query.
// Returns a *NotSingularError when more than one CertifyVex ID is found.
// Returns a *NotFoundError when no entities are found.
func (cvq *CertifyVexQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = cvq.Limit(2).IDs(setContextOp(ctx, cvq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{certifyvex.Label}
	default:
		err = &NotSingularError{certifyvex.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cvq *CertifyVexQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := cvq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CertifyVexes.
func (cvq *CertifyVexQuery) All(ctx context.Context) ([]*CertifyVex, error) {
	ctx = setContextOp(ctx, cvq.ctx, ent.OpQueryAll)
	if err := cvq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CertifyVex, *CertifyVexQuery]()
	return withInterceptors[[]*CertifyVex](ctx, cvq, qr, cvq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cvq *CertifyVexQuery) AllX(ctx context.Context) []*CertifyVex {
	nodes, err := cvq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CertifyVex IDs.
func (cvq *CertifyVexQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if cvq.ctx.Unique == nil && cvq.path != nil {
		cvq.Unique(true)
	}
	ctx = setContextOp(ctx, cvq.ctx, ent.OpQueryIDs)
	if err = cvq.Select(certifyvex.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cvq *CertifyVexQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := cvq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cvq *CertifyVexQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cvq.ctx, ent.OpQueryCount)
	if err := cvq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cvq, querierCount[*CertifyVexQuery](), cvq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cvq *CertifyVexQuery) CountX(ctx context.Context) int {
	count, err := cvq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cvq *CertifyVexQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cvq.ctx, ent.OpQueryExist)
	switch _, err := cvq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cvq *CertifyVexQuery) ExistX(ctx context.Context) bool {
	exist, err := cvq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CertifyVexQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cvq *CertifyVexQuery) Clone() *CertifyVexQuery {
	if cvq == nil {
		return nil
	}
	return &CertifyVexQuery{
		config:            cvq.config,
		ctx:               cvq.ctx.Clone(),
		order:             append([]certifyvex.OrderOption{}, cvq.order...),
		inters:            append([]Interceptor{}, cvq.inters...),
		predicates:        append([]predicate.CertifyVex{}, cvq.predicates...),
		withPackage:       cvq.withPackage.Clone(),
		withArtifact:      cvq.withArtifact.Clone(),
		withVulnerability: cvq.withVulnerability.Clone(),
		withCvss:          cvq.withCvss.Clone(),
		withCwe:           cvq.withCwe.Clone(),
		withExploit:       cvq.withExploit.Clone(),
		withReachableCode: cvq.withReachableCode.Clone(),
		// clone intermediate query.
		sql:  cvq.sql.Clone(),
		path: cvq.path,
	}
}

// WithPackage tells the query-builder to eager-load the nodes that are connected to
// the "package" edge. The optional arguments are used to configure the query builder of the edge.
func (cvq *CertifyVexQuery) WithPackage(opts ...func(*PackageVersionQuery)) *CertifyVexQuery {
	query := (&PackageVersionClient{config: cvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cvq.withPackage = query
	return cvq
}

// WithArtifact tells the query-builder to eager-load the nodes that are connected to
// the "artifact" edge. The optional arguments are used to configure the query builder of the edge.
func (cvq *CertifyVexQuery) WithArtifact(opts ...func(*ArtifactQuery)) *CertifyVexQuery {
	query := (&ArtifactClient{config: cvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cvq.withArtifact = query
	return cvq
}

// WithVulnerability tells the query-builder to eager-load the nodes that are connected to
// the "vulnerability" edge. The optional arguments are used to configure the query builder of the edge.
func (cvq *CertifyVexQuery) WithVulnerability(opts ...func(*VulnerabilityIDQuery)) *CertifyVexQuery {
	query := (&VulnerabilityIDClient{config: cvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cvq.withVulnerability = query
	return cvq
}

// WithCvss tells the query-builder to eager-load the nodes that are connected to
// the "cvss" edge. The optional arguments are used to configure the query builder of the edge.
func (cvq *CertifyVexQuery) WithCvss(opts ...func(*CVSSQuery)) *CertifyVexQuery {
	query := (&CVSSClient{config: cvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cvq.withCvss = query
	return cvq
}

// WithCwe tells the query-builder to eager-load the nodes that are connected to
// the "cwe" edge. The optional arguments are used to configure the query builder of the edge.
func (cvq *CertifyVexQuery) WithCwe(opts ...func(*CWEQuery)) *CertifyVexQuery {
	query := (&CWEClient{config: cvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cvq.withCwe = query
	return cvq
}

// WithExploit tells the query-builder to eager-load the nodes that are connected to
// the "exploit" edge. The optional arguments are used to configure the query builder of the edge.
func (cvq *CertifyVexQuery) WithExploit(opts ...func(*ExploitQuery)) *CertifyVexQuery {
	query := (&ExploitClient{config: cvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cvq.withExploit = query
	return cvq
}

// WithReachableCode tells the query-builder to eager-load the nodes that are connected to
// the "reachable_code" edge. The optional arguments are used to configure the query builder of the edge.
func (cvq *CertifyVexQuery) WithReachableCode(opts ...func(*ReachableCodeQuery)) *CertifyVexQuery {
	query := (&ReachableCodeClient{config: cvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cvq.withReachableCode = query
	return cvq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		PackageID uuid.UUID `json:"package_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CertifyVex.Query().
//		GroupBy(certifyvex.FieldPackageID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cvq *CertifyVexQuery) GroupBy(field string, fields ...string) *CertifyVexGroupBy {
	cvq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CertifyVexGroupBy{build: cvq}
	grbuild.flds = &cvq.ctx.Fields
	grbuild.label = certifyvex.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		PackageID uuid.UUID `json:"package_id,omitempty"`
//	}
//
//	client.CertifyVex.Query().
//		Select(certifyvex.FieldPackageID).
//		Scan(ctx, &v)
func (cvq *CertifyVexQuery) Select(fields ...string) *CertifyVexSelect {
	cvq.ctx.Fields = append(cvq.ctx.Fields, fields...)
	sbuild := &CertifyVexSelect{CertifyVexQuery: cvq}
	sbuild.label = certifyvex.Label
	sbuild.flds, sbuild.scan = &cvq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CertifyVexSelect configured with the given aggregations.
func (cvq *CertifyVexQuery) Aggregate(fns ...AggregateFunc) *CertifyVexSelect {
	return cvq.Select().Aggregate(fns...)
}

func (cvq *CertifyVexQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cvq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cvq); err != nil {
				return err
			}
		}
	}
	for _, f := range cvq.ctx.Fields {
		if !certifyvex.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cvq.path != nil {
		prev, err := cvq.path(ctx)
		if err != nil {
			return err
		}
		cvq.sql = prev
	}
	return nil
}

func (cvq *CertifyVexQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CertifyVex, error) {
	var (
		nodes       = []*CertifyVex{}
		withFKs     = cvq.withFKs
		_spec       = cvq.querySpec()
		loadedTypes = [7]bool{
			cvq.withPackage != nil,
			cvq.withArtifact != nil,
			cvq.withVulnerability != nil,
			cvq.withCvss != nil,
			cvq.withCwe != nil,
			cvq.withExploit != nil,
			cvq.withReachableCode != nil,
		}
	)
	if cvq.withCvss != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, certifyvex.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CertifyVex).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CertifyVex{config: cvq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(cvq.modifiers) > 0 {
		_spec.Modifiers = cvq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cvq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cvq.withPackage; query != nil {
		if err := cvq.loadPackage(ctx, query, nodes, nil,
			func(n *CertifyVex, e *PackageVersion) { n.Edges.Package = e }); err != nil {
			return nil, err
		}
	}
	if query := cvq.withArtifact; query != nil {
		if err := cvq.loadArtifact(ctx, query, nodes, nil,
			func(n *CertifyVex, e *Artifact) { n.Edges.Artifact = e }); err != nil {
			return nil, err
		}
	}
	if query := cvq.withVulnerability; query != nil {
		if err := cvq.loadVulnerability(ctx, query, nodes, nil,
			func(n *CertifyVex, e *VulnerabilityID) { n.Edges.Vulnerability = e }); err != nil {
			return nil, err
		}
	}
	if query := cvq.withCvss; query != nil {
		if err := cvq.loadCvss(ctx, query, nodes, nil,
			func(n *CertifyVex, e *CVSS) { n.Edges.Cvss = e }); err != nil {
			return nil, err
		}
	}
	if query := cvq.withCwe; query != nil {
		if err := cvq.loadCwe(ctx, query, nodes,
			func(n *CertifyVex) { n.Edges.Cwe = []*CWE{} },
			func(n *CertifyVex, e *CWE) { n.Edges.Cwe = append(n.Edges.Cwe, e) }); err != nil {
			return nil, err
		}
	}
	if query := cvq.withExploit; query != nil {
		if err := cvq.loadExploit(ctx, query, nodes,
			func(n *CertifyVex) { n.Edges.Exploit = []*Exploit{} },
			func(n *CertifyVex, e *Exploit) { n.Edges.Exploit = append(n.Edges.Exploit, e) }); err != nil {
			return nil, err
		}
	}
	if query := cvq.withReachableCode; query != nil {
		if err := cvq.loadReachableCode(ctx, query, nodes,
			func(n *CertifyVex) { n.Edges.ReachableCode = []*ReachableCode{} },
			func(n *CertifyVex, e *ReachableCode) { n.Edges.ReachableCode = append(n.Edges.ReachableCode, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cvq.withNamedCwe {
		if err := cvq.loadCwe(ctx, query, nodes,
			func(n *CertifyVex) { n.appendNamedCwe(name) },
			func(n *CertifyVex, e *CWE) { n.appendNamedCwe(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cvq.withNamedExploit {
		if err := cvq.loadExploit(ctx, query, nodes,
			func(n *CertifyVex) { n.appendNamedExploit(name) },
			func(n *CertifyVex, e *Exploit) { n.appendNamedExploit(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cvq.withNamedReachableCode {
		if err := cvq.loadReachableCode(ctx, query, nodes,
			func(n *CertifyVex) { n.appendNamedReachableCode(name) },
			func(n *CertifyVex, e *ReachableCode) { n.appendNamedReachableCode(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range cvq.loadTotal {
		if err := cvq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cvq *CertifyVexQuery) loadPackage(ctx context.Context, query *PackageVersionQuery, nodes []*CertifyVex, init func(*CertifyVex), assign func(*CertifyVex, *PackageVersion)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*CertifyVex)
	for i := range nodes {
		if nodes[i].PackageID == nil {
			continue
		}
		fk := *nodes[i].PackageID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(packageversion.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "package_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cvq *CertifyVexQuery) loadArtifact(ctx context.Context, query *ArtifactQuery, nodes []*CertifyVex, init func(*CertifyVex), assign func(*CertifyVex, *Artifact)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*CertifyVex)
	for i := range nodes {
		if nodes[i].ArtifactID == nil {
			continue
		}
		fk := *nodes[i].ArtifactID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(artifact.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "artifact_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cvq *CertifyVexQuery) loadVulnerability(ctx context.Context, query *VulnerabilityIDQuery, nodes []*CertifyVex, init func(*CertifyVex), assign func(*CertifyVex, *VulnerabilityID)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*CertifyVex)
	for i := range nodes {
		fk := nodes[i].VulnerabilityID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(vulnerabilityid.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "vulnerability_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cvq *CertifyVexQuery) loadCvss(ctx context.Context, query *CVSSQuery, nodes []*CertifyVex, init func(*CertifyVex), assign func(*CertifyVex, *CVSS)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*CertifyVex)
	for i := range nodes {
		if nodes[i].certify_vex_cvss == nil {
			continue
		}
		fk := *nodes[i].certify_vex_cvss
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(cvss.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "certify_vex_cvss" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cvq *CertifyVexQuery) loadCwe(ctx context.Context, query *CWEQuery, nodes []*CertifyVex, init func(*CertifyVex), assign func(*CertifyVex, *CWE)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*CertifyVex)
	nids := make(map[uuid.UUID]map[*CertifyVex]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(certifyvex.CweTable)
		s.Join(joinT).On(s.C(cwe.FieldID), joinT.C(certifyvex.CwePrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(certifyvex.CwePrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(certifyvex.CwePrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*CertifyVex]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*CWE](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "cwe" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cvq *CertifyVexQuery) loadExploit(ctx context.Context, query *ExploitQuery, nodes []*CertifyVex, init func(*CertifyVex), assign func(*CertifyVex, *Exploit)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*CertifyVex)
	nids := make(map[uuid.UUID]map[*CertifyVex]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(certifyvex.ExploitTable)
		s.Join(joinT).On(s.C(exploit.FieldID), joinT.C(certifyvex.ExploitPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(certifyvex.ExploitPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(certifyvex.ExploitPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*CertifyVex]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Exploit](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "exploit" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cvq *CertifyVexQuery) loadReachableCode(ctx context.Context, query *ReachableCodeQuery, nodes []*CertifyVex, init func(*CertifyVex), assign func(*CertifyVex, *ReachableCode)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*CertifyVex)
	nids := make(map[uuid.UUID]map[*CertifyVex]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(certifyvex.ReachableCodeTable)
		s.Join(joinT).On(s.C(reachablecode.FieldID), joinT.C(certifyvex.ReachableCodePrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(certifyvex.ReachableCodePrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(certifyvex.ReachableCodePrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*CertifyVex]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ReachableCode](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "reachable_code" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (cvq *CertifyVexQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cvq.querySpec()
	if len(cvq.modifiers) > 0 {
		_spec.Modifiers = cvq.modifiers
	}
	_spec.Node.Columns = cvq.ctx.Fields
	if len(cvq.ctx.Fields) > 0 {
		_spec.Unique = cvq.ctx.Unique != nil && *cvq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cvq.driver, _spec)
}

func (cvq *CertifyVexQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(certifyvex.Table, certifyvex.Columns, sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID))
	_spec.From = cvq.sql
	if unique := cvq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cvq.path != nil {
		_spec.Unique = true
	}
	if fields := cvq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, certifyvex.FieldID)
		for i := range fields {
			if fields[i] != certifyvex.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if cvq.withPackage != nil {
			_spec.Node.AddColumnOnce(certifyvex.FieldPackageID)
		}
		if cvq.withArtifact != nil {
			_spec.Node.AddColumnOnce(certifyvex.FieldArtifactID)
		}
		if cvq.withVulnerability != nil {
			_spec.Node.AddColumnOnce(certifyvex.FieldVulnerabilityID)
		}
	}
	if ps := cvq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cvq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cvq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cvq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cvq *CertifyVexQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cvq.driver.Dialect())
	t1 := builder.Table(certifyvex.Table)
	columns := cvq.ctx.Fields
	if len(columns) == 0 {
		columns = certifyvex.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cvq.sql != nil {
		selector = cvq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cvq.ctx.Unique != nil && *cvq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cvq.predicates {
		p(selector)
	}
	for _, p := range cvq.order {
		p(selector)
	}
	if offset := cvq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cvq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedCwe tells the query-builder to eager-load the nodes that are connected to the "cwe"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cvq *CertifyVexQuery) WithNamedCwe(name string, opts ...func(*CWEQuery)) *CertifyVexQuery {
	query := (&CWEClient{config: cvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cvq.withNamedCwe == nil {
		cvq.withNamedCwe = make(map[string]*CWEQuery)
	}
	cvq.withNamedCwe[name] = query
	return cvq
}

// WithNamedExploit tells the query-builder to eager-load the nodes that are connected to the "exploit"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cvq *CertifyVexQuery) WithNamedExploit(name string, opts ...func(*ExploitQuery)) *CertifyVexQuery {
	query := (&ExploitClient{config: cvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cvq.withNamedExploit == nil {
		cvq.withNamedExploit = make(map[string]*ExploitQuery)
	}
	cvq.withNamedExploit[name] = query
	return cvq
}

// WithNamedReachableCode tells the query-builder to eager-load the nodes that are connected to the "reachable_code"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cvq *CertifyVexQuery) WithNamedReachableCode(name string, opts ...func(*ReachableCodeQuery)) *CertifyVexQuery {
	query := (&ReachableCodeClient{config: cvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cvq.withNamedReachableCode == nil {
		cvq.withNamedReachableCode = make(map[string]*ReachableCodeQuery)
	}
	cvq.withNamedReachableCode[name] = query
	return cvq
}

// CertifyVexGroupBy is the group-by builder for CertifyVex entities.
type CertifyVexGroupBy struct {
	selector
	build *CertifyVexQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cvgb *CertifyVexGroupBy) Aggregate(fns ...AggregateFunc) *CertifyVexGroupBy {
	cvgb.fns = append(cvgb.fns, fns...)
	return cvgb
}

// Scan applies the selector query and scans the result into the given value.
func (cvgb *CertifyVexGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cvgb.build.ctx, ent.OpQueryGroupBy)
	if err := cvgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CertifyVexQuery, *CertifyVexGroupBy](ctx, cvgb.build, cvgb, cvgb.build.inters, v)
}

func (cvgb *CertifyVexGroupBy) sqlScan(ctx context.Context, root *CertifyVexQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cvgb.fns))
	for _, fn := range cvgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cvgb.flds)+len(cvgb.fns))
		for _, f := range *cvgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cvgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cvgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CertifyVexSelect is the builder for selecting fields of CertifyVex entities.
type CertifyVexSelect struct {
	*CertifyVexQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cvs *CertifyVexSelect) Aggregate(fns ...AggregateFunc) *CertifyVexSelect {
	cvs.fns = append(cvs.fns, fns...)
	return cvs
}

// Scan applies the selector query and scans the result into the given value.
func (cvs *CertifyVexSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cvs.ctx, ent.OpQuerySelect)
	if err := cvs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CertifyVexQuery, *CertifyVexSelect](ctx, cvs.CertifyVexQuery, cvs, cvs.inters, v)
}

func (cvs *CertifyVexSelect) sqlScan(ctx context.Context, root *CertifyVexQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cvs.fns))
	for _, fn := range cvs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cvs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cvs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
