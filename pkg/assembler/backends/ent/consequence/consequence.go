// Code generated by ent, DO NOT EDIT.

package consequence

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the consequence type in the database.
	Label = "consequence"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldLikelihood holds the string denoting the likelihood field in the database.
	FieldLikelihood = "likelihood"
	// EdgeCwe holds the string denoting the cwe edge name in mutations.
	EdgeCwe = "cwe"
	// EdgeConsequenceScope holds the string denoting the consequence_scope edge name in mutations.
	EdgeConsequenceScope = "consequence_scope"
	// EdgeConsequenceImpact holds the string denoting the consequence_impact edge name in mutations.
	EdgeConsequenceImpact = "consequence_impact"
	// Table holds the table name of the consequence in the database.
	Table = "consequences"
	// CweTable is the table that holds the cwe relation/edge. The primary key declared below.
	CweTable = "cwe_consequence"
	// CweInverseTable is the table name for the CWE entity.
	// It exists in this package in order to avoid circular dependency with the "cwe" package.
	CweInverseTable = "cw_es"
	// ConsequenceScopeTable is the table that holds the consequence_scope relation/edge. The primary key declared below.
	ConsequenceScopeTable = "consequence_consequence_scope"
	// ConsequenceScopeInverseTable is the table name for the Consequence_Scope entity.
	// It exists in this package in order to avoid circular dependency with the "consequence_scope" package.
	ConsequenceScopeInverseTable = "consequence_scopes"
	// ConsequenceImpactTable is the table that holds the consequence_impact relation/edge. The primary key declared below.
	ConsequenceImpactTable = "consequence_consequence_impact"
	// ConsequenceImpactInverseTable is the table name for the Consequence_Impact entity.
	// It exists in this package in order to avoid circular dependency with the "consequence_impact" package.
	ConsequenceImpactInverseTable = "consequence_impacts"
)

// Columns holds all SQL columns for consequence fields.
var Columns = []string{
	FieldID,
	FieldNotes,
	FieldLikelihood,
}

var (
	// CwePrimaryKey and CweColumn2 are the table columns denoting the
	// primary key for the cwe relation (M2M).
	CwePrimaryKey = []string{"cwe_id", "consequence_id"}
	// ConsequenceScopePrimaryKey and ConsequenceScopeColumn2 are the table columns denoting the
	// primary key for the consequence_scope relation (M2M).
	ConsequenceScopePrimaryKey = []string{"consequence_id", "consequence_scope_id"}
	// ConsequenceImpactPrimaryKey and ConsequenceImpactColumn2 are the table columns denoting the
	// primary key for the consequence_impact relation (M2M).
	ConsequenceImpactPrimaryKey = []string{"consequence_id", "consequence_impact_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Consequence queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByLikelihood orders the results by the likelihood field.
func ByLikelihood(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLikelihood, opts...).ToFunc()
}

// ByCweCount orders the results by cwe count.
func ByCweCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCweStep(), opts...)
	}
}

// ByCwe orders the results by cwe terms.
func ByCwe(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCweStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByConsequenceScopeCount orders the results by consequence_scope count.
func ByConsequenceScopeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newConsequenceScopeStep(), opts...)
	}
}

// ByConsequenceScope orders the results by consequence_scope terms.
func ByConsequenceScope(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConsequenceScopeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByConsequenceImpactCount orders the results by consequence_impact count.
func ByConsequenceImpactCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newConsequenceImpactStep(), opts...)
	}
}

// ByConsequenceImpact orders the results by consequence_impact terms.
func ByConsequenceImpact(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConsequenceImpactStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCweStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CweInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CweTable, CwePrimaryKey...),
	)
}
func newConsequenceScopeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConsequenceScopeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ConsequenceScopeTable, ConsequenceScopePrimaryKey...),
	)
}
func newConsequenceImpactStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConsequenceImpactInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ConsequenceImpactTable, ConsequenceImpactPrimaryKey...),
	)
}
