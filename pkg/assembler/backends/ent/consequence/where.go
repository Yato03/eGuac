// Code generated by ent, DO NOT EDIT.

package consequence

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Consequence {
	return predicate.Consequence(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Consequence {
	return predicate.Consequence(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Consequence {
	return predicate.Consequence(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Consequence {
	return predicate.Consequence(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Consequence {
	return predicate.Consequence(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Consequence {
	return predicate.Consequence(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Consequence {
	return predicate.Consequence(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Consequence {
	return predicate.Consequence(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Consequence {
	return predicate.Consequence(sql.FieldLTE(FieldID, id))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.Consequence {
	return predicate.Consequence(sql.FieldEQ(FieldNotes, v))
}

// Likelihood applies equality check predicate on the "likelihood" field. It's identical to LikelihoodEQ.
func Likelihood(v string) predicate.Consequence {
	return predicate.Consequence(sql.FieldEQ(FieldLikelihood, v))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.Consequence {
	return predicate.Consequence(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.Consequence {
	return predicate.Consequence(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.Consequence {
	return predicate.Consequence(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.Consequence {
	return predicate.Consequence(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.Consequence {
	return predicate.Consequence(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.Consequence {
	return predicate.Consequence(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.Consequence {
	return predicate.Consequence(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.Consequence {
	return predicate.Consequence(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.Consequence {
	return predicate.Consequence(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.Consequence {
	return predicate.Consequence(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.Consequence {
	return predicate.Consequence(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.Consequence {
	return predicate.Consequence(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.Consequence {
	return predicate.Consequence(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.Consequence {
	return predicate.Consequence(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.Consequence {
	return predicate.Consequence(sql.FieldContainsFold(FieldNotes, v))
}

// LikelihoodEQ applies the EQ predicate on the "likelihood" field.
func LikelihoodEQ(v string) predicate.Consequence {
	return predicate.Consequence(sql.FieldEQ(FieldLikelihood, v))
}

// LikelihoodNEQ applies the NEQ predicate on the "likelihood" field.
func LikelihoodNEQ(v string) predicate.Consequence {
	return predicate.Consequence(sql.FieldNEQ(FieldLikelihood, v))
}

// LikelihoodIn applies the In predicate on the "likelihood" field.
func LikelihoodIn(vs ...string) predicate.Consequence {
	return predicate.Consequence(sql.FieldIn(FieldLikelihood, vs...))
}

// LikelihoodNotIn applies the NotIn predicate on the "likelihood" field.
func LikelihoodNotIn(vs ...string) predicate.Consequence {
	return predicate.Consequence(sql.FieldNotIn(FieldLikelihood, vs...))
}

// LikelihoodGT applies the GT predicate on the "likelihood" field.
func LikelihoodGT(v string) predicate.Consequence {
	return predicate.Consequence(sql.FieldGT(FieldLikelihood, v))
}

// LikelihoodGTE applies the GTE predicate on the "likelihood" field.
func LikelihoodGTE(v string) predicate.Consequence {
	return predicate.Consequence(sql.FieldGTE(FieldLikelihood, v))
}

// LikelihoodLT applies the LT predicate on the "likelihood" field.
func LikelihoodLT(v string) predicate.Consequence {
	return predicate.Consequence(sql.FieldLT(FieldLikelihood, v))
}

// LikelihoodLTE applies the LTE predicate on the "likelihood" field.
func LikelihoodLTE(v string) predicate.Consequence {
	return predicate.Consequence(sql.FieldLTE(FieldLikelihood, v))
}

// LikelihoodContains applies the Contains predicate on the "likelihood" field.
func LikelihoodContains(v string) predicate.Consequence {
	return predicate.Consequence(sql.FieldContains(FieldLikelihood, v))
}

// LikelihoodHasPrefix applies the HasPrefix predicate on the "likelihood" field.
func LikelihoodHasPrefix(v string) predicate.Consequence {
	return predicate.Consequence(sql.FieldHasPrefix(FieldLikelihood, v))
}

// LikelihoodHasSuffix applies the HasSuffix predicate on the "likelihood" field.
func LikelihoodHasSuffix(v string) predicate.Consequence {
	return predicate.Consequence(sql.FieldHasSuffix(FieldLikelihood, v))
}

// LikelihoodIsNil applies the IsNil predicate on the "likelihood" field.
func LikelihoodIsNil() predicate.Consequence {
	return predicate.Consequence(sql.FieldIsNull(FieldLikelihood))
}

// LikelihoodNotNil applies the NotNil predicate on the "likelihood" field.
func LikelihoodNotNil() predicate.Consequence {
	return predicate.Consequence(sql.FieldNotNull(FieldLikelihood))
}

// LikelihoodEqualFold applies the EqualFold predicate on the "likelihood" field.
func LikelihoodEqualFold(v string) predicate.Consequence {
	return predicate.Consequence(sql.FieldEqualFold(FieldLikelihood, v))
}

// LikelihoodContainsFold applies the ContainsFold predicate on the "likelihood" field.
func LikelihoodContainsFold(v string) predicate.Consequence {
	return predicate.Consequence(sql.FieldContainsFold(FieldLikelihood, v))
}

// HasCwe applies the HasEdge predicate on the "cwe" edge.
func HasCwe() predicate.Consequence {
	return predicate.Consequence(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CweTable, CwePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCweWith applies the HasEdge predicate on the "cwe" edge with a given conditions (other predicates).
func HasCweWith(preds ...predicate.CWE) predicate.Consequence {
	return predicate.Consequence(func(s *sql.Selector) {
		step := newCweStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConsequenceScope applies the HasEdge predicate on the "consequence_scope" edge.
func HasConsequenceScope() predicate.Consequence {
	return predicate.Consequence(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ConsequenceScopeTable, ConsequenceScopePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConsequenceScopeWith applies the HasEdge predicate on the "consequence_scope" edge with a given conditions (other predicates).
func HasConsequenceScopeWith(preds ...predicate.Consequence_Scope) predicate.Consequence {
	return predicate.Consequence(func(s *sql.Selector) {
		step := newConsequenceScopeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConsequenceImpact applies the HasEdge predicate on the "consequence_impact" edge.
func HasConsequenceImpact() predicate.Consequence {
	return predicate.Consequence(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ConsequenceImpactTable, ConsequenceImpactPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConsequenceImpactWith applies the HasEdge predicate on the "consequence_impact" edge with a given conditions (other predicates).
func HasConsequenceImpactWith(preds ...predicate.Consequence_Impact) predicate.Consequence {
	return predicate.Consequence(func(s *sql.Selector) {
		step := newConsequenceImpactStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Consequence) predicate.Consequence {
	return predicate.Consequence(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Consequence) predicate.Consequence {
	return predicate.Consequence(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Consequence) predicate.Consequence {
	return predicate.Consequence(sql.NotPredicates(p))
}
