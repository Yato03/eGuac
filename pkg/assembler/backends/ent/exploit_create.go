// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyvex"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/exploit"
)

// ExploitCreate is the builder for creating a Exploit entity.
type ExploitCreate struct {
	config
	mutation *ExploitMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetExploitID sets the "exploit_id" field.
func (ec *ExploitCreate) SetExploitID(s string) *ExploitCreate {
	ec.mutation.SetExploitID(s)
	return ec
}

// SetNillableExploitID sets the "exploit_id" field if the given value is not nil.
func (ec *ExploitCreate) SetNillableExploitID(s *string) *ExploitCreate {
	if s != nil {
		ec.SetExploitID(*s)
	}
	return ec
}

// SetDescription sets the "description" field.
func (ec *ExploitCreate) SetDescription(s string) *ExploitCreate {
	ec.mutation.SetDescription(s)
	return ec
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ec *ExploitCreate) SetNillableDescription(s *string) *ExploitCreate {
	if s != nil {
		ec.SetDescription(*s)
	}
	return ec
}

// SetPayload sets the "payload" field.
func (ec *ExploitCreate) SetPayload(s string) *ExploitCreate {
	ec.mutation.SetPayload(s)
	return ec
}

// SetNillablePayload sets the "payload" field if the given value is not nil.
func (ec *ExploitCreate) SetNillablePayload(s *string) *ExploitCreate {
	if s != nil {
		ec.SetPayload(*s)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *ExploitCreate) SetID(u uuid.UUID) *ExploitCreate {
	ec.mutation.SetID(u)
	return ec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ec *ExploitCreate) SetNillableID(u *uuid.UUID) *ExploitCreate {
	if u != nil {
		ec.SetID(*u)
	}
	return ec
}

// AddCertifyVexIDs adds the "certify_vex" edge to the CertifyVex entity by IDs.
func (ec *ExploitCreate) AddCertifyVexIDs(ids ...uuid.UUID) *ExploitCreate {
	ec.mutation.AddCertifyVexIDs(ids...)
	return ec
}

// AddCertifyVex adds the "certify_vex" edges to the CertifyVex entity.
func (ec *ExploitCreate) AddCertifyVex(c ...*CertifyVex) *ExploitCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ec.AddCertifyVexIDs(ids...)
}

// Mutation returns the ExploitMutation object of the builder.
func (ec *ExploitCreate) Mutation() *ExploitMutation {
	return ec.mutation
}

// Save creates the Exploit in the database.
func (ec *ExploitCreate) Save(ctx context.Context) (*Exploit, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *ExploitCreate) SaveX(ctx context.Context) *Exploit {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *ExploitCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *ExploitCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *ExploitCreate) defaults() {
	if _, ok := ec.mutation.ID(); !ok {
		v := exploit.DefaultID()
		ec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *ExploitCreate) check() error {
	return nil
}

func (ec *ExploitCreate) sqlSave(ctx context.Context) (*Exploit, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *ExploitCreate) createSpec() (*Exploit, *sqlgraph.CreateSpec) {
	var (
		_node = &Exploit{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(exploit.Table, sqlgraph.NewFieldSpec(exploit.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = ec.conflict
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ec.mutation.ExploitID(); ok {
		_spec.SetField(exploit.FieldExploitID, field.TypeString, value)
		_node.ExploitID = &value
	}
	if value, ok := ec.mutation.Description(); ok {
		_spec.SetField(exploit.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := ec.mutation.Payload(); ok {
		_spec.SetField(exploit.FieldPayload, field.TypeString, value)
		_node.Payload = &value
	}
	if nodes := ec.mutation.CertifyVexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exploit.CertifyVexTable,
			Columns: exploit.CertifyVexPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Exploit.Create().
//		SetExploitID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExploitUpsert) {
//			SetExploitID(v+v).
//		}).
//		Exec(ctx)
func (ec *ExploitCreate) OnConflict(opts ...sql.ConflictOption) *ExploitUpsertOne {
	ec.conflict = opts
	return &ExploitUpsertOne{
		create: ec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Exploit.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ec *ExploitCreate) OnConflictColumns(columns ...string) *ExploitUpsertOne {
	ec.conflict = append(ec.conflict, sql.ConflictColumns(columns...))
	return &ExploitUpsertOne{
		create: ec,
	}
}

type (
	// ExploitUpsertOne is the builder for "upsert"-ing
	//  one Exploit node.
	ExploitUpsertOne struct {
		create *ExploitCreate
	}

	// ExploitUpsert is the "OnConflict" setter.
	ExploitUpsert struct {
		*sql.UpdateSet
	}
)

// SetExploitID sets the "exploit_id" field.
func (u *ExploitUpsert) SetExploitID(v string) *ExploitUpsert {
	u.Set(exploit.FieldExploitID, v)
	return u
}

// UpdateExploitID sets the "exploit_id" field to the value that was provided on create.
func (u *ExploitUpsert) UpdateExploitID() *ExploitUpsert {
	u.SetExcluded(exploit.FieldExploitID)
	return u
}

// ClearExploitID clears the value of the "exploit_id" field.
func (u *ExploitUpsert) ClearExploitID() *ExploitUpsert {
	u.SetNull(exploit.FieldExploitID)
	return u
}

// SetDescription sets the "description" field.
func (u *ExploitUpsert) SetDescription(v string) *ExploitUpsert {
	u.Set(exploit.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ExploitUpsert) UpdateDescription() *ExploitUpsert {
	u.SetExcluded(exploit.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *ExploitUpsert) ClearDescription() *ExploitUpsert {
	u.SetNull(exploit.FieldDescription)
	return u
}

// SetPayload sets the "payload" field.
func (u *ExploitUpsert) SetPayload(v string) *ExploitUpsert {
	u.Set(exploit.FieldPayload, v)
	return u
}

// UpdatePayload sets the "payload" field to the value that was provided on create.
func (u *ExploitUpsert) UpdatePayload() *ExploitUpsert {
	u.SetExcluded(exploit.FieldPayload)
	return u
}

// ClearPayload clears the value of the "payload" field.
func (u *ExploitUpsert) ClearPayload() *ExploitUpsert {
	u.SetNull(exploit.FieldPayload)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Exploit.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(exploit.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ExploitUpsertOne) UpdateNewValues() *ExploitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(exploit.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Exploit.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ExploitUpsertOne) Ignore() *ExploitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExploitUpsertOne) DoNothing() *ExploitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExploitCreate.OnConflict
// documentation for more info.
func (u *ExploitUpsertOne) Update(set func(*ExploitUpsert)) *ExploitUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExploitUpsert{UpdateSet: update})
	}))
	return u
}

// SetExploitID sets the "exploit_id" field.
func (u *ExploitUpsertOne) SetExploitID(v string) *ExploitUpsertOne {
	return u.Update(func(s *ExploitUpsert) {
		s.SetExploitID(v)
	})
}

// UpdateExploitID sets the "exploit_id" field to the value that was provided on create.
func (u *ExploitUpsertOne) UpdateExploitID() *ExploitUpsertOne {
	return u.Update(func(s *ExploitUpsert) {
		s.UpdateExploitID()
	})
}

// ClearExploitID clears the value of the "exploit_id" field.
func (u *ExploitUpsertOne) ClearExploitID() *ExploitUpsertOne {
	return u.Update(func(s *ExploitUpsert) {
		s.ClearExploitID()
	})
}

// SetDescription sets the "description" field.
func (u *ExploitUpsertOne) SetDescription(v string) *ExploitUpsertOne {
	return u.Update(func(s *ExploitUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ExploitUpsertOne) UpdateDescription() *ExploitUpsertOne {
	return u.Update(func(s *ExploitUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ExploitUpsertOne) ClearDescription() *ExploitUpsertOne {
	return u.Update(func(s *ExploitUpsert) {
		s.ClearDescription()
	})
}

// SetPayload sets the "payload" field.
func (u *ExploitUpsertOne) SetPayload(v string) *ExploitUpsertOne {
	return u.Update(func(s *ExploitUpsert) {
		s.SetPayload(v)
	})
}

// UpdatePayload sets the "payload" field to the value that was provided on create.
func (u *ExploitUpsertOne) UpdatePayload() *ExploitUpsertOne {
	return u.Update(func(s *ExploitUpsert) {
		s.UpdatePayload()
	})
}

// ClearPayload clears the value of the "payload" field.
func (u *ExploitUpsertOne) ClearPayload() *ExploitUpsertOne {
	return u.Update(func(s *ExploitUpsert) {
		s.ClearPayload()
	})
}

// Exec executes the query.
func (u *ExploitUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ExploitCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExploitUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ExploitUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ExploitUpsertOne.ID is not supported by MySQL driver. Use ExploitUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ExploitUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ExploitCreateBulk is the builder for creating many Exploit entities in bulk.
type ExploitCreateBulk struct {
	config
	err      error
	builders []*ExploitCreate
	conflict []sql.ConflictOption
}

// Save creates the Exploit entities in the database.
func (ecb *ExploitCreateBulk) Save(ctx context.Context) ([]*Exploit, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Exploit, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExploitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *ExploitCreateBulk) SaveX(ctx context.Context) []*Exploit {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *ExploitCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *ExploitCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Exploit.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExploitUpsert) {
//			SetExploitID(v+v).
//		}).
//		Exec(ctx)
func (ecb *ExploitCreateBulk) OnConflict(opts ...sql.ConflictOption) *ExploitUpsertBulk {
	ecb.conflict = opts
	return &ExploitUpsertBulk{
		create: ecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Exploit.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ecb *ExploitCreateBulk) OnConflictColumns(columns ...string) *ExploitUpsertBulk {
	ecb.conflict = append(ecb.conflict, sql.ConflictColumns(columns...))
	return &ExploitUpsertBulk{
		create: ecb,
	}
}

// ExploitUpsertBulk is the builder for "upsert"-ing
// a bulk of Exploit nodes.
type ExploitUpsertBulk struct {
	create *ExploitCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Exploit.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(exploit.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ExploitUpsertBulk) UpdateNewValues() *ExploitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(exploit.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Exploit.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ExploitUpsertBulk) Ignore() *ExploitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExploitUpsertBulk) DoNothing() *ExploitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExploitCreateBulk.OnConflict
// documentation for more info.
func (u *ExploitUpsertBulk) Update(set func(*ExploitUpsert)) *ExploitUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExploitUpsert{UpdateSet: update})
	}))
	return u
}

// SetExploitID sets the "exploit_id" field.
func (u *ExploitUpsertBulk) SetExploitID(v string) *ExploitUpsertBulk {
	return u.Update(func(s *ExploitUpsert) {
		s.SetExploitID(v)
	})
}

// UpdateExploitID sets the "exploit_id" field to the value that was provided on create.
func (u *ExploitUpsertBulk) UpdateExploitID() *ExploitUpsertBulk {
	return u.Update(func(s *ExploitUpsert) {
		s.UpdateExploitID()
	})
}

// ClearExploitID clears the value of the "exploit_id" field.
func (u *ExploitUpsertBulk) ClearExploitID() *ExploitUpsertBulk {
	return u.Update(func(s *ExploitUpsert) {
		s.ClearExploitID()
	})
}

// SetDescription sets the "description" field.
func (u *ExploitUpsertBulk) SetDescription(v string) *ExploitUpsertBulk {
	return u.Update(func(s *ExploitUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ExploitUpsertBulk) UpdateDescription() *ExploitUpsertBulk {
	return u.Update(func(s *ExploitUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ExploitUpsertBulk) ClearDescription() *ExploitUpsertBulk {
	return u.Update(func(s *ExploitUpsert) {
		s.ClearDescription()
	})
}

// SetPayload sets the "payload" field.
func (u *ExploitUpsertBulk) SetPayload(v string) *ExploitUpsertBulk {
	return u.Update(func(s *ExploitUpsert) {
		s.SetPayload(v)
	})
}

// UpdatePayload sets the "payload" field to the value that was provided on create.
func (u *ExploitUpsertBulk) UpdatePayload() *ExploitUpsertBulk {
	return u.Update(func(s *ExploitUpsert) {
		s.UpdatePayload()
	})
}

// ClearPayload clears the value of the "payload" field.
func (u *ExploitUpsertBulk) ClearPayload() *ExploitUpsertBulk {
	return u.Update(func(s *ExploitUpsert) {
		s.ClearPayload()
	})
}

// Exec executes the query.
func (u *ExploitUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ExploitCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ExploitCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExploitUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
