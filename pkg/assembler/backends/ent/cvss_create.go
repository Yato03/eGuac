// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyvex"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/cvss"
)

// CVSSCreate is the builder for creating a CVSS entity.
type CVSSCreate struct {
	config
	mutation *CVSSMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetVulnImpact sets the "vuln_impact" field.
func (cc *CVSSCreate) SetVulnImpact(f float64) *CVSSCreate {
	cc.mutation.SetVulnImpact(f)
	return cc
}

// SetVersion sets the "version" field.
func (cc *CVSSCreate) SetVersion(s string) *CVSSCreate {
	cc.mutation.SetVersion(s)
	return cc
}

// SetAttackVector sets the "attack_vector" field.
func (cc *CVSSCreate) SetAttackVector(s string) *CVSSCreate {
	cc.mutation.SetAttackVector(s)
	return cc
}

// SetID sets the "id" field.
func (cc *CVSSCreate) SetID(u uuid.UUID) *CVSSCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CVSSCreate) SetNillableID(u *uuid.UUID) *CVSSCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// AddCertifyVexIDs adds the "certify_vex" edge to the CertifyVex entity by IDs.
func (cc *CVSSCreate) AddCertifyVexIDs(ids ...uuid.UUID) *CVSSCreate {
	cc.mutation.AddCertifyVexIDs(ids...)
	return cc
}

// AddCertifyVex adds the "certify_vex" edges to the CertifyVex entity.
func (cc *CVSSCreate) AddCertifyVex(c ...*CertifyVex) *CVSSCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddCertifyVexIDs(ids...)
}

// Mutation returns the CVSSMutation object of the builder.
func (cc *CVSSCreate) Mutation() *CVSSMutation {
	return cc.mutation
}

// Save creates the CVSS in the database.
func (cc *CVSSCreate) Save(ctx context.Context) (*CVSS, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CVSSCreate) SaveX(ctx context.Context) *CVSS {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CVSSCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CVSSCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CVSSCreate) defaults() {
	if _, ok := cc.mutation.ID(); !ok {
		v := cvss.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CVSSCreate) check() error {
	if _, ok := cc.mutation.VulnImpact(); !ok {
		return &ValidationError{Name: "vuln_impact", err: errors.New(`ent: missing required field "CVSS.vuln_impact"`)}
	}
	if _, ok := cc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "CVSS.version"`)}
	}
	if _, ok := cc.mutation.AttackVector(); !ok {
		return &ValidationError{Name: "attack_vector", err: errors.New(`ent: missing required field "CVSS.attack_vector"`)}
	}
	return nil
}

func (cc *CVSSCreate) sqlSave(ctx context.Context) (*CVSS, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CVSSCreate) createSpec() (*CVSS, *sqlgraph.CreateSpec) {
	var (
		_node = &CVSS{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(cvss.Table, sqlgraph.NewFieldSpec(cvss.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.VulnImpact(); ok {
		_spec.SetField(cvss.FieldVulnImpact, field.TypeFloat64, value)
		_node.VulnImpact = value
	}
	if value, ok := cc.mutation.Version(); ok {
		_spec.SetField(cvss.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := cc.mutation.AttackVector(); ok {
		_spec.SetField(cvss.FieldAttackVector, field.TypeString, value)
		_node.AttackVector = value
	}
	if nodes := cc.mutation.CertifyVexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   cvss.CertifyVexTable,
			Columns: []string{cvss.CertifyVexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CVSS.Create().
//		SetVulnImpact(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CVSSUpsert) {
//			SetVulnImpact(v+v).
//		}).
//		Exec(ctx)
func (cc *CVSSCreate) OnConflict(opts ...sql.ConflictOption) *CVSSUpsertOne {
	cc.conflict = opts
	return &CVSSUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CVSS.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CVSSCreate) OnConflictColumns(columns ...string) *CVSSUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CVSSUpsertOne{
		create: cc,
	}
}

type (
	// CVSSUpsertOne is the builder for "upsert"-ing
	//  one CVSS node.
	CVSSUpsertOne struct {
		create *CVSSCreate
	}

	// CVSSUpsert is the "OnConflict" setter.
	CVSSUpsert struct {
		*sql.UpdateSet
	}
)

// SetVulnImpact sets the "vuln_impact" field.
func (u *CVSSUpsert) SetVulnImpact(v float64) *CVSSUpsert {
	u.Set(cvss.FieldVulnImpact, v)
	return u
}

// UpdateVulnImpact sets the "vuln_impact" field to the value that was provided on create.
func (u *CVSSUpsert) UpdateVulnImpact() *CVSSUpsert {
	u.SetExcluded(cvss.FieldVulnImpact)
	return u
}

// AddVulnImpact adds v to the "vuln_impact" field.
func (u *CVSSUpsert) AddVulnImpact(v float64) *CVSSUpsert {
	u.Add(cvss.FieldVulnImpact, v)
	return u
}

// SetVersion sets the "version" field.
func (u *CVSSUpsert) SetVersion(v string) *CVSSUpsert {
	u.Set(cvss.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *CVSSUpsert) UpdateVersion() *CVSSUpsert {
	u.SetExcluded(cvss.FieldVersion)
	return u
}

// SetAttackVector sets the "attack_vector" field.
func (u *CVSSUpsert) SetAttackVector(v string) *CVSSUpsert {
	u.Set(cvss.FieldAttackVector, v)
	return u
}

// UpdateAttackVector sets the "attack_vector" field to the value that was provided on create.
func (u *CVSSUpsert) UpdateAttackVector() *CVSSUpsert {
	u.SetExcluded(cvss.FieldAttackVector)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CVSS.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(cvss.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CVSSUpsertOne) UpdateNewValues() *CVSSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(cvss.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CVSS.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CVSSUpsertOne) Ignore() *CVSSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CVSSUpsertOne) DoNothing() *CVSSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CVSSCreate.OnConflict
// documentation for more info.
func (u *CVSSUpsertOne) Update(set func(*CVSSUpsert)) *CVSSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CVSSUpsert{UpdateSet: update})
	}))
	return u
}

// SetVulnImpact sets the "vuln_impact" field.
func (u *CVSSUpsertOne) SetVulnImpact(v float64) *CVSSUpsertOne {
	return u.Update(func(s *CVSSUpsert) {
		s.SetVulnImpact(v)
	})
}

// AddVulnImpact adds v to the "vuln_impact" field.
func (u *CVSSUpsertOne) AddVulnImpact(v float64) *CVSSUpsertOne {
	return u.Update(func(s *CVSSUpsert) {
		s.AddVulnImpact(v)
	})
}

// UpdateVulnImpact sets the "vuln_impact" field to the value that was provided on create.
func (u *CVSSUpsertOne) UpdateVulnImpact() *CVSSUpsertOne {
	return u.Update(func(s *CVSSUpsert) {
		s.UpdateVulnImpact()
	})
}

// SetVersion sets the "version" field.
func (u *CVSSUpsertOne) SetVersion(v string) *CVSSUpsertOne {
	return u.Update(func(s *CVSSUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *CVSSUpsertOne) UpdateVersion() *CVSSUpsertOne {
	return u.Update(func(s *CVSSUpsert) {
		s.UpdateVersion()
	})
}

// SetAttackVector sets the "attack_vector" field.
func (u *CVSSUpsertOne) SetAttackVector(v string) *CVSSUpsertOne {
	return u.Update(func(s *CVSSUpsert) {
		s.SetAttackVector(v)
	})
}

// UpdateAttackVector sets the "attack_vector" field to the value that was provided on create.
func (u *CVSSUpsertOne) UpdateAttackVector() *CVSSUpsertOne {
	return u.Update(func(s *CVSSUpsert) {
		s.UpdateAttackVector()
	})
}

// Exec executes the query.
func (u *CVSSUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CVSSCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CVSSUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CVSSUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CVSSUpsertOne.ID is not supported by MySQL driver. Use CVSSUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CVSSUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CVSSCreateBulk is the builder for creating many CVSS entities in bulk.
type CVSSCreateBulk struct {
	config
	err      error
	builders []*CVSSCreate
	conflict []sql.ConflictOption
}

// Save creates the CVSS entities in the database.
func (ccb *CVSSCreateBulk) Save(ctx context.Context) ([]*CVSS, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*CVSS, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CVSSMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CVSSCreateBulk) SaveX(ctx context.Context) []*CVSS {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CVSSCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CVSSCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CVSS.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CVSSUpsert) {
//			SetVulnImpact(v+v).
//		}).
//		Exec(ctx)
func (ccb *CVSSCreateBulk) OnConflict(opts ...sql.ConflictOption) *CVSSUpsertBulk {
	ccb.conflict = opts
	return &CVSSUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CVSS.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CVSSCreateBulk) OnConflictColumns(columns ...string) *CVSSUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CVSSUpsertBulk{
		create: ccb,
	}
}

// CVSSUpsertBulk is the builder for "upsert"-ing
// a bulk of CVSS nodes.
type CVSSUpsertBulk struct {
	create *CVSSCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CVSS.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(cvss.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CVSSUpsertBulk) UpdateNewValues() *CVSSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(cvss.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CVSS.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CVSSUpsertBulk) Ignore() *CVSSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CVSSUpsertBulk) DoNothing() *CVSSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CVSSCreateBulk.OnConflict
// documentation for more info.
func (u *CVSSUpsertBulk) Update(set func(*CVSSUpsert)) *CVSSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CVSSUpsert{UpdateSet: update})
	}))
	return u
}

// SetVulnImpact sets the "vuln_impact" field.
func (u *CVSSUpsertBulk) SetVulnImpact(v float64) *CVSSUpsertBulk {
	return u.Update(func(s *CVSSUpsert) {
		s.SetVulnImpact(v)
	})
}

// AddVulnImpact adds v to the "vuln_impact" field.
func (u *CVSSUpsertBulk) AddVulnImpact(v float64) *CVSSUpsertBulk {
	return u.Update(func(s *CVSSUpsert) {
		s.AddVulnImpact(v)
	})
}

// UpdateVulnImpact sets the "vuln_impact" field to the value that was provided on create.
func (u *CVSSUpsertBulk) UpdateVulnImpact() *CVSSUpsertBulk {
	return u.Update(func(s *CVSSUpsert) {
		s.UpdateVulnImpact()
	})
}

// SetVersion sets the "version" field.
func (u *CVSSUpsertBulk) SetVersion(v string) *CVSSUpsertBulk {
	return u.Update(func(s *CVSSUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *CVSSUpsertBulk) UpdateVersion() *CVSSUpsertBulk {
	return u.Update(func(s *CVSSUpsert) {
		s.UpdateVersion()
	})
}

// SetAttackVector sets the "attack_vector" field.
func (u *CVSSUpsertBulk) SetAttackVector(v string) *CVSSUpsertBulk {
	return u.Update(func(s *CVSSUpsert) {
		s.SetAttackVector(v)
	})
}

// UpdateAttackVector sets the "attack_vector" field to the value that was provided on create.
func (u *CVSSUpsertBulk) UpdateAttackVector() *CVSSUpsertBulk {
	return u.Update(func(s *CVSSUpsert) {
		s.UpdateAttackVector()
	})
}

// Exec executes the query.
func (u *CVSSUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CVSSCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CVSSCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CVSSUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
