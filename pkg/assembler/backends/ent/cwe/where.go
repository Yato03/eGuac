// Code generated by ent, DO NOT EDIT.

package cwe

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.CWE {
	return predicate.CWE(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.CWE {
	return predicate.CWE(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.CWE {
	return predicate.CWE(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.CWE {
	return predicate.CWE(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.CWE {
	return predicate.CWE(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.CWE {
	return predicate.CWE(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.CWE {
	return predicate.CWE(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.CWE {
	return predicate.CWE(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.CWE {
	return predicate.CWE(sql.FieldLTE(FieldID, id))
}

// VexID applies equality check predicate on the "vex_id" field. It's identical to VexIDEQ.
func VexID(v string) predicate.CWE {
	return predicate.CWE(sql.FieldEQ(FieldVexID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.CWE {
	return predicate.CWE(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.CWE {
	return predicate.CWE(sql.FieldEQ(FieldDescription, v))
}

// BackgroundDetail applies equality check predicate on the "background_detail" field. It's identical to BackgroundDetailEQ.
func BackgroundDetail(v string) predicate.CWE {
	return predicate.CWE(sql.FieldEQ(FieldBackgroundDetail, v))
}

// VexIDEQ applies the EQ predicate on the "vex_id" field.
func VexIDEQ(v string) predicate.CWE {
	return predicate.CWE(sql.FieldEQ(FieldVexID, v))
}

// VexIDNEQ applies the NEQ predicate on the "vex_id" field.
func VexIDNEQ(v string) predicate.CWE {
	return predicate.CWE(sql.FieldNEQ(FieldVexID, v))
}

// VexIDIn applies the In predicate on the "vex_id" field.
func VexIDIn(vs ...string) predicate.CWE {
	return predicate.CWE(sql.FieldIn(FieldVexID, vs...))
}

// VexIDNotIn applies the NotIn predicate on the "vex_id" field.
func VexIDNotIn(vs ...string) predicate.CWE {
	return predicate.CWE(sql.FieldNotIn(FieldVexID, vs...))
}

// VexIDGT applies the GT predicate on the "vex_id" field.
func VexIDGT(v string) predicate.CWE {
	return predicate.CWE(sql.FieldGT(FieldVexID, v))
}

// VexIDGTE applies the GTE predicate on the "vex_id" field.
func VexIDGTE(v string) predicate.CWE {
	return predicate.CWE(sql.FieldGTE(FieldVexID, v))
}

// VexIDLT applies the LT predicate on the "vex_id" field.
func VexIDLT(v string) predicate.CWE {
	return predicate.CWE(sql.FieldLT(FieldVexID, v))
}

// VexIDLTE applies the LTE predicate on the "vex_id" field.
func VexIDLTE(v string) predicate.CWE {
	return predicate.CWE(sql.FieldLTE(FieldVexID, v))
}

// VexIDContains applies the Contains predicate on the "vex_id" field.
func VexIDContains(v string) predicate.CWE {
	return predicate.CWE(sql.FieldContains(FieldVexID, v))
}

// VexIDHasPrefix applies the HasPrefix predicate on the "vex_id" field.
func VexIDHasPrefix(v string) predicate.CWE {
	return predicate.CWE(sql.FieldHasPrefix(FieldVexID, v))
}

// VexIDHasSuffix applies the HasSuffix predicate on the "vex_id" field.
func VexIDHasSuffix(v string) predicate.CWE {
	return predicate.CWE(sql.FieldHasSuffix(FieldVexID, v))
}

// VexIDEqualFold applies the EqualFold predicate on the "vex_id" field.
func VexIDEqualFold(v string) predicate.CWE {
	return predicate.CWE(sql.FieldEqualFold(FieldVexID, v))
}

// VexIDContainsFold applies the ContainsFold predicate on the "vex_id" field.
func VexIDContainsFold(v string) predicate.CWE {
	return predicate.CWE(sql.FieldContainsFold(FieldVexID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.CWE {
	return predicate.CWE(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.CWE {
	return predicate.CWE(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.CWE {
	return predicate.CWE(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.CWE {
	return predicate.CWE(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.CWE {
	return predicate.CWE(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.CWE {
	return predicate.CWE(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.CWE {
	return predicate.CWE(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.CWE {
	return predicate.CWE(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.CWE {
	return predicate.CWE(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.CWE {
	return predicate.CWE(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.CWE {
	return predicate.CWE(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.CWE {
	return predicate.CWE(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.CWE {
	return predicate.CWE(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.CWE {
	return predicate.CWE(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.CWE {
	return predicate.CWE(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.CWE {
	return predicate.CWE(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.CWE {
	return predicate.CWE(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.CWE {
	return predicate.CWE(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.CWE {
	return predicate.CWE(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.CWE {
	return predicate.CWE(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.CWE {
	return predicate.CWE(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.CWE {
	return predicate.CWE(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.CWE {
	return predicate.CWE(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.CWE {
	return predicate.CWE(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.CWE {
	return predicate.CWE(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.CWE {
	return predicate.CWE(sql.FieldContainsFold(FieldDescription, v))
}

// BackgroundDetailEQ applies the EQ predicate on the "background_detail" field.
func BackgroundDetailEQ(v string) predicate.CWE {
	return predicate.CWE(sql.FieldEQ(FieldBackgroundDetail, v))
}

// BackgroundDetailNEQ applies the NEQ predicate on the "background_detail" field.
func BackgroundDetailNEQ(v string) predicate.CWE {
	return predicate.CWE(sql.FieldNEQ(FieldBackgroundDetail, v))
}

// BackgroundDetailIn applies the In predicate on the "background_detail" field.
func BackgroundDetailIn(vs ...string) predicate.CWE {
	return predicate.CWE(sql.FieldIn(FieldBackgroundDetail, vs...))
}

// BackgroundDetailNotIn applies the NotIn predicate on the "background_detail" field.
func BackgroundDetailNotIn(vs ...string) predicate.CWE {
	return predicate.CWE(sql.FieldNotIn(FieldBackgroundDetail, vs...))
}

// BackgroundDetailGT applies the GT predicate on the "background_detail" field.
func BackgroundDetailGT(v string) predicate.CWE {
	return predicate.CWE(sql.FieldGT(FieldBackgroundDetail, v))
}

// BackgroundDetailGTE applies the GTE predicate on the "background_detail" field.
func BackgroundDetailGTE(v string) predicate.CWE {
	return predicate.CWE(sql.FieldGTE(FieldBackgroundDetail, v))
}

// BackgroundDetailLT applies the LT predicate on the "background_detail" field.
func BackgroundDetailLT(v string) predicate.CWE {
	return predicate.CWE(sql.FieldLT(FieldBackgroundDetail, v))
}

// BackgroundDetailLTE applies the LTE predicate on the "background_detail" field.
func BackgroundDetailLTE(v string) predicate.CWE {
	return predicate.CWE(sql.FieldLTE(FieldBackgroundDetail, v))
}

// BackgroundDetailContains applies the Contains predicate on the "background_detail" field.
func BackgroundDetailContains(v string) predicate.CWE {
	return predicate.CWE(sql.FieldContains(FieldBackgroundDetail, v))
}

// BackgroundDetailHasPrefix applies the HasPrefix predicate on the "background_detail" field.
func BackgroundDetailHasPrefix(v string) predicate.CWE {
	return predicate.CWE(sql.FieldHasPrefix(FieldBackgroundDetail, v))
}

// BackgroundDetailHasSuffix applies the HasSuffix predicate on the "background_detail" field.
func BackgroundDetailHasSuffix(v string) predicate.CWE {
	return predicate.CWE(sql.FieldHasSuffix(FieldBackgroundDetail, v))
}

// BackgroundDetailIsNil applies the IsNil predicate on the "background_detail" field.
func BackgroundDetailIsNil() predicate.CWE {
	return predicate.CWE(sql.FieldIsNull(FieldBackgroundDetail))
}

// BackgroundDetailNotNil applies the NotNil predicate on the "background_detail" field.
func BackgroundDetailNotNil() predicate.CWE {
	return predicate.CWE(sql.FieldNotNull(FieldBackgroundDetail))
}

// BackgroundDetailEqualFold applies the EqualFold predicate on the "background_detail" field.
func BackgroundDetailEqualFold(v string) predicate.CWE {
	return predicate.CWE(sql.FieldEqualFold(FieldBackgroundDetail, v))
}

// BackgroundDetailContainsFold applies the ContainsFold predicate on the "background_detail" field.
func BackgroundDetailContainsFold(v string) predicate.CWE {
	return predicate.CWE(sql.FieldContainsFold(FieldBackgroundDetail, v))
}

// HasCertifyVex applies the HasEdge predicate on the "certify_vex" edge.
func HasCertifyVex() predicate.CWE {
	return predicate.CWE(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CertifyVexTable, CertifyVexPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCertifyVexWith applies the HasEdge predicate on the "certify_vex" edge with a given conditions (other predicates).
func HasCertifyVexWith(preds ...predicate.CertifyVex) predicate.CWE {
	return predicate.CWE(func(s *sql.Selector) {
		step := newCertifyVexStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConsequence applies the HasEdge predicate on the "consequence" edge.
func HasConsequence() predicate.CWE {
	return predicate.CWE(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ConsequenceTable, ConsequencePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConsequenceWith applies the HasEdge predicate on the "consequence" edge with a given conditions (other predicates).
func HasConsequenceWith(preds ...predicate.Consequence) predicate.CWE {
	return predicate.CWE(func(s *sql.Selector) {
		step := newConsequenceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDemonstrativeExample applies the HasEdge predicate on the "demonstrative_example" edge.
func HasDemonstrativeExample() predicate.CWE {
	return predicate.CWE(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, DemonstrativeExampleTable, DemonstrativeExamplePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDemonstrativeExampleWith applies the HasEdge predicate on the "demonstrative_example" edge with a given conditions (other predicates).
func HasDemonstrativeExampleWith(preds ...predicate.DemonstrativeExample) predicate.CWE {
	return predicate.CWE(func(s *sql.Selector) {
		step := newDemonstrativeExampleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDetectionMethod applies the HasEdge predicate on the "detection_method" edge.
func HasDetectionMethod() predicate.CWE {
	return predicate.CWE(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, DetectionMethodTable, DetectionMethodPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDetectionMethodWith applies the HasEdge predicate on the "detection_method" edge with a given conditions (other predicates).
func HasDetectionMethodWith(preds ...predicate.DetectionMethod) predicate.CWE {
	return predicate.CWE(func(s *sql.Selector) {
		step := newDetectionMethodStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPotentialMitigation applies the HasEdge predicate on the "potential_mitigation" edge.
func HasPotentialMitigation() predicate.CWE {
	return predicate.CWE(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PotentialMitigationTable, PotentialMitigationPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPotentialMitigationWith applies the HasEdge predicate on the "potential_mitigation" edge with a given conditions (other predicates).
func HasPotentialMitigationWith(preds ...predicate.PotentialMitigation) predicate.CWE {
	return predicate.CWE(func(s *sql.Selector) {
		step := newPotentialMitigationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CWE) predicate.CWE {
	return predicate.CWE(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CWE) predicate.CWE {
	return predicate.CWE(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CWE) predicate.CWE {
	return predicate.CWE(sql.NotPredicates(p))
}
