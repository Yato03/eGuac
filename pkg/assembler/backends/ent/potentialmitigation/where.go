// Code generated by ent, DO NOT EDIT.

package potentialmitigation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldLTE(FieldID, id))
}

// Phase applies equality check predicate on the "phase" field. It's identical to PhaseEQ.
func Phase(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldEQ(FieldPhase, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldEQ(FieldDescription, v))
}

// Effectiveness applies equality check predicate on the "effectiveness" field. It's identical to EffectivenessEQ.
func Effectiveness(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldEQ(FieldEffectiveness, v))
}

// EffectivenessNotes applies equality check predicate on the "effectiveness_notes" field. It's identical to EffectivenessNotesEQ.
func EffectivenessNotes(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldEQ(FieldEffectivenessNotes, v))
}

// PhaseEQ applies the EQ predicate on the "phase" field.
func PhaseEQ(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldEQ(FieldPhase, v))
}

// PhaseNEQ applies the NEQ predicate on the "phase" field.
func PhaseNEQ(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldNEQ(FieldPhase, v))
}

// PhaseIn applies the In predicate on the "phase" field.
func PhaseIn(vs ...string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldIn(FieldPhase, vs...))
}

// PhaseNotIn applies the NotIn predicate on the "phase" field.
func PhaseNotIn(vs ...string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldNotIn(FieldPhase, vs...))
}

// PhaseGT applies the GT predicate on the "phase" field.
func PhaseGT(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldGT(FieldPhase, v))
}

// PhaseGTE applies the GTE predicate on the "phase" field.
func PhaseGTE(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldGTE(FieldPhase, v))
}

// PhaseLT applies the LT predicate on the "phase" field.
func PhaseLT(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldLT(FieldPhase, v))
}

// PhaseLTE applies the LTE predicate on the "phase" field.
func PhaseLTE(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldLTE(FieldPhase, v))
}

// PhaseContains applies the Contains predicate on the "phase" field.
func PhaseContains(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldContains(FieldPhase, v))
}

// PhaseHasPrefix applies the HasPrefix predicate on the "phase" field.
func PhaseHasPrefix(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldHasPrefix(FieldPhase, v))
}

// PhaseHasSuffix applies the HasSuffix predicate on the "phase" field.
func PhaseHasSuffix(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldHasSuffix(FieldPhase, v))
}

// PhaseIsNil applies the IsNil predicate on the "phase" field.
func PhaseIsNil() predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldIsNull(FieldPhase))
}

// PhaseNotNil applies the NotNil predicate on the "phase" field.
func PhaseNotNil() predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldNotNull(FieldPhase))
}

// PhaseEqualFold applies the EqualFold predicate on the "phase" field.
func PhaseEqualFold(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldEqualFold(FieldPhase, v))
}

// PhaseContainsFold applies the ContainsFold predicate on the "phase" field.
func PhaseContainsFold(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldContainsFold(FieldPhase, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldContainsFold(FieldDescription, v))
}

// EffectivenessEQ applies the EQ predicate on the "effectiveness" field.
func EffectivenessEQ(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldEQ(FieldEffectiveness, v))
}

// EffectivenessNEQ applies the NEQ predicate on the "effectiveness" field.
func EffectivenessNEQ(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldNEQ(FieldEffectiveness, v))
}

// EffectivenessIn applies the In predicate on the "effectiveness" field.
func EffectivenessIn(vs ...string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldIn(FieldEffectiveness, vs...))
}

// EffectivenessNotIn applies the NotIn predicate on the "effectiveness" field.
func EffectivenessNotIn(vs ...string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldNotIn(FieldEffectiveness, vs...))
}

// EffectivenessGT applies the GT predicate on the "effectiveness" field.
func EffectivenessGT(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldGT(FieldEffectiveness, v))
}

// EffectivenessGTE applies the GTE predicate on the "effectiveness" field.
func EffectivenessGTE(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldGTE(FieldEffectiveness, v))
}

// EffectivenessLT applies the LT predicate on the "effectiveness" field.
func EffectivenessLT(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldLT(FieldEffectiveness, v))
}

// EffectivenessLTE applies the LTE predicate on the "effectiveness" field.
func EffectivenessLTE(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldLTE(FieldEffectiveness, v))
}

// EffectivenessContains applies the Contains predicate on the "effectiveness" field.
func EffectivenessContains(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldContains(FieldEffectiveness, v))
}

// EffectivenessHasPrefix applies the HasPrefix predicate on the "effectiveness" field.
func EffectivenessHasPrefix(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldHasPrefix(FieldEffectiveness, v))
}

// EffectivenessHasSuffix applies the HasSuffix predicate on the "effectiveness" field.
func EffectivenessHasSuffix(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldHasSuffix(FieldEffectiveness, v))
}

// EffectivenessIsNil applies the IsNil predicate on the "effectiveness" field.
func EffectivenessIsNil() predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldIsNull(FieldEffectiveness))
}

// EffectivenessNotNil applies the NotNil predicate on the "effectiveness" field.
func EffectivenessNotNil() predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldNotNull(FieldEffectiveness))
}

// EffectivenessEqualFold applies the EqualFold predicate on the "effectiveness" field.
func EffectivenessEqualFold(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldEqualFold(FieldEffectiveness, v))
}

// EffectivenessContainsFold applies the ContainsFold predicate on the "effectiveness" field.
func EffectivenessContainsFold(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldContainsFold(FieldEffectiveness, v))
}

// EffectivenessNotesEQ applies the EQ predicate on the "effectiveness_notes" field.
func EffectivenessNotesEQ(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldEQ(FieldEffectivenessNotes, v))
}

// EffectivenessNotesNEQ applies the NEQ predicate on the "effectiveness_notes" field.
func EffectivenessNotesNEQ(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldNEQ(FieldEffectivenessNotes, v))
}

// EffectivenessNotesIn applies the In predicate on the "effectiveness_notes" field.
func EffectivenessNotesIn(vs ...string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldIn(FieldEffectivenessNotes, vs...))
}

// EffectivenessNotesNotIn applies the NotIn predicate on the "effectiveness_notes" field.
func EffectivenessNotesNotIn(vs ...string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldNotIn(FieldEffectivenessNotes, vs...))
}

// EffectivenessNotesGT applies the GT predicate on the "effectiveness_notes" field.
func EffectivenessNotesGT(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldGT(FieldEffectivenessNotes, v))
}

// EffectivenessNotesGTE applies the GTE predicate on the "effectiveness_notes" field.
func EffectivenessNotesGTE(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldGTE(FieldEffectivenessNotes, v))
}

// EffectivenessNotesLT applies the LT predicate on the "effectiveness_notes" field.
func EffectivenessNotesLT(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldLT(FieldEffectivenessNotes, v))
}

// EffectivenessNotesLTE applies the LTE predicate on the "effectiveness_notes" field.
func EffectivenessNotesLTE(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldLTE(FieldEffectivenessNotes, v))
}

// EffectivenessNotesContains applies the Contains predicate on the "effectiveness_notes" field.
func EffectivenessNotesContains(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldContains(FieldEffectivenessNotes, v))
}

// EffectivenessNotesHasPrefix applies the HasPrefix predicate on the "effectiveness_notes" field.
func EffectivenessNotesHasPrefix(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldHasPrefix(FieldEffectivenessNotes, v))
}

// EffectivenessNotesHasSuffix applies the HasSuffix predicate on the "effectiveness_notes" field.
func EffectivenessNotesHasSuffix(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldHasSuffix(FieldEffectivenessNotes, v))
}

// EffectivenessNotesIsNil applies the IsNil predicate on the "effectiveness_notes" field.
func EffectivenessNotesIsNil() predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldIsNull(FieldEffectivenessNotes))
}

// EffectivenessNotesNotNil applies the NotNil predicate on the "effectiveness_notes" field.
func EffectivenessNotesNotNil() predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldNotNull(FieldEffectivenessNotes))
}

// EffectivenessNotesEqualFold applies the EqualFold predicate on the "effectiveness_notes" field.
func EffectivenessNotesEqualFold(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldEqualFold(FieldEffectivenessNotes, v))
}

// EffectivenessNotesContainsFold applies the ContainsFold predicate on the "effectiveness_notes" field.
func EffectivenessNotesContainsFold(v string) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.FieldContainsFold(FieldEffectivenessNotes, v))
}

// HasCwe applies the HasEdge predicate on the "cwe" edge.
func HasCwe() predicate.PotentialMitigation {
	return predicate.PotentialMitigation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CweTable, CwePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCweWith applies the HasEdge predicate on the "cwe" edge with a given conditions (other predicates).
func HasCweWith(preds ...predicate.CWE) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(func(s *sql.Selector) {
		step := newCweStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PotentialMitigation) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PotentialMitigation) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PotentialMitigation) predicate.PotentialMitigation {
	return predicate.PotentialMitigation(sql.NotPredicates(p))
}
