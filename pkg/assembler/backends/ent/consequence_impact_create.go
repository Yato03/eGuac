// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/consequence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/consequence_impact"
)

// ConsequenceImpactCreate is the builder for creating a Consequence_Impact entity.
type ConsequenceImpactCreate struct {
	config
	mutation *ConsequenceImpactMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetImpact sets the "impact" field.
func (cic *ConsequenceImpactCreate) SetImpact(s string) *ConsequenceImpactCreate {
	cic.mutation.SetImpact(s)
	return cic
}

// SetID sets the "id" field.
func (cic *ConsequenceImpactCreate) SetID(u uuid.UUID) *ConsequenceImpactCreate {
	cic.mutation.SetID(u)
	return cic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cic *ConsequenceImpactCreate) SetNillableID(u *uuid.UUID) *ConsequenceImpactCreate {
	if u != nil {
		cic.SetID(*u)
	}
	return cic
}

// AddConsequenceIDs adds the "consequence" edge to the Consequence entity by IDs.
func (cic *ConsequenceImpactCreate) AddConsequenceIDs(ids ...uuid.UUID) *ConsequenceImpactCreate {
	cic.mutation.AddConsequenceIDs(ids...)
	return cic
}

// AddConsequence adds the "consequence" edges to the Consequence entity.
func (cic *ConsequenceImpactCreate) AddConsequence(c ...*Consequence) *ConsequenceImpactCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cic.AddConsequenceIDs(ids...)
}

// Mutation returns the ConsequenceImpactMutation object of the builder.
func (cic *ConsequenceImpactCreate) Mutation() *ConsequenceImpactMutation {
	return cic.mutation
}

// Save creates the Consequence_Impact in the database.
func (cic *ConsequenceImpactCreate) Save(ctx context.Context) (*Consequence_Impact, error) {
	cic.defaults()
	return withHooks(ctx, cic.sqlSave, cic.mutation, cic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cic *ConsequenceImpactCreate) SaveX(ctx context.Context) *Consequence_Impact {
	v, err := cic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cic *ConsequenceImpactCreate) Exec(ctx context.Context) error {
	_, err := cic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cic *ConsequenceImpactCreate) ExecX(ctx context.Context) {
	if err := cic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cic *ConsequenceImpactCreate) defaults() {
	if _, ok := cic.mutation.ID(); !ok {
		v := consequence_impact.DefaultID()
		cic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cic *ConsequenceImpactCreate) check() error {
	if _, ok := cic.mutation.Impact(); !ok {
		return &ValidationError{Name: "impact", err: errors.New(`ent: missing required field "Consequence_Impact.impact"`)}
	}
	return nil
}

func (cic *ConsequenceImpactCreate) sqlSave(ctx context.Context) (*Consequence_Impact, error) {
	if err := cic.check(); err != nil {
		return nil, err
	}
	_node, _spec := cic.createSpec()
	if err := sqlgraph.CreateNode(ctx, cic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cic.mutation.id = &_node.ID
	cic.mutation.done = true
	return _node, nil
}

func (cic *ConsequenceImpactCreate) createSpec() (*Consequence_Impact, *sqlgraph.CreateSpec) {
	var (
		_node = &Consequence_Impact{config: cic.config}
		_spec = sqlgraph.NewCreateSpec(consequence_impact.Table, sqlgraph.NewFieldSpec(consequence_impact.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = cic.conflict
	if id, ok := cic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cic.mutation.Impact(); ok {
		_spec.SetField(consequence_impact.FieldImpact, field.TypeString, value)
		_node.Impact = value
	}
	if nodes := cic.mutation.ConsequenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consequence_impact.ConsequenceTable,
			Columns: consequence_impact.ConsequencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Consequence_Impact.Create().
//		SetImpact(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Consequence_ImpactUpsert) {
//			SetImpact(v+v).
//		}).
//		Exec(ctx)
func (cic *ConsequenceImpactCreate) OnConflict(opts ...sql.ConflictOption) *Consequence_ImpactUpsertOne {
	cic.conflict = opts
	return &Consequence_ImpactUpsertOne{
		create: cic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Consequence_Impact.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cic *ConsequenceImpactCreate) OnConflictColumns(columns ...string) *Consequence_ImpactUpsertOne {
	cic.conflict = append(cic.conflict, sql.ConflictColumns(columns...))
	return &Consequence_ImpactUpsertOne{
		create: cic,
	}
}

type (
	// Consequence_ImpactUpsertOne is the builder for "upsert"-ing
	//  one Consequence_Impact node.
	Consequence_ImpactUpsertOne struct {
		create *ConsequenceImpactCreate
	}

	// Consequence_ImpactUpsert is the "OnConflict" setter.
	Consequence_ImpactUpsert struct {
		*sql.UpdateSet
	}
)

// SetImpact sets the "impact" field.
func (u *Consequence_ImpactUpsert) SetImpact(v string) *Consequence_ImpactUpsert {
	u.Set(consequence_impact.FieldImpact, v)
	return u
}

// UpdateImpact sets the "impact" field to the value that was provided on create.
func (u *Consequence_ImpactUpsert) UpdateImpact() *Consequence_ImpactUpsert {
	u.SetExcluded(consequence_impact.FieldImpact)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Consequence_Impact.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(consequence_impact.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *Consequence_ImpactUpsertOne) UpdateNewValues() *Consequence_ImpactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(consequence_impact.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Consequence_Impact.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *Consequence_ImpactUpsertOne) Ignore() *Consequence_ImpactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Consequence_ImpactUpsertOne) DoNothing() *Consequence_ImpactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConsequenceImpactCreate.OnConflict
// documentation for more info.
func (u *Consequence_ImpactUpsertOne) Update(set func(*Consequence_ImpactUpsert)) *Consequence_ImpactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Consequence_ImpactUpsert{UpdateSet: update})
	}))
	return u
}

// SetImpact sets the "impact" field.
func (u *Consequence_ImpactUpsertOne) SetImpact(v string) *Consequence_ImpactUpsertOne {
	return u.Update(func(s *Consequence_ImpactUpsert) {
		s.SetImpact(v)
	})
}

// UpdateImpact sets the "impact" field to the value that was provided on create.
func (u *Consequence_ImpactUpsertOne) UpdateImpact() *Consequence_ImpactUpsertOne {
	return u.Update(func(s *Consequence_ImpactUpsert) {
		s.UpdateImpact()
	})
}

// Exec executes the query.
func (u *Consequence_ImpactUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ConsequenceImpactCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Consequence_ImpactUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *Consequence_ImpactUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: Consequence_ImpactUpsertOne.ID is not supported by MySQL driver. Use Consequence_ImpactUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *Consequence_ImpactUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ConsequenceImpactCreateBulk is the builder for creating many Consequence_Impact entities in bulk.
type ConsequenceImpactCreateBulk struct {
	config
	err      error
	builders []*ConsequenceImpactCreate
	conflict []sql.ConflictOption
}

// Save creates the Consequence_Impact entities in the database.
func (cicb *ConsequenceImpactCreateBulk) Save(ctx context.Context) ([]*Consequence_Impact, error) {
	if cicb.err != nil {
		return nil, cicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cicb.builders))
	nodes := make([]*Consequence_Impact, len(cicb.builders))
	mutators := make([]Mutator, len(cicb.builders))
	for i := range cicb.builders {
		func(i int, root context.Context) {
			builder := cicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConsequenceImpactMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cicb *ConsequenceImpactCreateBulk) SaveX(ctx context.Context) []*Consequence_Impact {
	v, err := cicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cicb *ConsequenceImpactCreateBulk) Exec(ctx context.Context) error {
	_, err := cicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cicb *ConsequenceImpactCreateBulk) ExecX(ctx context.Context) {
	if err := cicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Consequence_Impact.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Consequence_ImpactUpsert) {
//			SetImpact(v+v).
//		}).
//		Exec(ctx)
func (cicb *ConsequenceImpactCreateBulk) OnConflict(opts ...sql.ConflictOption) *Consequence_ImpactUpsertBulk {
	cicb.conflict = opts
	return &Consequence_ImpactUpsertBulk{
		create: cicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Consequence_Impact.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cicb *ConsequenceImpactCreateBulk) OnConflictColumns(columns ...string) *Consequence_ImpactUpsertBulk {
	cicb.conflict = append(cicb.conflict, sql.ConflictColumns(columns...))
	return &Consequence_ImpactUpsertBulk{
		create: cicb,
	}
}

// Consequence_ImpactUpsertBulk is the builder for "upsert"-ing
// a bulk of Consequence_Impact nodes.
type Consequence_ImpactUpsertBulk struct {
	create *ConsequenceImpactCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Consequence_Impact.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(consequence_impact.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *Consequence_ImpactUpsertBulk) UpdateNewValues() *Consequence_ImpactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(consequence_impact.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Consequence_Impact.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *Consequence_ImpactUpsertBulk) Ignore() *Consequence_ImpactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Consequence_ImpactUpsertBulk) DoNothing() *Consequence_ImpactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConsequenceImpactCreateBulk.OnConflict
// documentation for more info.
func (u *Consequence_ImpactUpsertBulk) Update(set func(*Consequence_ImpactUpsert)) *Consequence_ImpactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Consequence_ImpactUpsert{UpdateSet: update})
	}))
	return u
}

// SetImpact sets the "impact" field.
func (u *Consequence_ImpactUpsertBulk) SetImpact(v string) *Consequence_ImpactUpsertBulk {
	return u.Update(func(s *Consequence_ImpactUpsert) {
		s.SetImpact(v)
	})
}

// UpdateImpact sets the "impact" field to the value that was provided on create.
func (u *Consequence_ImpactUpsertBulk) UpdateImpact() *Consequence_ImpactUpsertBulk {
	return u.Update(func(s *Consequence_ImpactUpsert) {
		s.UpdateImpact()
	})
}

// Exec executes the query.
func (u *Consequence_ImpactUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ConsequenceImpactCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ConsequenceImpactCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Consequence_ImpactUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
