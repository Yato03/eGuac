// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/consequence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/consequence_scope"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// ConsequenceScopeUpdate is the builder for updating Consequence_Scope entities.
type ConsequenceScopeUpdate struct {
	config
	hooks    []Hook
	mutation *ConsequenceScopeMutation
}

// Where appends a list predicates to the ConsequenceScopeUpdate builder.
func (csu *ConsequenceScopeUpdate) Where(ps ...predicate.Consequence_Scope) *ConsequenceScopeUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetScope sets the "scope" field.
func (csu *ConsequenceScopeUpdate) SetScope(s string) *ConsequenceScopeUpdate {
	csu.mutation.SetScope(s)
	return csu
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (csu *ConsequenceScopeUpdate) SetNillableScope(s *string) *ConsequenceScopeUpdate {
	if s != nil {
		csu.SetScope(*s)
	}
	return csu
}

// AddConsequenceIDs adds the "consequence" edge to the Consequence entity by IDs.
func (csu *ConsequenceScopeUpdate) AddConsequenceIDs(ids ...uuid.UUID) *ConsequenceScopeUpdate {
	csu.mutation.AddConsequenceIDs(ids...)
	return csu
}

// AddConsequence adds the "consequence" edges to the Consequence entity.
func (csu *ConsequenceScopeUpdate) AddConsequence(c ...*Consequence) *ConsequenceScopeUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csu.AddConsequenceIDs(ids...)
}

// Mutation returns the ConsequenceScopeMutation object of the builder.
func (csu *ConsequenceScopeUpdate) Mutation() *ConsequenceScopeMutation {
	return csu.mutation
}

// ClearConsequence clears all "consequence" edges to the Consequence entity.
func (csu *ConsequenceScopeUpdate) ClearConsequence() *ConsequenceScopeUpdate {
	csu.mutation.ClearConsequence()
	return csu
}

// RemoveConsequenceIDs removes the "consequence" edge to Consequence entities by IDs.
func (csu *ConsequenceScopeUpdate) RemoveConsequenceIDs(ids ...uuid.UUID) *ConsequenceScopeUpdate {
	csu.mutation.RemoveConsequenceIDs(ids...)
	return csu
}

// RemoveConsequence removes "consequence" edges to Consequence entities.
func (csu *ConsequenceScopeUpdate) RemoveConsequence(c ...*Consequence) *ConsequenceScopeUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csu.RemoveConsequenceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *ConsequenceScopeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, csu.sqlSave, csu.mutation, csu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csu *ConsequenceScopeUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *ConsequenceScopeUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *ConsequenceScopeUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (csu *ConsequenceScopeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(consequence_scope.Table, consequence_scope.Columns, sqlgraph.NewFieldSpec(consequence_scope.FieldID, field.TypeUUID))
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.Scope(); ok {
		_spec.SetField(consequence_scope.FieldScope, field.TypeString, value)
	}
	if csu.mutation.ConsequenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consequence_scope.ConsequenceTable,
			Columns: consequence_scope.ConsequencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.RemovedConsequenceIDs(); len(nodes) > 0 && !csu.mutation.ConsequenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consequence_scope.ConsequenceTable,
			Columns: consequence_scope.ConsequencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.ConsequenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consequence_scope.ConsequenceTable,
			Columns: consequence_scope.ConsequencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{consequence_scope.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csu.mutation.done = true
	return n, nil
}

// ConsequenceScopeUpdateOne is the builder for updating a single Consequence_Scope entity.
type ConsequenceScopeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConsequenceScopeMutation
}

// SetScope sets the "scope" field.
func (csuo *ConsequenceScopeUpdateOne) SetScope(s string) *ConsequenceScopeUpdateOne {
	csuo.mutation.SetScope(s)
	return csuo
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (csuo *ConsequenceScopeUpdateOne) SetNillableScope(s *string) *ConsequenceScopeUpdateOne {
	if s != nil {
		csuo.SetScope(*s)
	}
	return csuo
}

// AddConsequenceIDs adds the "consequence" edge to the Consequence entity by IDs.
func (csuo *ConsequenceScopeUpdateOne) AddConsequenceIDs(ids ...uuid.UUID) *ConsequenceScopeUpdateOne {
	csuo.mutation.AddConsequenceIDs(ids...)
	return csuo
}

// AddConsequence adds the "consequence" edges to the Consequence entity.
func (csuo *ConsequenceScopeUpdateOne) AddConsequence(c ...*Consequence) *ConsequenceScopeUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csuo.AddConsequenceIDs(ids...)
}

// Mutation returns the ConsequenceScopeMutation object of the builder.
func (csuo *ConsequenceScopeUpdateOne) Mutation() *ConsequenceScopeMutation {
	return csuo.mutation
}

// ClearConsequence clears all "consequence" edges to the Consequence entity.
func (csuo *ConsequenceScopeUpdateOne) ClearConsequence() *ConsequenceScopeUpdateOne {
	csuo.mutation.ClearConsequence()
	return csuo
}

// RemoveConsequenceIDs removes the "consequence" edge to Consequence entities by IDs.
func (csuo *ConsequenceScopeUpdateOne) RemoveConsequenceIDs(ids ...uuid.UUID) *ConsequenceScopeUpdateOne {
	csuo.mutation.RemoveConsequenceIDs(ids...)
	return csuo
}

// RemoveConsequence removes "consequence" edges to Consequence entities.
func (csuo *ConsequenceScopeUpdateOne) RemoveConsequence(c ...*Consequence) *ConsequenceScopeUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csuo.RemoveConsequenceIDs(ids...)
}

// Where appends a list predicates to the ConsequenceScopeUpdate builder.
func (csuo *ConsequenceScopeUpdateOne) Where(ps ...predicate.Consequence_Scope) *ConsequenceScopeUpdateOne {
	csuo.mutation.Where(ps...)
	return csuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *ConsequenceScopeUpdateOne) Select(field string, fields ...string) *ConsequenceScopeUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated Consequence_Scope entity.
func (csuo *ConsequenceScopeUpdateOne) Save(ctx context.Context) (*Consequence_Scope, error) {
	return withHooks(ctx, csuo.sqlSave, csuo.mutation, csuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *ConsequenceScopeUpdateOne) SaveX(ctx context.Context) *Consequence_Scope {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *ConsequenceScopeUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *ConsequenceScopeUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (csuo *ConsequenceScopeUpdateOne) sqlSave(ctx context.Context) (_node *Consequence_Scope, err error) {
	_spec := sqlgraph.NewUpdateSpec(consequence_scope.Table, consequence_scope.Columns, sqlgraph.NewFieldSpec(consequence_scope.FieldID, field.TypeUUID))
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Consequence_Scope.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, consequence_scope.FieldID)
		for _, f := range fields {
			if !consequence_scope.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != consequence_scope.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuo.mutation.Scope(); ok {
		_spec.SetField(consequence_scope.FieldScope, field.TypeString, value)
	}
	if csuo.mutation.ConsequenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consequence_scope.ConsequenceTable,
			Columns: consequence_scope.ConsequencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.RemovedConsequenceIDs(); len(nodes) > 0 && !csuo.mutation.ConsequenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consequence_scope.ConsequenceTable,
			Columns: consequence_scope.ConsequencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.ConsequenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consequence_scope.ConsequenceTable,
			Columns: consequence_scope.ConsequencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Consequence_Scope{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{consequence_scope.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csuo.mutation.done = true
	return _node, nil
}
