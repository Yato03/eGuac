// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/consequence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/consequence_impact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/consequence_scope"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/cwe"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// ConsequenceQuery is the builder for querying Consequence entities.
type ConsequenceQuery struct {
	config
	ctx                        *QueryContext
	order                      []consequence.OrderOption
	inters                     []Interceptor
	predicates                 []predicate.Consequence
	withCwe                    *CWEQuery
	withConsequenceScope       *ConsequenceScopeQuery
	withConsequenceImpact      *ConsequenceImpactQuery
	modifiers                  []func(*sql.Selector)
	loadTotal                  []func(context.Context, []*Consequence) error
	withNamedCwe               map[string]*CWEQuery
	withNamedConsequenceScope  map[string]*ConsequenceScopeQuery
	withNamedConsequenceImpact map[string]*ConsequenceImpactQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ConsequenceQuery builder.
func (cq *ConsequenceQuery) Where(ps ...predicate.Consequence) *ConsequenceQuery {
	cq.predicates = append(cq.predicates, ps...)
	return cq
}

// Limit the number of records to be returned by this query.
func (cq *ConsequenceQuery) Limit(limit int) *ConsequenceQuery {
	cq.ctx.Limit = &limit
	return cq
}

// Offset to start from.
func (cq *ConsequenceQuery) Offset(offset int) *ConsequenceQuery {
	cq.ctx.Offset = &offset
	return cq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cq *ConsequenceQuery) Unique(unique bool) *ConsequenceQuery {
	cq.ctx.Unique = &unique
	return cq
}

// Order specifies how the records should be ordered.
func (cq *ConsequenceQuery) Order(o ...consequence.OrderOption) *ConsequenceQuery {
	cq.order = append(cq.order, o...)
	return cq
}

// QueryCwe chains the current query on the "cwe" edge.
func (cq *ConsequenceQuery) QueryCwe() *CWEQuery {
	query := (&CWEClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(consequence.Table, consequence.FieldID, selector),
			sqlgraph.To(cwe.Table, cwe.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, consequence.CweTable, consequence.CwePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryConsequenceScope chains the current query on the "consequence_scope" edge.
func (cq *ConsequenceQuery) QueryConsequenceScope() *ConsequenceScopeQuery {
	query := (&ConsequenceScopeClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(consequence.Table, consequence.FieldID, selector),
			sqlgraph.To(consequence_scope.Table, consequence_scope.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, consequence.ConsequenceScopeTable, consequence.ConsequenceScopePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryConsequenceImpact chains the current query on the "consequence_impact" edge.
func (cq *ConsequenceQuery) QueryConsequenceImpact() *ConsequenceImpactQuery {
	query := (&ConsequenceImpactClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(consequence.Table, consequence.FieldID, selector),
			sqlgraph.To(consequence_impact.Table, consequence_impact.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, consequence.ConsequenceImpactTable, consequence.ConsequenceImpactPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Consequence entity from the query.
// Returns a *NotFoundError when no Consequence was found.
func (cq *ConsequenceQuery) First(ctx context.Context) (*Consequence, error) {
	nodes, err := cq.Limit(1).All(setContextOp(ctx, cq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{consequence.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cq *ConsequenceQuery) FirstX(ctx context.Context) *Consequence {
	node, err := cq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Consequence ID from the query.
// Returns a *NotFoundError when no Consequence ID was found.
func (cq *ConsequenceQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = cq.Limit(1).IDs(setContextOp(ctx, cq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{consequence.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cq *ConsequenceQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := cq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Consequence entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Consequence entity is found.
// Returns a *NotFoundError when no Consequence entities are found.
func (cq *ConsequenceQuery) Only(ctx context.Context) (*Consequence, error) {
	nodes, err := cq.Limit(2).All(setContextOp(ctx, cq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{consequence.Label}
	default:
		return nil, &NotSingularError{consequence.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cq *ConsequenceQuery) OnlyX(ctx context.Context) *Consequence {
	node, err := cq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Consequence ID in the query.
// Returns a *NotSingularError when more than one Consequence ID is found.
// Returns a *NotFoundError when no entities are found.
func (cq *ConsequenceQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = cq.Limit(2).IDs(setContextOp(ctx, cq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{consequence.Label}
	default:
		err = &NotSingularError{consequence.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cq *ConsequenceQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := cq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Consequences.
func (cq *ConsequenceQuery) All(ctx context.Context) ([]*Consequence, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryAll)
	if err := cq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Consequence, *ConsequenceQuery]()
	return withInterceptors[[]*Consequence](ctx, cq, qr, cq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cq *ConsequenceQuery) AllX(ctx context.Context) []*Consequence {
	nodes, err := cq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Consequence IDs.
func (cq *ConsequenceQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if cq.ctx.Unique == nil && cq.path != nil {
		cq.Unique(true)
	}
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryIDs)
	if err = cq.Select(consequence.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cq *ConsequenceQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := cq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cq *ConsequenceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryCount)
	if err := cq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cq, querierCount[*ConsequenceQuery](), cq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cq *ConsequenceQuery) CountX(ctx context.Context) int {
	count, err := cq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cq *ConsequenceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryExist)
	switch _, err := cq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cq *ConsequenceQuery) ExistX(ctx context.Context) bool {
	exist, err := cq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ConsequenceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cq *ConsequenceQuery) Clone() *ConsequenceQuery {
	if cq == nil {
		return nil
	}
	return &ConsequenceQuery{
		config:                cq.config,
		ctx:                   cq.ctx.Clone(),
		order:                 append([]consequence.OrderOption{}, cq.order...),
		inters:                append([]Interceptor{}, cq.inters...),
		predicates:            append([]predicate.Consequence{}, cq.predicates...),
		withCwe:               cq.withCwe.Clone(),
		withConsequenceScope:  cq.withConsequenceScope.Clone(),
		withConsequenceImpact: cq.withConsequenceImpact.Clone(),
		// clone intermediate query.
		sql:  cq.sql.Clone(),
		path: cq.path,
	}
}

// WithCwe tells the query-builder to eager-load the nodes that are connected to
// the "cwe" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ConsequenceQuery) WithCwe(opts ...func(*CWEQuery)) *ConsequenceQuery {
	query := (&CWEClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withCwe = query
	return cq
}

// WithConsequenceScope tells the query-builder to eager-load the nodes that are connected to
// the "consequence_scope" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ConsequenceQuery) WithConsequenceScope(opts ...func(*ConsequenceScopeQuery)) *ConsequenceQuery {
	query := (&ConsequenceScopeClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withConsequenceScope = query
	return cq
}

// WithConsequenceImpact tells the query-builder to eager-load the nodes that are connected to
// the "consequence_impact" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ConsequenceQuery) WithConsequenceImpact(opts ...func(*ConsequenceImpactQuery)) *ConsequenceQuery {
	query := (&ConsequenceImpactClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withConsequenceImpact = query
	return cq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Notes string `json:"notes,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Consequence.Query().
//		GroupBy(consequence.FieldNotes).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cq *ConsequenceQuery) GroupBy(field string, fields ...string) *ConsequenceGroupBy {
	cq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ConsequenceGroupBy{build: cq}
	grbuild.flds = &cq.ctx.Fields
	grbuild.label = consequence.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Notes string `json:"notes,omitempty"`
//	}
//
//	client.Consequence.Query().
//		Select(consequence.FieldNotes).
//		Scan(ctx, &v)
func (cq *ConsequenceQuery) Select(fields ...string) *ConsequenceSelect {
	cq.ctx.Fields = append(cq.ctx.Fields, fields...)
	sbuild := &ConsequenceSelect{ConsequenceQuery: cq}
	sbuild.label = consequence.Label
	sbuild.flds, sbuild.scan = &cq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ConsequenceSelect configured with the given aggregations.
func (cq *ConsequenceQuery) Aggregate(fns ...AggregateFunc) *ConsequenceSelect {
	return cq.Select().Aggregate(fns...)
}

func (cq *ConsequenceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cq); err != nil {
				return err
			}
		}
	}
	for _, f := range cq.ctx.Fields {
		if !consequence.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cq.path != nil {
		prev, err := cq.path(ctx)
		if err != nil {
			return err
		}
		cq.sql = prev
	}
	return nil
}

func (cq *ConsequenceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Consequence, error) {
	var (
		nodes       = []*Consequence{}
		_spec       = cq.querySpec()
		loadedTypes = [3]bool{
			cq.withCwe != nil,
			cq.withConsequenceScope != nil,
			cq.withConsequenceImpact != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Consequence).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Consequence{config: cq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(cq.modifiers) > 0 {
		_spec.Modifiers = cq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cq.withCwe; query != nil {
		if err := cq.loadCwe(ctx, query, nodes,
			func(n *Consequence) { n.Edges.Cwe = []*CWE{} },
			func(n *Consequence, e *CWE) { n.Edges.Cwe = append(n.Edges.Cwe, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withConsequenceScope; query != nil {
		if err := cq.loadConsequenceScope(ctx, query, nodes,
			func(n *Consequence) { n.Edges.ConsequenceScope = []*Consequence_Scope{} },
			func(n *Consequence, e *Consequence_Scope) {
				n.Edges.ConsequenceScope = append(n.Edges.ConsequenceScope, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := cq.withConsequenceImpact; query != nil {
		if err := cq.loadConsequenceImpact(ctx, query, nodes,
			func(n *Consequence) { n.Edges.ConsequenceImpact = []*Consequence_Impact{} },
			func(n *Consequence, e *Consequence_Impact) {
				n.Edges.ConsequenceImpact = append(n.Edges.ConsequenceImpact, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedCwe {
		if err := cq.loadCwe(ctx, query, nodes,
			func(n *Consequence) { n.appendNamedCwe(name) },
			func(n *Consequence, e *CWE) { n.appendNamedCwe(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedConsequenceScope {
		if err := cq.loadConsequenceScope(ctx, query, nodes,
			func(n *Consequence) { n.appendNamedConsequenceScope(name) },
			func(n *Consequence, e *Consequence_Scope) { n.appendNamedConsequenceScope(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedConsequenceImpact {
		if err := cq.loadConsequenceImpact(ctx, query, nodes,
			func(n *Consequence) { n.appendNamedConsequenceImpact(name) },
			func(n *Consequence, e *Consequence_Impact) { n.appendNamedConsequenceImpact(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range cq.loadTotal {
		if err := cq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cq *ConsequenceQuery) loadCwe(ctx context.Context, query *CWEQuery, nodes []*Consequence, init func(*Consequence), assign func(*Consequence, *CWE)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Consequence)
	nids := make(map[uuid.UUID]map[*Consequence]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(consequence.CweTable)
		s.Join(joinT).On(s.C(cwe.FieldID), joinT.C(consequence.CwePrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(consequence.CwePrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(consequence.CwePrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Consequence]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*CWE](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "cwe" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *ConsequenceQuery) loadConsequenceScope(ctx context.Context, query *ConsequenceScopeQuery, nodes []*Consequence, init func(*Consequence), assign func(*Consequence, *Consequence_Scope)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Consequence)
	nids := make(map[uuid.UUID]map[*Consequence]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(consequence.ConsequenceScopeTable)
		s.Join(joinT).On(s.C(consequence_scope.FieldID), joinT.C(consequence.ConsequenceScopePrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(consequence.ConsequenceScopePrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(consequence.ConsequenceScopePrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Consequence]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Consequence_Scope](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "consequence_scope" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *ConsequenceQuery) loadConsequenceImpact(ctx context.Context, query *ConsequenceImpactQuery, nodes []*Consequence, init func(*Consequence), assign func(*Consequence, *Consequence_Impact)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Consequence)
	nids := make(map[uuid.UUID]map[*Consequence]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(consequence.ConsequenceImpactTable)
		s.Join(joinT).On(s.C(consequence_impact.FieldID), joinT.C(consequence.ConsequenceImpactPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(consequence.ConsequenceImpactPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(consequence.ConsequenceImpactPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Consequence]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Consequence_Impact](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "consequence_impact" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (cq *ConsequenceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cq.querySpec()
	if len(cq.modifiers) > 0 {
		_spec.Modifiers = cq.modifiers
	}
	_spec.Node.Columns = cq.ctx.Fields
	if len(cq.ctx.Fields) > 0 {
		_spec.Unique = cq.ctx.Unique != nil && *cq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cq.driver, _spec)
}

func (cq *ConsequenceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(consequence.Table, consequence.Columns, sqlgraph.NewFieldSpec(consequence.FieldID, field.TypeUUID))
	_spec.From = cq.sql
	if unique := cq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cq.path != nil {
		_spec.Unique = true
	}
	if fields := cq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, consequence.FieldID)
		for i := range fields {
			if fields[i] != consequence.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cq *ConsequenceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cq.driver.Dialect())
	t1 := builder.Table(consequence.Table)
	columns := cq.ctx.Fields
	if len(columns) == 0 {
		columns = consequence.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cq.sql != nil {
		selector = cq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cq.ctx.Unique != nil && *cq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cq.predicates {
		p(selector)
	}
	for _, p := range cq.order {
		p(selector)
	}
	if offset := cq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedCwe tells the query-builder to eager-load the nodes that are connected to the "cwe"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *ConsequenceQuery) WithNamedCwe(name string, opts ...func(*CWEQuery)) *ConsequenceQuery {
	query := (&CWEClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedCwe == nil {
		cq.withNamedCwe = make(map[string]*CWEQuery)
	}
	cq.withNamedCwe[name] = query
	return cq
}

// WithNamedConsequenceScope tells the query-builder to eager-load the nodes that are connected to the "consequence_scope"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *ConsequenceQuery) WithNamedConsequenceScope(name string, opts ...func(*ConsequenceScopeQuery)) *ConsequenceQuery {
	query := (&ConsequenceScopeClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedConsequenceScope == nil {
		cq.withNamedConsequenceScope = make(map[string]*ConsequenceScopeQuery)
	}
	cq.withNamedConsequenceScope[name] = query
	return cq
}

// WithNamedConsequenceImpact tells the query-builder to eager-load the nodes that are connected to the "consequence_impact"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *ConsequenceQuery) WithNamedConsequenceImpact(name string, opts ...func(*ConsequenceImpactQuery)) *ConsequenceQuery {
	query := (&ConsequenceImpactClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedConsequenceImpact == nil {
		cq.withNamedConsequenceImpact = make(map[string]*ConsequenceImpactQuery)
	}
	cq.withNamedConsequenceImpact[name] = query
	return cq
}

// ConsequenceGroupBy is the group-by builder for Consequence entities.
type ConsequenceGroupBy struct {
	selector
	build *ConsequenceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cgb *ConsequenceGroupBy) Aggregate(fns ...AggregateFunc) *ConsequenceGroupBy {
	cgb.fns = append(cgb.fns, fns...)
	return cgb
}

// Scan applies the selector query and scans the result into the given value.
func (cgb *ConsequenceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cgb.build.ctx, ent.OpQueryGroupBy)
	if err := cgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ConsequenceQuery, *ConsequenceGroupBy](ctx, cgb.build, cgb, cgb.build.inters, v)
}

func (cgb *ConsequenceGroupBy) sqlScan(ctx context.Context, root *ConsequenceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cgb.fns))
	for _, fn := range cgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cgb.flds)+len(cgb.fns))
		for _, f := range *cgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ConsequenceSelect is the builder for selecting fields of Consequence entities.
type ConsequenceSelect struct {
	*ConsequenceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cs *ConsequenceSelect) Aggregate(fns ...AggregateFunc) *ConsequenceSelect {
	cs.fns = append(cs.fns, fns...)
	return cs
}

// Scan applies the selector query and scans the result into the given value.
func (cs *ConsequenceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cs.ctx, ent.OpQuerySelect)
	if err := cs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ConsequenceQuery, *ConsequenceSelect](ctx, cs.ConsequenceQuery, cs, cs.inters, v)
}

func (cs *ConsequenceSelect) sqlScan(ctx context.Context, root *ConsequenceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cs.fns))
	for _, fn := range cs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
