// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/consequence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/consequence_scope"
)

// ConsequenceScopeCreate is the builder for creating a Consequence_Scope entity.
type ConsequenceScopeCreate struct {
	config
	mutation *ConsequenceScopeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetScope sets the "scope" field.
func (csc *ConsequenceScopeCreate) SetScope(s string) *ConsequenceScopeCreate {
	csc.mutation.SetScope(s)
	return csc
}

// SetID sets the "id" field.
func (csc *ConsequenceScopeCreate) SetID(u uuid.UUID) *ConsequenceScopeCreate {
	csc.mutation.SetID(u)
	return csc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (csc *ConsequenceScopeCreate) SetNillableID(u *uuid.UUID) *ConsequenceScopeCreate {
	if u != nil {
		csc.SetID(*u)
	}
	return csc
}

// AddConsequenceIDs adds the "consequence" edge to the Consequence entity by IDs.
func (csc *ConsequenceScopeCreate) AddConsequenceIDs(ids ...uuid.UUID) *ConsequenceScopeCreate {
	csc.mutation.AddConsequenceIDs(ids...)
	return csc
}

// AddConsequence adds the "consequence" edges to the Consequence entity.
func (csc *ConsequenceScopeCreate) AddConsequence(c ...*Consequence) *ConsequenceScopeCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csc.AddConsequenceIDs(ids...)
}

// Mutation returns the ConsequenceScopeMutation object of the builder.
func (csc *ConsequenceScopeCreate) Mutation() *ConsequenceScopeMutation {
	return csc.mutation
}

// Save creates the Consequence_Scope in the database.
func (csc *ConsequenceScopeCreate) Save(ctx context.Context) (*Consequence_Scope, error) {
	csc.defaults()
	return withHooks(ctx, csc.sqlSave, csc.mutation, csc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csc *ConsequenceScopeCreate) SaveX(ctx context.Context) *Consequence_Scope {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csc *ConsequenceScopeCreate) Exec(ctx context.Context) error {
	_, err := csc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csc *ConsequenceScopeCreate) ExecX(ctx context.Context) {
	if err := csc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csc *ConsequenceScopeCreate) defaults() {
	if _, ok := csc.mutation.ID(); !ok {
		v := consequence_scope.DefaultID()
		csc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csc *ConsequenceScopeCreate) check() error {
	if _, ok := csc.mutation.Scope(); !ok {
		return &ValidationError{Name: "scope", err: errors.New(`ent: missing required field "Consequence_Scope.scope"`)}
	}
	return nil
}

func (csc *ConsequenceScopeCreate) sqlSave(ctx context.Context) (*Consequence_Scope, error) {
	if err := csc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	csc.mutation.id = &_node.ID
	csc.mutation.done = true
	return _node, nil
}

func (csc *ConsequenceScopeCreate) createSpec() (*Consequence_Scope, *sqlgraph.CreateSpec) {
	var (
		_node = &Consequence_Scope{config: csc.config}
		_spec = sqlgraph.NewCreateSpec(consequence_scope.Table, sqlgraph.NewFieldSpec(consequence_scope.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = csc.conflict
	if id, ok := csc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := csc.mutation.Scope(); ok {
		_spec.SetField(consequence_scope.FieldScope, field.TypeString, value)
		_node.Scope = value
	}
	if nodes := csc.mutation.ConsequenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consequence_scope.ConsequenceTable,
			Columns: consequence_scope.ConsequencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Consequence_Scope.Create().
//		SetScope(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Consequence_ScopeUpsert) {
//			SetScope(v+v).
//		}).
//		Exec(ctx)
func (csc *ConsequenceScopeCreate) OnConflict(opts ...sql.ConflictOption) *Consequence_ScopeUpsertOne {
	csc.conflict = opts
	return &Consequence_ScopeUpsertOne{
		create: csc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Consequence_Scope.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (csc *ConsequenceScopeCreate) OnConflictColumns(columns ...string) *Consequence_ScopeUpsertOne {
	csc.conflict = append(csc.conflict, sql.ConflictColumns(columns...))
	return &Consequence_ScopeUpsertOne{
		create: csc,
	}
}

type (
	// Consequence_ScopeUpsertOne is the builder for "upsert"-ing
	//  one Consequence_Scope node.
	Consequence_ScopeUpsertOne struct {
		create *ConsequenceScopeCreate
	}

	// Consequence_ScopeUpsert is the "OnConflict" setter.
	Consequence_ScopeUpsert struct {
		*sql.UpdateSet
	}
)

// SetScope sets the "scope" field.
func (u *Consequence_ScopeUpsert) SetScope(v string) *Consequence_ScopeUpsert {
	u.Set(consequence_scope.FieldScope, v)
	return u
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *Consequence_ScopeUpsert) UpdateScope() *Consequence_ScopeUpsert {
	u.SetExcluded(consequence_scope.FieldScope)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Consequence_Scope.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(consequence_scope.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *Consequence_ScopeUpsertOne) UpdateNewValues() *Consequence_ScopeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(consequence_scope.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Consequence_Scope.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *Consequence_ScopeUpsertOne) Ignore() *Consequence_ScopeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Consequence_ScopeUpsertOne) DoNothing() *Consequence_ScopeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConsequenceScopeCreate.OnConflict
// documentation for more info.
func (u *Consequence_ScopeUpsertOne) Update(set func(*Consequence_ScopeUpsert)) *Consequence_ScopeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Consequence_ScopeUpsert{UpdateSet: update})
	}))
	return u
}

// SetScope sets the "scope" field.
func (u *Consequence_ScopeUpsertOne) SetScope(v string) *Consequence_ScopeUpsertOne {
	return u.Update(func(s *Consequence_ScopeUpsert) {
		s.SetScope(v)
	})
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *Consequence_ScopeUpsertOne) UpdateScope() *Consequence_ScopeUpsertOne {
	return u.Update(func(s *Consequence_ScopeUpsert) {
		s.UpdateScope()
	})
}

// Exec executes the query.
func (u *Consequence_ScopeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ConsequenceScopeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Consequence_ScopeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *Consequence_ScopeUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: Consequence_ScopeUpsertOne.ID is not supported by MySQL driver. Use Consequence_ScopeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *Consequence_ScopeUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ConsequenceScopeCreateBulk is the builder for creating many Consequence_Scope entities in bulk.
type ConsequenceScopeCreateBulk struct {
	config
	err      error
	builders []*ConsequenceScopeCreate
	conflict []sql.ConflictOption
}

// Save creates the Consequence_Scope entities in the database.
func (cscb *ConsequenceScopeCreateBulk) Save(ctx context.Context) ([]*Consequence_Scope, error) {
	if cscb.err != nil {
		return nil, cscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*Consequence_Scope, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConsequenceScopeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *ConsequenceScopeCreateBulk) SaveX(ctx context.Context) []*Consequence_Scope {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscb *ConsequenceScopeCreateBulk) Exec(ctx context.Context) error {
	_, err := cscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscb *ConsequenceScopeCreateBulk) ExecX(ctx context.Context) {
	if err := cscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Consequence_Scope.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Consequence_ScopeUpsert) {
//			SetScope(v+v).
//		}).
//		Exec(ctx)
func (cscb *ConsequenceScopeCreateBulk) OnConflict(opts ...sql.ConflictOption) *Consequence_ScopeUpsertBulk {
	cscb.conflict = opts
	return &Consequence_ScopeUpsertBulk{
		create: cscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Consequence_Scope.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cscb *ConsequenceScopeCreateBulk) OnConflictColumns(columns ...string) *Consequence_ScopeUpsertBulk {
	cscb.conflict = append(cscb.conflict, sql.ConflictColumns(columns...))
	return &Consequence_ScopeUpsertBulk{
		create: cscb,
	}
}

// Consequence_ScopeUpsertBulk is the builder for "upsert"-ing
// a bulk of Consequence_Scope nodes.
type Consequence_ScopeUpsertBulk struct {
	create *ConsequenceScopeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Consequence_Scope.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(consequence_scope.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *Consequence_ScopeUpsertBulk) UpdateNewValues() *Consequence_ScopeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(consequence_scope.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Consequence_Scope.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *Consequence_ScopeUpsertBulk) Ignore() *Consequence_ScopeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Consequence_ScopeUpsertBulk) DoNothing() *Consequence_ScopeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConsequenceScopeCreateBulk.OnConflict
// documentation for more info.
func (u *Consequence_ScopeUpsertBulk) Update(set func(*Consequence_ScopeUpsert)) *Consequence_ScopeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Consequence_ScopeUpsert{UpdateSet: update})
	}))
	return u
}

// SetScope sets the "scope" field.
func (u *Consequence_ScopeUpsertBulk) SetScope(v string) *Consequence_ScopeUpsertBulk {
	return u.Update(func(s *Consequence_ScopeUpsert) {
		s.SetScope(v)
	})
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *Consequence_ScopeUpsertBulk) UpdateScope() *Consequence_ScopeUpsertBulk {
	return u.Update(func(s *Consequence_ScopeUpsert) {
		s.UpdateScope()
	})
}

// Exec executes the query.
func (u *Consequence_ScopeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ConsequenceScopeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ConsequenceScopeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Consequence_ScopeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
