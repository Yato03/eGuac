// Code generated by ent, DO NOT EDIT.

package reachablecode

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the reachablecode type in the database.
	Label = "reachable_code"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPathToFile holds the string denoting the path_to_file field in the database.
	FieldPathToFile = "path_to_file"
	// EdgeCertifyVex holds the string denoting the certify_vex edge name in mutations.
	EdgeCertifyVex = "certify_vex"
	// EdgeReachableCodeArtifact holds the string denoting the reachable_code_artifact edge name in mutations.
	EdgeReachableCodeArtifact = "reachable_code_artifact"
	// Table holds the table name of the reachablecode in the database.
	Table = "reachable_codes"
	// CertifyVexTable is the table that holds the certify_vex relation/edge. The primary key declared below.
	CertifyVexTable = "certify_vex_reachable_code"
	// CertifyVexInverseTable is the table name for the CertifyVex entity.
	// It exists in this package in order to avoid circular dependency with the "certifyvex" package.
	CertifyVexInverseTable = "certify_vexes"
	// ReachableCodeArtifactTable is the table that holds the reachable_code_artifact relation/edge. The primary key declared below.
	ReachableCodeArtifactTable = "reachable_code_reachable_code_artifact"
	// ReachableCodeArtifactInverseTable is the table name for the ReachableCodeArtifact entity.
	// It exists in this package in order to avoid circular dependency with the "reachablecodeartifact" package.
	ReachableCodeArtifactInverseTable = "reachable_code_artifacts"
)

// Columns holds all SQL columns for reachablecode fields.
var Columns = []string{
	FieldID,
	FieldPathToFile,
}

var (
	// CertifyVexPrimaryKey and CertifyVexColumn2 are the table columns denoting the
	// primary key for the certify_vex relation (M2M).
	CertifyVexPrimaryKey = []string{"certify_vex_id", "reachable_code_id"}
	// ReachableCodeArtifactPrimaryKey and ReachableCodeArtifactColumn2 are the table columns denoting the
	// primary key for the reachable_code_artifact relation (M2M).
	ReachableCodeArtifactPrimaryKey = []string{"reachable_code_id", "reachable_code_artifact_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ReachableCode queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPathToFile orders the results by the path_to_file field.
func ByPathToFile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPathToFile, opts...).ToFunc()
}

// ByCertifyVexCount orders the results by certify_vex count.
func ByCertifyVexCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCertifyVexStep(), opts...)
	}
}

// ByCertifyVex orders the results by certify_vex terms.
func ByCertifyVex(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCertifyVexStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReachableCodeArtifactCount orders the results by reachable_code_artifact count.
func ByReachableCodeArtifactCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReachableCodeArtifactStep(), opts...)
	}
}

// ByReachableCodeArtifact orders the results by reachable_code_artifact terms.
func ByReachableCodeArtifact(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReachableCodeArtifactStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCertifyVexStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CertifyVexInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CertifyVexTable, CertifyVexPrimaryKey...),
	)
}
func newReachableCodeArtifactStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReachableCodeArtifactInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ReachableCodeArtifactTable, ReachableCodeArtifactPrimaryKey...),
	)
}
