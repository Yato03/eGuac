// Code generated by ent, DO NOT EDIT.

package reachablecode

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ReachableCode {
	return predicate.ReachableCode(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ReachableCode {
	return predicate.ReachableCode(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ReachableCode {
	return predicate.ReachableCode(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ReachableCode {
	return predicate.ReachableCode(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ReachableCode {
	return predicate.ReachableCode(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ReachableCode {
	return predicate.ReachableCode(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ReachableCode {
	return predicate.ReachableCode(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ReachableCode {
	return predicate.ReachableCode(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ReachableCode {
	return predicate.ReachableCode(sql.FieldLTE(FieldID, id))
}

// PathToFile applies equality check predicate on the "path_to_file" field. It's identical to PathToFileEQ.
func PathToFile(v string) predicate.ReachableCode {
	return predicate.ReachableCode(sql.FieldEQ(FieldPathToFile, v))
}

// PathToFileEQ applies the EQ predicate on the "path_to_file" field.
func PathToFileEQ(v string) predicate.ReachableCode {
	return predicate.ReachableCode(sql.FieldEQ(FieldPathToFile, v))
}

// PathToFileNEQ applies the NEQ predicate on the "path_to_file" field.
func PathToFileNEQ(v string) predicate.ReachableCode {
	return predicate.ReachableCode(sql.FieldNEQ(FieldPathToFile, v))
}

// PathToFileIn applies the In predicate on the "path_to_file" field.
func PathToFileIn(vs ...string) predicate.ReachableCode {
	return predicate.ReachableCode(sql.FieldIn(FieldPathToFile, vs...))
}

// PathToFileNotIn applies the NotIn predicate on the "path_to_file" field.
func PathToFileNotIn(vs ...string) predicate.ReachableCode {
	return predicate.ReachableCode(sql.FieldNotIn(FieldPathToFile, vs...))
}

// PathToFileGT applies the GT predicate on the "path_to_file" field.
func PathToFileGT(v string) predicate.ReachableCode {
	return predicate.ReachableCode(sql.FieldGT(FieldPathToFile, v))
}

// PathToFileGTE applies the GTE predicate on the "path_to_file" field.
func PathToFileGTE(v string) predicate.ReachableCode {
	return predicate.ReachableCode(sql.FieldGTE(FieldPathToFile, v))
}

// PathToFileLT applies the LT predicate on the "path_to_file" field.
func PathToFileLT(v string) predicate.ReachableCode {
	return predicate.ReachableCode(sql.FieldLT(FieldPathToFile, v))
}

// PathToFileLTE applies the LTE predicate on the "path_to_file" field.
func PathToFileLTE(v string) predicate.ReachableCode {
	return predicate.ReachableCode(sql.FieldLTE(FieldPathToFile, v))
}

// PathToFileContains applies the Contains predicate on the "path_to_file" field.
func PathToFileContains(v string) predicate.ReachableCode {
	return predicate.ReachableCode(sql.FieldContains(FieldPathToFile, v))
}

// PathToFileHasPrefix applies the HasPrefix predicate on the "path_to_file" field.
func PathToFileHasPrefix(v string) predicate.ReachableCode {
	return predicate.ReachableCode(sql.FieldHasPrefix(FieldPathToFile, v))
}

// PathToFileHasSuffix applies the HasSuffix predicate on the "path_to_file" field.
func PathToFileHasSuffix(v string) predicate.ReachableCode {
	return predicate.ReachableCode(sql.FieldHasSuffix(FieldPathToFile, v))
}

// PathToFileIsNil applies the IsNil predicate on the "path_to_file" field.
func PathToFileIsNil() predicate.ReachableCode {
	return predicate.ReachableCode(sql.FieldIsNull(FieldPathToFile))
}

// PathToFileNotNil applies the NotNil predicate on the "path_to_file" field.
func PathToFileNotNil() predicate.ReachableCode {
	return predicate.ReachableCode(sql.FieldNotNull(FieldPathToFile))
}

// PathToFileEqualFold applies the EqualFold predicate on the "path_to_file" field.
func PathToFileEqualFold(v string) predicate.ReachableCode {
	return predicate.ReachableCode(sql.FieldEqualFold(FieldPathToFile, v))
}

// PathToFileContainsFold applies the ContainsFold predicate on the "path_to_file" field.
func PathToFileContainsFold(v string) predicate.ReachableCode {
	return predicate.ReachableCode(sql.FieldContainsFold(FieldPathToFile, v))
}

// HasCertifyVex applies the HasEdge predicate on the "certify_vex" edge.
func HasCertifyVex() predicate.ReachableCode {
	return predicate.ReachableCode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CertifyVexTable, CertifyVexPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCertifyVexWith applies the HasEdge predicate on the "certify_vex" edge with a given conditions (other predicates).
func HasCertifyVexWith(preds ...predicate.CertifyVex) predicate.ReachableCode {
	return predicate.ReachableCode(func(s *sql.Selector) {
		step := newCertifyVexStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReachableCodeArtifact applies the HasEdge predicate on the "reachable_code_artifact" edge.
func HasReachableCodeArtifact() predicate.ReachableCode {
	return predicate.ReachableCode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ReachableCodeArtifactTable, ReachableCodeArtifactPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReachableCodeArtifactWith applies the HasEdge predicate on the "reachable_code_artifact" edge with a given conditions (other predicates).
func HasReachableCodeArtifactWith(preds ...predicate.ReachableCodeArtifact) predicate.ReachableCode {
	return predicate.ReachableCode(func(s *sql.Selector) {
		step := newReachableCodeArtifactStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ReachableCode) predicate.ReachableCode {
	return predicate.ReachableCode(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ReachableCode) predicate.ReachableCode {
	return predicate.ReachableCode(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ReachableCode) predicate.ReachableCode {
	return predicate.ReachableCode(sql.NotPredicates(p))
}
