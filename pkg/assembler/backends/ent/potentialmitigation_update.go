// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/cwe"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/potentialmitigation"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// PotentialMitigationUpdate is the builder for updating PotentialMitigation entities.
type PotentialMitigationUpdate struct {
	config
	hooks    []Hook
	mutation *PotentialMitigationMutation
}

// Where appends a list predicates to the PotentialMitigationUpdate builder.
func (pmu *PotentialMitigationUpdate) Where(ps ...predicate.PotentialMitigation) *PotentialMitigationUpdate {
	pmu.mutation.Where(ps...)
	return pmu
}

// SetPhase sets the "phase" field.
func (pmu *PotentialMitigationUpdate) SetPhase(s string) *PotentialMitigationUpdate {
	pmu.mutation.SetPhase(s)
	return pmu
}

// SetNillablePhase sets the "phase" field if the given value is not nil.
func (pmu *PotentialMitigationUpdate) SetNillablePhase(s *string) *PotentialMitigationUpdate {
	if s != nil {
		pmu.SetPhase(*s)
	}
	return pmu
}

// ClearPhase clears the value of the "phase" field.
func (pmu *PotentialMitigationUpdate) ClearPhase() *PotentialMitigationUpdate {
	pmu.mutation.ClearPhase()
	return pmu
}

// SetDescription sets the "description" field.
func (pmu *PotentialMitigationUpdate) SetDescription(s string) *PotentialMitigationUpdate {
	pmu.mutation.SetDescription(s)
	return pmu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pmu *PotentialMitigationUpdate) SetNillableDescription(s *string) *PotentialMitigationUpdate {
	if s != nil {
		pmu.SetDescription(*s)
	}
	return pmu
}

// ClearDescription clears the value of the "description" field.
func (pmu *PotentialMitigationUpdate) ClearDescription() *PotentialMitigationUpdate {
	pmu.mutation.ClearDescription()
	return pmu
}

// SetEffectiveness sets the "effectiveness" field.
func (pmu *PotentialMitigationUpdate) SetEffectiveness(s string) *PotentialMitigationUpdate {
	pmu.mutation.SetEffectiveness(s)
	return pmu
}

// SetNillableEffectiveness sets the "effectiveness" field if the given value is not nil.
func (pmu *PotentialMitigationUpdate) SetNillableEffectiveness(s *string) *PotentialMitigationUpdate {
	if s != nil {
		pmu.SetEffectiveness(*s)
	}
	return pmu
}

// ClearEffectiveness clears the value of the "effectiveness" field.
func (pmu *PotentialMitigationUpdate) ClearEffectiveness() *PotentialMitigationUpdate {
	pmu.mutation.ClearEffectiveness()
	return pmu
}

// SetEffectivenessNotes sets the "effectiveness_notes" field.
func (pmu *PotentialMitigationUpdate) SetEffectivenessNotes(s string) *PotentialMitigationUpdate {
	pmu.mutation.SetEffectivenessNotes(s)
	return pmu
}

// SetNillableEffectivenessNotes sets the "effectiveness_notes" field if the given value is not nil.
func (pmu *PotentialMitigationUpdate) SetNillableEffectivenessNotes(s *string) *PotentialMitigationUpdate {
	if s != nil {
		pmu.SetEffectivenessNotes(*s)
	}
	return pmu
}

// ClearEffectivenessNotes clears the value of the "effectiveness_notes" field.
func (pmu *PotentialMitigationUpdate) ClearEffectivenessNotes() *PotentialMitigationUpdate {
	pmu.mutation.ClearEffectivenessNotes()
	return pmu
}

// AddCweIDs adds the "cwe" edge to the CWE entity by IDs.
func (pmu *PotentialMitigationUpdate) AddCweIDs(ids ...uuid.UUID) *PotentialMitigationUpdate {
	pmu.mutation.AddCweIDs(ids...)
	return pmu
}

// AddCwe adds the "cwe" edges to the CWE entity.
func (pmu *PotentialMitigationUpdate) AddCwe(c ...*CWE) *PotentialMitigationUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pmu.AddCweIDs(ids...)
}

// Mutation returns the PotentialMitigationMutation object of the builder.
func (pmu *PotentialMitigationUpdate) Mutation() *PotentialMitigationMutation {
	return pmu.mutation
}

// ClearCwe clears all "cwe" edges to the CWE entity.
func (pmu *PotentialMitigationUpdate) ClearCwe() *PotentialMitigationUpdate {
	pmu.mutation.ClearCwe()
	return pmu
}

// RemoveCweIDs removes the "cwe" edge to CWE entities by IDs.
func (pmu *PotentialMitigationUpdate) RemoveCweIDs(ids ...uuid.UUID) *PotentialMitigationUpdate {
	pmu.mutation.RemoveCweIDs(ids...)
	return pmu
}

// RemoveCwe removes "cwe" edges to CWE entities.
func (pmu *PotentialMitigationUpdate) RemoveCwe(c ...*CWE) *PotentialMitigationUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pmu.RemoveCweIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pmu *PotentialMitigationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pmu.sqlSave, pmu.mutation, pmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmu *PotentialMitigationUpdate) SaveX(ctx context.Context) int {
	affected, err := pmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pmu *PotentialMitigationUpdate) Exec(ctx context.Context) error {
	_, err := pmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmu *PotentialMitigationUpdate) ExecX(ctx context.Context) {
	if err := pmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pmu *PotentialMitigationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(potentialmitigation.Table, potentialmitigation.Columns, sqlgraph.NewFieldSpec(potentialmitigation.FieldID, field.TypeUUID))
	if ps := pmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmu.mutation.Phase(); ok {
		_spec.SetField(potentialmitigation.FieldPhase, field.TypeString, value)
	}
	if pmu.mutation.PhaseCleared() {
		_spec.ClearField(potentialmitigation.FieldPhase, field.TypeString)
	}
	if value, ok := pmu.mutation.Description(); ok {
		_spec.SetField(potentialmitigation.FieldDescription, field.TypeString, value)
	}
	if pmu.mutation.DescriptionCleared() {
		_spec.ClearField(potentialmitigation.FieldDescription, field.TypeString)
	}
	if value, ok := pmu.mutation.Effectiveness(); ok {
		_spec.SetField(potentialmitigation.FieldEffectiveness, field.TypeString, value)
	}
	if pmu.mutation.EffectivenessCleared() {
		_spec.ClearField(potentialmitigation.FieldEffectiveness, field.TypeString)
	}
	if value, ok := pmu.mutation.EffectivenessNotes(); ok {
		_spec.SetField(potentialmitigation.FieldEffectivenessNotes, field.TypeString, value)
	}
	if pmu.mutation.EffectivenessNotesCleared() {
		_spec.ClearField(potentialmitigation.FieldEffectivenessNotes, field.TypeString)
	}
	if pmu.mutation.CweCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   potentialmitigation.CweTable,
			Columns: potentialmitigation.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.RemovedCweIDs(); len(nodes) > 0 && !pmu.mutation.CweCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   potentialmitigation.CweTable,
			Columns: potentialmitigation.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.CweIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   potentialmitigation.CweTable,
			Columns: potentialmitigation.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{potentialmitigation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pmu.mutation.done = true
	return n, nil
}

// PotentialMitigationUpdateOne is the builder for updating a single PotentialMitigation entity.
type PotentialMitigationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PotentialMitigationMutation
}

// SetPhase sets the "phase" field.
func (pmuo *PotentialMitigationUpdateOne) SetPhase(s string) *PotentialMitigationUpdateOne {
	pmuo.mutation.SetPhase(s)
	return pmuo
}

// SetNillablePhase sets the "phase" field if the given value is not nil.
func (pmuo *PotentialMitigationUpdateOne) SetNillablePhase(s *string) *PotentialMitigationUpdateOne {
	if s != nil {
		pmuo.SetPhase(*s)
	}
	return pmuo
}

// ClearPhase clears the value of the "phase" field.
func (pmuo *PotentialMitigationUpdateOne) ClearPhase() *PotentialMitigationUpdateOne {
	pmuo.mutation.ClearPhase()
	return pmuo
}

// SetDescription sets the "description" field.
func (pmuo *PotentialMitigationUpdateOne) SetDescription(s string) *PotentialMitigationUpdateOne {
	pmuo.mutation.SetDescription(s)
	return pmuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pmuo *PotentialMitigationUpdateOne) SetNillableDescription(s *string) *PotentialMitigationUpdateOne {
	if s != nil {
		pmuo.SetDescription(*s)
	}
	return pmuo
}

// ClearDescription clears the value of the "description" field.
func (pmuo *PotentialMitigationUpdateOne) ClearDescription() *PotentialMitigationUpdateOne {
	pmuo.mutation.ClearDescription()
	return pmuo
}

// SetEffectiveness sets the "effectiveness" field.
func (pmuo *PotentialMitigationUpdateOne) SetEffectiveness(s string) *PotentialMitigationUpdateOne {
	pmuo.mutation.SetEffectiveness(s)
	return pmuo
}

// SetNillableEffectiveness sets the "effectiveness" field if the given value is not nil.
func (pmuo *PotentialMitigationUpdateOne) SetNillableEffectiveness(s *string) *PotentialMitigationUpdateOne {
	if s != nil {
		pmuo.SetEffectiveness(*s)
	}
	return pmuo
}

// ClearEffectiveness clears the value of the "effectiveness" field.
func (pmuo *PotentialMitigationUpdateOne) ClearEffectiveness() *PotentialMitigationUpdateOne {
	pmuo.mutation.ClearEffectiveness()
	return pmuo
}

// SetEffectivenessNotes sets the "effectiveness_notes" field.
func (pmuo *PotentialMitigationUpdateOne) SetEffectivenessNotes(s string) *PotentialMitigationUpdateOne {
	pmuo.mutation.SetEffectivenessNotes(s)
	return pmuo
}

// SetNillableEffectivenessNotes sets the "effectiveness_notes" field if the given value is not nil.
func (pmuo *PotentialMitigationUpdateOne) SetNillableEffectivenessNotes(s *string) *PotentialMitigationUpdateOne {
	if s != nil {
		pmuo.SetEffectivenessNotes(*s)
	}
	return pmuo
}

// ClearEffectivenessNotes clears the value of the "effectiveness_notes" field.
func (pmuo *PotentialMitigationUpdateOne) ClearEffectivenessNotes() *PotentialMitigationUpdateOne {
	pmuo.mutation.ClearEffectivenessNotes()
	return pmuo
}

// AddCweIDs adds the "cwe" edge to the CWE entity by IDs.
func (pmuo *PotentialMitigationUpdateOne) AddCweIDs(ids ...uuid.UUID) *PotentialMitigationUpdateOne {
	pmuo.mutation.AddCweIDs(ids...)
	return pmuo
}

// AddCwe adds the "cwe" edges to the CWE entity.
func (pmuo *PotentialMitigationUpdateOne) AddCwe(c ...*CWE) *PotentialMitigationUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pmuo.AddCweIDs(ids...)
}

// Mutation returns the PotentialMitigationMutation object of the builder.
func (pmuo *PotentialMitigationUpdateOne) Mutation() *PotentialMitigationMutation {
	return pmuo.mutation
}

// ClearCwe clears all "cwe" edges to the CWE entity.
func (pmuo *PotentialMitigationUpdateOne) ClearCwe() *PotentialMitigationUpdateOne {
	pmuo.mutation.ClearCwe()
	return pmuo
}

// RemoveCweIDs removes the "cwe" edge to CWE entities by IDs.
func (pmuo *PotentialMitigationUpdateOne) RemoveCweIDs(ids ...uuid.UUID) *PotentialMitigationUpdateOne {
	pmuo.mutation.RemoveCweIDs(ids...)
	return pmuo
}

// RemoveCwe removes "cwe" edges to CWE entities.
func (pmuo *PotentialMitigationUpdateOne) RemoveCwe(c ...*CWE) *PotentialMitigationUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pmuo.RemoveCweIDs(ids...)
}

// Where appends a list predicates to the PotentialMitigationUpdate builder.
func (pmuo *PotentialMitigationUpdateOne) Where(ps ...predicate.PotentialMitigation) *PotentialMitigationUpdateOne {
	pmuo.mutation.Where(ps...)
	return pmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pmuo *PotentialMitigationUpdateOne) Select(field string, fields ...string) *PotentialMitigationUpdateOne {
	pmuo.fields = append([]string{field}, fields...)
	return pmuo
}

// Save executes the query and returns the updated PotentialMitigation entity.
func (pmuo *PotentialMitigationUpdateOne) Save(ctx context.Context) (*PotentialMitigation, error) {
	return withHooks(ctx, pmuo.sqlSave, pmuo.mutation, pmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmuo *PotentialMitigationUpdateOne) SaveX(ctx context.Context) *PotentialMitigation {
	node, err := pmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pmuo *PotentialMitigationUpdateOne) Exec(ctx context.Context) error {
	_, err := pmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmuo *PotentialMitigationUpdateOne) ExecX(ctx context.Context) {
	if err := pmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pmuo *PotentialMitigationUpdateOne) sqlSave(ctx context.Context) (_node *PotentialMitigation, err error) {
	_spec := sqlgraph.NewUpdateSpec(potentialmitigation.Table, potentialmitigation.Columns, sqlgraph.NewFieldSpec(potentialmitigation.FieldID, field.TypeUUID))
	id, ok := pmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PotentialMitigation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, potentialmitigation.FieldID)
		for _, f := range fields {
			if !potentialmitigation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != potentialmitigation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmuo.mutation.Phase(); ok {
		_spec.SetField(potentialmitigation.FieldPhase, field.TypeString, value)
	}
	if pmuo.mutation.PhaseCleared() {
		_spec.ClearField(potentialmitigation.FieldPhase, field.TypeString)
	}
	if value, ok := pmuo.mutation.Description(); ok {
		_spec.SetField(potentialmitigation.FieldDescription, field.TypeString, value)
	}
	if pmuo.mutation.DescriptionCleared() {
		_spec.ClearField(potentialmitigation.FieldDescription, field.TypeString)
	}
	if value, ok := pmuo.mutation.Effectiveness(); ok {
		_spec.SetField(potentialmitigation.FieldEffectiveness, field.TypeString, value)
	}
	if pmuo.mutation.EffectivenessCleared() {
		_spec.ClearField(potentialmitigation.FieldEffectiveness, field.TypeString)
	}
	if value, ok := pmuo.mutation.EffectivenessNotes(); ok {
		_spec.SetField(potentialmitigation.FieldEffectivenessNotes, field.TypeString, value)
	}
	if pmuo.mutation.EffectivenessNotesCleared() {
		_spec.ClearField(potentialmitigation.FieldEffectivenessNotes, field.TypeString)
	}
	if pmuo.mutation.CweCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   potentialmitigation.CweTable,
			Columns: potentialmitigation.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.RemovedCweIDs(); len(nodes) > 0 && !pmuo.mutation.CweCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   potentialmitigation.CweTable,
			Columns: potentialmitigation.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.CweIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   potentialmitigation.CweTable,
			Columns: potentialmitigation.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PotentialMitigation{config: pmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{potentialmitigation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pmuo.mutation.done = true
	return _node, nil
}
