// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/reachablecode"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/reachablecodeartifact"
)

// ReachableCodeArtifactCreate is the builder for creating a ReachableCodeArtifact entity.
type ReachableCodeArtifactCreate struct {
	config
	mutation *ReachableCodeArtifactMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetArtifactName sets the "artifact_name" field.
func (rcac *ReachableCodeArtifactCreate) SetArtifactName(s string) *ReachableCodeArtifactCreate {
	rcac.mutation.SetArtifactName(s)
	return rcac
}

// SetNillableArtifactName sets the "artifact_name" field if the given value is not nil.
func (rcac *ReachableCodeArtifactCreate) SetNillableArtifactName(s *string) *ReachableCodeArtifactCreate {
	if s != nil {
		rcac.SetArtifactName(*s)
	}
	return rcac
}

// SetUsedInLines sets the "used_in_lines" field.
func (rcac *ReachableCodeArtifactCreate) SetUsedInLines(s string) *ReachableCodeArtifactCreate {
	rcac.mutation.SetUsedInLines(s)
	return rcac
}

// SetNillableUsedInLines sets the "used_in_lines" field if the given value is not nil.
func (rcac *ReachableCodeArtifactCreate) SetNillableUsedInLines(s *string) *ReachableCodeArtifactCreate {
	if s != nil {
		rcac.SetUsedInLines(*s)
	}
	return rcac
}

// SetID sets the "id" field.
func (rcac *ReachableCodeArtifactCreate) SetID(u uuid.UUID) *ReachableCodeArtifactCreate {
	rcac.mutation.SetID(u)
	return rcac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rcac *ReachableCodeArtifactCreate) SetNillableID(u *uuid.UUID) *ReachableCodeArtifactCreate {
	if u != nil {
		rcac.SetID(*u)
	}
	return rcac
}

// AddReachableCodeIDs adds the "reachable_code" edge to the ReachableCode entity by IDs.
func (rcac *ReachableCodeArtifactCreate) AddReachableCodeIDs(ids ...uuid.UUID) *ReachableCodeArtifactCreate {
	rcac.mutation.AddReachableCodeIDs(ids...)
	return rcac
}

// AddReachableCode adds the "reachable_code" edges to the ReachableCode entity.
func (rcac *ReachableCodeArtifactCreate) AddReachableCode(r ...*ReachableCode) *ReachableCodeArtifactCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcac.AddReachableCodeIDs(ids...)
}

// Mutation returns the ReachableCodeArtifactMutation object of the builder.
func (rcac *ReachableCodeArtifactCreate) Mutation() *ReachableCodeArtifactMutation {
	return rcac.mutation
}

// Save creates the ReachableCodeArtifact in the database.
func (rcac *ReachableCodeArtifactCreate) Save(ctx context.Context) (*ReachableCodeArtifact, error) {
	rcac.defaults()
	return withHooks(ctx, rcac.sqlSave, rcac.mutation, rcac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rcac *ReachableCodeArtifactCreate) SaveX(ctx context.Context) *ReachableCodeArtifact {
	v, err := rcac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcac *ReachableCodeArtifactCreate) Exec(ctx context.Context) error {
	_, err := rcac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcac *ReachableCodeArtifactCreate) ExecX(ctx context.Context) {
	if err := rcac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcac *ReachableCodeArtifactCreate) defaults() {
	if _, ok := rcac.mutation.ID(); !ok {
		v := reachablecodeartifact.DefaultID()
		rcac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcac *ReachableCodeArtifactCreate) check() error {
	return nil
}

func (rcac *ReachableCodeArtifactCreate) sqlSave(ctx context.Context) (*ReachableCodeArtifact, error) {
	if err := rcac.check(); err != nil {
		return nil, err
	}
	_node, _spec := rcac.createSpec()
	if err := sqlgraph.CreateNode(ctx, rcac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rcac.mutation.id = &_node.ID
	rcac.mutation.done = true
	return _node, nil
}

func (rcac *ReachableCodeArtifactCreate) createSpec() (*ReachableCodeArtifact, *sqlgraph.CreateSpec) {
	var (
		_node = &ReachableCodeArtifact{config: rcac.config}
		_spec = sqlgraph.NewCreateSpec(reachablecodeartifact.Table, sqlgraph.NewFieldSpec(reachablecodeartifact.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = rcac.conflict
	if id, ok := rcac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rcac.mutation.ArtifactName(); ok {
		_spec.SetField(reachablecodeartifact.FieldArtifactName, field.TypeString, value)
		_node.ArtifactName = &value
	}
	if value, ok := rcac.mutation.UsedInLines(); ok {
		_spec.SetField(reachablecodeartifact.FieldUsedInLines, field.TypeString, value)
		_node.UsedInLines = &value
	}
	if nodes := rcac.mutation.ReachableCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reachablecodeartifact.ReachableCodeTable,
			Columns: reachablecodeartifact.ReachableCodePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reachablecode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ReachableCodeArtifact.Create().
//		SetArtifactName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReachableCodeArtifactUpsert) {
//			SetArtifactName(v+v).
//		}).
//		Exec(ctx)
func (rcac *ReachableCodeArtifactCreate) OnConflict(opts ...sql.ConflictOption) *ReachableCodeArtifactUpsertOne {
	rcac.conflict = opts
	return &ReachableCodeArtifactUpsertOne{
		create: rcac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ReachableCodeArtifact.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcac *ReachableCodeArtifactCreate) OnConflictColumns(columns ...string) *ReachableCodeArtifactUpsertOne {
	rcac.conflict = append(rcac.conflict, sql.ConflictColumns(columns...))
	return &ReachableCodeArtifactUpsertOne{
		create: rcac,
	}
}

type (
	// ReachableCodeArtifactUpsertOne is the builder for "upsert"-ing
	//  one ReachableCodeArtifact node.
	ReachableCodeArtifactUpsertOne struct {
		create *ReachableCodeArtifactCreate
	}

	// ReachableCodeArtifactUpsert is the "OnConflict" setter.
	ReachableCodeArtifactUpsert struct {
		*sql.UpdateSet
	}
)

// SetArtifactName sets the "artifact_name" field.
func (u *ReachableCodeArtifactUpsert) SetArtifactName(v string) *ReachableCodeArtifactUpsert {
	u.Set(reachablecodeartifact.FieldArtifactName, v)
	return u
}

// UpdateArtifactName sets the "artifact_name" field to the value that was provided on create.
func (u *ReachableCodeArtifactUpsert) UpdateArtifactName() *ReachableCodeArtifactUpsert {
	u.SetExcluded(reachablecodeartifact.FieldArtifactName)
	return u
}

// ClearArtifactName clears the value of the "artifact_name" field.
func (u *ReachableCodeArtifactUpsert) ClearArtifactName() *ReachableCodeArtifactUpsert {
	u.SetNull(reachablecodeartifact.FieldArtifactName)
	return u
}

// SetUsedInLines sets the "used_in_lines" field.
func (u *ReachableCodeArtifactUpsert) SetUsedInLines(v string) *ReachableCodeArtifactUpsert {
	u.Set(reachablecodeartifact.FieldUsedInLines, v)
	return u
}

// UpdateUsedInLines sets the "used_in_lines" field to the value that was provided on create.
func (u *ReachableCodeArtifactUpsert) UpdateUsedInLines() *ReachableCodeArtifactUpsert {
	u.SetExcluded(reachablecodeartifact.FieldUsedInLines)
	return u
}

// ClearUsedInLines clears the value of the "used_in_lines" field.
func (u *ReachableCodeArtifactUpsert) ClearUsedInLines() *ReachableCodeArtifactUpsert {
	u.SetNull(reachablecodeartifact.FieldUsedInLines)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ReachableCodeArtifact.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(reachablecodeartifact.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ReachableCodeArtifactUpsertOne) UpdateNewValues() *ReachableCodeArtifactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(reachablecodeartifact.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ReachableCodeArtifact.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ReachableCodeArtifactUpsertOne) Ignore() *ReachableCodeArtifactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReachableCodeArtifactUpsertOne) DoNothing() *ReachableCodeArtifactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReachableCodeArtifactCreate.OnConflict
// documentation for more info.
func (u *ReachableCodeArtifactUpsertOne) Update(set func(*ReachableCodeArtifactUpsert)) *ReachableCodeArtifactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReachableCodeArtifactUpsert{UpdateSet: update})
	}))
	return u
}

// SetArtifactName sets the "artifact_name" field.
func (u *ReachableCodeArtifactUpsertOne) SetArtifactName(v string) *ReachableCodeArtifactUpsertOne {
	return u.Update(func(s *ReachableCodeArtifactUpsert) {
		s.SetArtifactName(v)
	})
}

// UpdateArtifactName sets the "artifact_name" field to the value that was provided on create.
func (u *ReachableCodeArtifactUpsertOne) UpdateArtifactName() *ReachableCodeArtifactUpsertOne {
	return u.Update(func(s *ReachableCodeArtifactUpsert) {
		s.UpdateArtifactName()
	})
}

// ClearArtifactName clears the value of the "artifact_name" field.
func (u *ReachableCodeArtifactUpsertOne) ClearArtifactName() *ReachableCodeArtifactUpsertOne {
	return u.Update(func(s *ReachableCodeArtifactUpsert) {
		s.ClearArtifactName()
	})
}

// SetUsedInLines sets the "used_in_lines" field.
func (u *ReachableCodeArtifactUpsertOne) SetUsedInLines(v string) *ReachableCodeArtifactUpsertOne {
	return u.Update(func(s *ReachableCodeArtifactUpsert) {
		s.SetUsedInLines(v)
	})
}

// UpdateUsedInLines sets the "used_in_lines" field to the value that was provided on create.
func (u *ReachableCodeArtifactUpsertOne) UpdateUsedInLines() *ReachableCodeArtifactUpsertOne {
	return u.Update(func(s *ReachableCodeArtifactUpsert) {
		s.UpdateUsedInLines()
	})
}

// ClearUsedInLines clears the value of the "used_in_lines" field.
func (u *ReachableCodeArtifactUpsertOne) ClearUsedInLines() *ReachableCodeArtifactUpsertOne {
	return u.Update(func(s *ReachableCodeArtifactUpsert) {
		s.ClearUsedInLines()
	})
}

// Exec executes the query.
func (u *ReachableCodeArtifactUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReachableCodeArtifactCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReachableCodeArtifactUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ReachableCodeArtifactUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ReachableCodeArtifactUpsertOne.ID is not supported by MySQL driver. Use ReachableCodeArtifactUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ReachableCodeArtifactUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ReachableCodeArtifactCreateBulk is the builder for creating many ReachableCodeArtifact entities in bulk.
type ReachableCodeArtifactCreateBulk struct {
	config
	err      error
	builders []*ReachableCodeArtifactCreate
	conflict []sql.ConflictOption
}

// Save creates the ReachableCodeArtifact entities in the database.
func (rcacb *ReachableCodeArtifactCreateBulk) Save(ctx context.Context) ([]*ReachableCodeArtifact, error) {
	if rcacb.err != nil {
		return nil, rcacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcacb.builders))
	nodes := make([]*ReachableCodeArtifact, len(rcacb.builders))
	mutators := make([]Mutator, len(rcacb.builders))
	for i := range rcacb.builders {
		func(i int, root context.Context) {
			builder := rcacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReachableCodeArtifactMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcacb *ReachableCodeArtifactCreateBulk) SaveX(ctx context.Context) []*ReachableCodeArtifact {
	v, err := rcacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcacb *ReachableCodeArtifactCreateBulk) Exec(ctx context.Context) error {
	_, err := rcacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcacb *ReachableCodeArtifactCreateBulk) ExecX(ctx context.Context) {
	if err := rcacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ReachableCodeArtifact.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReachableCodeArtifactUpsert) {
//			SetArtifactName(v+v).
//		}).
//		Exec(ctx)
func (rcacb *ReachableCodeArtifactCreateBulk) OnConflict(opts ...sql.ConflictOption) *ReachableCodeArtifactUpsertBulk {
	rcacb.conflict = opts
	return &ReachableCodeArtifactUpsertBulk{
		create: rcacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ReachableCodeArtifact.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcacb *ReachableCodeArtifactCreateBulk) OnConflictColumns(columns ...string) *ReachableCodeArtifactUpsertBulk {
	rcacb.conflict = append(rcacb.conflict, sql.ConflictColumns(columns...))
	return &ReachableCodeArtifactUpsertBulk{
		create: rcacb,
	}
}

// ReachableCodeArtifactUpsertBulk is the builder for "upsert"-ing
// a bulk of ReachableCodeArtifact nodes.
type ReachableCodeArtifactUpsertBulk struct {
	create *ReachableCodeArtifactCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ReachableCodeArtifact.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(reachablecodeartifact.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ReachableCodeArtifactUpsertBulk) UpdateNewValues() *ReachableCodeArtifactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(reachablecodeartifact.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ReachableCodeArtifact.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ReachableCodeArtifactUpsertBulk) Ignore() *ReachableCodeArtifactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReachableCodeArtifactUpsertBulk) DoNothing() *ReachableCodeArtifactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReachableCodeArtifactCreateBulk.OnConflict
// documentation for more info.
func (u *ReachableCodeArtifactUpsertBulk) Update(set func(*ReachableCodeArtifactUpsert)) *ReachableCodeArtifactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReachableCodeArtifactUpsert{UpdateSet: update})
	}))
	return u
}

// SetArtifactName sets the "artifact_name" field.
func (u *ReachableCodeArtifactUpsertBulk) SetArtifactName(v string) *ReachableCodeArtifactUpsertBulk {
	return u.Update(func(s *ReachableCodeArtifactUpsert) {
		s.SetArtifactName(v)
	})
}

// UpdateArtifactName sets the "artifact_name" field to the value that was provided on create.
func (u *ReachableCodeArtifactUpsertBulk) UpdateArtifactName() *ReachableCodeArtifactUpsertBulk {
	return u.Update(func(s *ReachableCodeArtifactUpsert) {
		s.UpdateArtifactName()
	})
}

// ClearArtifactName clears the value of the "artifact_name" field.
func (u *ReachableCodeArtifactUpsertBulk) ClearArtifactName() *ReachableCodeArtifactUpsertBulk {
	return u.Update(func(s *ReachableCodeArtifactUpsert) {
		s.ClearArtifactName()
	})
}

// SetUsedInLines sets the "used_in_lines" field.
func (u *ReachableCodeArtifactUpsertBulk) SetUsedInLines(v string) *ReachableCodeArtifactUpsertBulk {
	return u.Update(func(s *ReachableCodeArtifactUpsert) {
		s.SetUsedInLines(v)
	})
}

// UpdateUsedInLines sets the "used_in_lines" field to the value that was provided on create.
func (u *ReachableCodeArtifactUpsertBulk) UpdateUsedInLines() *ReachableCodeArtifactUpsertBulk {
	return u.Update(func(s *ReachableCodeArtifactUpsert) {
		s.UpdateUsedInLines()
	})
}

// ClearUsedInLines clears the value of the "used_in_lines" field.
func (u *ReachableCodeArtifactUpsertBulk) ClearUsedInLines() *ReachableCodeArtifactUpsertBulk {
	return u.Update(func(s *ReachableCodeArtifactUpsert) {
		s.ClearUsedInLines()
	})
}

// Exec executes the query.
func (u *ReachableCodeArtifactUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ReachableCodeArtifactCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReachableCodeArtifactCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReachableCodeArtifactUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
