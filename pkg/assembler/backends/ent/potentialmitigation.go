// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/potentialmitigation"
)

// PotentialMitigation is the model entity for the PotentialMitigation schema.
type PotentialMitigation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Phase holds the value of the "phase" field.
	Phase *string `json:"phase,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Effectiveness holds the value of the "effectiveness" field.
	Effectiveness *string `json:"effectiveness,omitempty"`
	// EffectivenessNotes holds the value of the "effectiveness_notes" field.
	EffectivenessNotes *string `json:"effectiveness_notes,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PotentialMitigationQuery when eager-loading is set.
	Edges        PotentialMitigationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PotentialMitigationEdges holds the relations/edges for other nodes in the graph.
type PotentialMitigationEdges struct {
	// Cwe holds the value of the cwe edge.
	Cwe []*CWE `json:"cwe,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedCwe map[string][]*CWE
}

// CweOrErr returns the Cwe value or an error if the edge
// was not loaded in eager-loading.
func (e PotentialMitigationEdges) CweOrErr() ([]*CWE, error) {
	if e.loadedTypes[0] {
		return e.Cwe, nil
	}
	return nil, &NotLoadedError{edge: "cwe"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PotentialMitigation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case potentialmitigation.FieldPhase, potentialmitigation.FieldDescription, potentialmitigation.FieldEffectiveness, potentialmitigation.FieldEffectivenessNotes:
			values[i] = new(sql.NullString)
		case potentialmitigation.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PotentialMitigation fields.
func (pm *PotentialMitigation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case potentialmitigation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pm.ID = *value
			}
		case potentialmitigation.FieldPhase:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phase", values[i])
			} else if value.Valid {
				pm.Phase = new(string)
				*pm.Phase = value.String
			}
		case potentialmitigation.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pm.Description = new(string)
				*pm.Description = value.String
			}
		case potentialmitigation.FieldEffectiveness:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field effectiveness", values[i])
			} else if value.Valid {
				pm.Effectiveness = new(string)
				*pm.Effectiveness = value.String
			}
		case potentialmitigation.FieldEffectivenessNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field effectiveness_notes", values[i])
			} else if value.Valid {
				pm.EffectivenessNotes = new(string)
				*pm.EffectivenessNotes = value.String
			}
		default:
			pm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PotentialMitigation.
// This includes values selected through modifiers, order, etc.
func (pm *PotentialMitigation) Value(name string) (ent.Value, error) {
	return pm.selectValues.Get(name)
}

// QueryCwe queries the "cwe" edge of the PotentialMitigation entity.
func (pm *PotentialMitigation) QueryCwe() *CWEQuery {
	return NewPotentialMitigationClient(pm.config).QueryCwe(pm)
}

// Update returns a builder for updating this PotentialMitigation.
// Note that you need to call PotentialMitigation.Unwrap() before calling this method if this PotentialMitigation
// was returned from a transaction, and the transaction was committed or rolled back.
func (pm *PotentialMitigation) Update() *PotentialMitigationUpdateOne {
	return NewPotentialMitigationClient(pm.config).UpdateOne(pm)
}

// Unwrap unwraps the PotentialMitigation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pm *PotentialMitigation) Unwrap() *PotentialMitigation {
	_tx, ok := pm.config.driver.(*txDriver)
	if !ok {
		panic("ent: PotentialMitigation is not a transactional entity")
	}
	pm.config.driver = _tx.drv
	return pm
}

// String implements the fmt.Stringer.
func (pm *PotentialMitigation) String() string {
	var builder strings.Builder
	builder.WriteString("PotentialMitigation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pm.ID))
	if v := pm.Phase; v != nil {
		builder.WriteString("phase=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pm.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pm.Effectiveness; v != nil {
		builder.WriteString("effectiveness=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pm.EffectivenessNotes; v != nil {
		builder.WriteString("effectiveness_notes=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedCwe returns the Cwe named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pm *PotentialMitigation) NamedCwe(name string) ([]*CWE, error) {
	if pm.Edges.namedCwe == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pm.Edges.namedCwe[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pm *PotentialMitigation) appendNamedCwe(name string, edges ...*CWE) {
	if pm.Edges.namedCwe == nil {
		pm.Edges.namedCwe = make(map[string][]*CWE)
	}
	if len(edges) == 0 {
		pm.Edges.namedCwe[name] = []*CWE{}
	} else {
		pm.Edges.namedCwe[name] = append(pm.Edges.namedCwe[name], edges...)
	}
}

// PotentialMitigations is a parsable slice of PotentialMitigation.
type PotentialMitigations []*PotentialMitigation
