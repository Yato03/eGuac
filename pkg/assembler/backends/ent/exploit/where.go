// Code generated by ent, DO NOT EDIT.

package exploit

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Exploit {
	return predicate.Exploit(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Exploit {
	return predicate.Exploit(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Exploit {
	return predicate.Exploit(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Exploit {
	return predicate.Exploit(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Exploit {
	return predicate.Exploit(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Exploit {
	return predicate.Exploit(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Exploit {
	return predicate.Exploit(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Exploit {
	return predicate.Exploit(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Exploit {
	return predicate.Exploit(sql.FieldLTE(FieldID, id))
}

// ExploitID applies equality check predicate on the "exploit_id" field. It's identical to ExploitIDEQ.
func ExploitID(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldEQ(FieldExploitID, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldEQ(FieldDescription, v))
}

// Payload applies equality check predicate on the "payload" field. It's identical to PayloadEQ.
func Payload(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldEQ(FieldPayload, v))
}

// ExploitIDEQ applies the EQ predicate on the "exploit_id" field.
func ExploitIDEQ(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldEQ(FieldExploitID, v))
}

// ExploitIDNEQ applies the NEQ predicate on the "exploit_id" field.
func ExploitIDNEQ(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldNEQ(FieldExploitID, v))
}

// ExploitIDIn applies the In predicate on the "exploit_id" field.
func ExploitIDIn(vs ...string) predicate.Exploit {
	return predicate.Exploit(sql.FieldIn(FieldExploitID, vs...))
}

// ExploitIDNotIn applies the NotIn predicate on the "exploit_id" field.
func ExploitIDNotIn(vs ...string) predicate.Exploit {
	return predicate.Exploit(sql.FieldNotIn(FieldExploitID, vs...))
}

// ExploitIDGT applies the GT predicate on the "exploit_id" field.
func ExploitIDGT(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldGT(FieldExploitID, v))
}

// ExploitIDGTE applies the GTE predicate on the "exploit_id" field.
func ExploitIDGTE(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldGTE(FieldExploitID, v))
}

// ExploitIDLT applies the LT predicate on the "exploit_id" field.
func ExploitIDLT(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldLT(FieldExploitID, v))
}

// ExploitIDLTE applies the LTE predicate on the "exploit_id" field.
func ExploitIDLTE(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldLTE(FieldExploitID, v))
}

// ExploitIDContains applies the Contains predicate on the "exploit_id" field.
func ExploitIDContains(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldContains(FieldExploitID, v))
}

// ExploitIDHasPrefix applies the HasPrefix predicate on the "exploit_id" field.
func ExploitIDHasPrefix(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldHasPrefix(FieldExploitID, v))
}

// ExploitIDHasSuffix applies the HasSuffix predicate on the "exploit_id" field.
func ExploitIDHasSuffix(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldHasSuffix(FieldExploitID, v))
}

// ExploitIDIsNil applies the IsNil predicate on the "exploit_id" field.
func ExploitIDIsNil() predicate.Exploit {
	return predicate.Exploit(sql.FieldIsNull(FieldExploitID))
}

// ExploitIDNotNil applies the NotNil predicate on the "exploit_id" field.
func ExploitIDNotNil() predicate.Exploit {
	return predicate.Exploit(sql.FieldNotNull(FieldExploitID))
}

// ExploitIDEqualFold applies the EqualFold predicate on the "exploit_id" field.
func ExploitIDEqualFold(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldEqualFold(FieldExploitID, v))
}

// ExploitIDContainsFold applies the ContainsFold predicate on the "exploit_id" field.
func ExploitIDContainsFold(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldContainsFold(FieldExploitID, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Exploit {
	return predicate.Exploit(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Exploit {
	return predicate.Exploit(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Exploit {
	return predicate.Exploit(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Exploit {
	return predicate.Exploit(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldContainsFold(FieldDescription, v))
}

// PayloadEQ applies the EQ predicate on the "payload" field.
func PayloadEQ(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldEQ(FieldPayload, v))
}

// PayloadNEQ applies the NEQ predicate on the "payload" field.
func PayloadNEQ(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldNEQ(FieldPayload, v))
}

// PayloadIn applies the In predicate on the "payload" field.
func PayloadIn(vs ...string) predicate.Exploit {
	return predicate.Exploit(sql.FieldIn(FieldPayload, vs...))
}

// PayloadNotIn applies the NotIn predicate on the "payload" field.
func PayloadNotIn(vs ...string) predicate.Exploit {
	return predicate.Exploit(sql.FieldNotIn(FieldPayload, vs...))
}

// PayloadGT applies the GT predicate on the "payload" field.
func PayloadGT(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldGT(FieldPayload, v))
}

// PayloadGTE applies the GTE predicate on the "payload" field.
func PayloadGTE(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldGTE(FieldPayload, v))
}

// PayloadLT applies the LT predicate on the "payload" field.
func PayloadLT(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldLT(FieldPayload, v))
}

// PayloadLTE applies the LTE predicate on the "payload" field.
func PayloadLTE(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldLTE(FieldPayload, v))
}

// PayloadContains applies the Contains predicate on the "payload" field.
func PayloadContains(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldContains(FieldPayload, v))
}

// PayloadHasPrefix applies the HasPrefix predicate on the "payload" field.
func PayloadHasPrefix(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldHasPrefix(FieldPayload, v))
}

// PayloadHasSuffix applies the HasSuffix predicate on the "payload" field.
func PayloadHasSuffix(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldHasSuffix(FieldPayload, v))
}

// PayloadIsNil applies the IsNil predicate on the "payload" field.
func PayloadIsNil() predicate.Exploit {
	return predicate.Exploit(sql.FieldIsNull(FieldPayload))
}

// PayloadNotNil applies the NotNil predicate on the "payload" field.
func PayloadNotNil() predicate.Exploit {
	return predicate.Exploit(sql.FieldNotNull(FieldPayload))
}

// PayloadEqualFold applies the EqualFold predicate on the "payload" field.
func PayloadEqualFold(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldEqualFold(FieldPayload, v))
}

// PayloadContainsFold applies the ContainsFold predicate on the "payload" field.
func PayloadContainsFold(v string) predicate.Exploit {
	return predicate.Exploit(sql.FieldContainsFold(FieldPayload, v))
}

// HasCertifyVex applies the HasEdge predicate on the "certify_vex" edge.
func HasCertifyVex() predicate.Exploit {
	return predicate.Exploit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CertifyVexTable, CertifyVexPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCertifyVexWith applies the HasEdge predicate on the "certify_vex" edge with a given conditions (other predicates).
func HasCertifyVexWith(preds ...predicate.CertifyVex) predicate.Exploit {
	return predicate.Exploit(func(s *sql.Selector) {
		step := newCertifyVexStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Exploit) predicate.Exploit {
	return predicate.Exploit(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Exploit) predicate.Exploit {
	return predicate.Exploit(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Exploit) predicate.Exploit {
	return predicate.Exploit(sql.NotPredicates(p))
}
