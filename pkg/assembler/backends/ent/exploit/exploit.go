// Code generated by ent, DO NOT EDIT.

package exploit

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the exploit type in the database.
	Label = "exploit"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldExploitID holds the string denoting the exploit_id field in the database.
	FieldExploitID = "exploit_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldPayload holds the string denoting the payload field in the database.
	FieldPayload = "payload"
	// EdgeCertifyVex holds the string denoting the certify_vex edge name in mutations.
	EdgeCertifyVex = "certify_vex"
	// Table holds the table name of the exploit in the database.
	Table = "exploits"
	// CertifyVexTable is the table that holds the certify_vex relation/edge. The primary key declared below.
	CertifyVexTable = "certify_vex_exploit"
	// CertifyVexInverseTable is the table name for the CertifyVex entity.
	// It exists in this package in order to avoid circular dependency with the "certifyvex" package.
	CertifyVexInverseTable = "certify_vexes"
)

// Columns holds all SQL columns for exploit fields.
var Columns = []string{
	FieldID,
	FieldExploitID,
	FieldDescription,
	FieldPayload,
}

var (
	// CertifyVexPrimaryKey and CertifyVexColumn2 are the table columns denoting the
	// primary key for the certify_vex relation (M2M).
	CertifyVexPrimaryKey = []string{"certify_vex_id", "exploit_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Exploit queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByExploitID orders the results by the exploit_id field.
func ByExploitID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExploitID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByPayload orders the results by the payload field.
func ByPayload(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayload, opts...).ToFunc()
}

// ByCertifyVexCount orders the results by certify_vex count.
func ByCertifyVexCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCertifyVexStep(), opts...)
	}
}

// ByCertifyVex orders the results by certify_vex terms.
func ByCertifyVex(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCertifyVexStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCertifyVexStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CertifyVexInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CertifyVexTable, CertifyVexPrimaryKey...),
	)
}
