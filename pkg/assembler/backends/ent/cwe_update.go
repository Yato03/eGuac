// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyvex"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/consequence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/cwe"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/demonstrativeexample"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/detectionmethod"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/potentialmitigation"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// CWEUpdate is the builder for updating CWE entities.
type CWEUpdate struct {
	config
	hooks    []Hook
	mutation *CWEMutation
}

// Where appends a list predicates to the CWEUpdate builder.
func (cu *CWEUpdate) Where(ps ...predicate.CWE) *CWEUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetVexID sets the "vex_id" field.
func (cu *CWEUpdate) SetVexID(s string) *CWEUpdate {
	cu.mutation.SetVexID(s)
	return cu
}

// SetNillableVexID sets the "vex_id" field if the given value is not nil.
func (cu *CWEUpdate) SetNillableVexID(s *string) *CWEUpdate {
	if s != nil {
		cu.SetVexID(*s)
	}
	return cu
}

// SetName sets the "name" field.
func (cu *CWEUpdate) SetName(s string) *CWEUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CWEUpdate) SetNillableName(s *string) *CWEUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetDescription sets the "description" field.
func (cu *CWEUpdate) SetDescription(s string) *CWEUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CWEUpdate) SetNillableDescription(s *string) *CWEUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// SetBackgroundDetail sets the "background_detail" field.
func (cu *CWEUpdate) SetBackgroundDetail(s string) *CWEUpdate {
	cu.mutation.SetBackgroundDetail(s)
	return cu
}

// SetNillableBackgroundDetail sets the "background_detail" field if the given value is not nil.
func (cu *CWEUpdate) SetNillableBackgroundDetail(s *string) *CWEUpdate {
	if s != nil {
		cu.SetBackgroundDetail(*s)
	}
	return cu
}

// ClearBackgroundDetail clears the value of the "background_detail" field.
func (cu *CWEUpdate) ClearBackgroundDetail() *CWEUpdate {
	cu.mutation.ClearBackgroundDetail()
	return cu
}

// AddCertifyVexIDs adds the "certify_vex" edge to the CertifyVex entity by IDs.
func (cu *CWEUpdate) AddCertifyVexIDs(ids ...uuid.UUID) *CWEUpdate {
	cu.mutation.AddCertifyVexIDs(ids...)
	return cu
}

// AddCertifyVex adds the "certify_vex" edges to the CertifyVex entity.
func (cu *CWEUpdate) AddCertifyVex(c ...*CertifyVex) *CWEUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCertifyVexIDs(ids...)
}

// AddConsequenceIDs adds the "consequence" edge to the Consequence entity by IDs.
func (cu *CWEUpdate) AddConsequenceIDs(ids ...uuid.UUID) *CWEUpdate {
	cu.mutation.AddConsequenceIDs(ids...)
	return cu
}

// AddConsequence adds the "consequence" edges to the Consequence entity.
func (cu *CWEUpdate) AddConsequence(c ...*Consequence) *CWEUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddConsequenceIDs(ids...)
}

// AddDemonstrativeExampleIDs adds the "demonstrative_example" edge to the DemonstrativeExample entity by IDs.
func (cu *CWEUpdate) AddDemonstrativeExampleIDs(ids ...uuid.UUID) *CWEUpdate {
	cu.mutation.AddDemonstrativeExampleIDs(ids...)
	return cu
}

// AddDemonstrativeExample adds the "demonstrative_example" edges to the DemonstrativeExample entity.
func (cu *CWEUpdate) AddDemonstrativeExample(d ...*DemonstrativeExample) *CWEUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.AddDemonstrativeExampleIDs(ids...)
}

// AddDetectionMethodIDs adds the "detection_method" edge to the DetectionMethod entity by IDs.
func (cu *CWEUpdate) AddDetectionMethodIDs(ids ...uuid.UUID) *CWEUpdate {
	cu.mutation.AddDetectionMethodIDs(ids...)
	return cu
}

// AddDetectionMethod adds the "detection_method" edges to the DetectionMethod entity.
func (cu *CWEUpdate) AddDetectionMethod(d ...*DetectionMethod) *CWEUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.AddDetectionMethodIDs(ids...)
}

// AddPotentialMitigationIDs adds the "potential_mitigation" edge to the PotentialMitigation entity by IDs.
func (cu *CWEUpdate) AddPotentialMitigationIDs(ids ...uuid.UUID) *CWEUpdate {
	cu.mutation.AddPotentialMitigationIDs(ids...)
	return cu
}

// AddPotentialMitigation adds the "potential_mitigation" edges to the PotentialMitigation entity.
func (cu *CWEUpdate) AddPotentialMitigation(p ...*PotentialMitigation) *CWEUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddPotentialMitigationIDs(ids...)
}

// Mutation returns the CWEMutation object of the builder.
func (cu *CWEUpdate) Mutation() *CWEMutation {
	return cu.mutation
}

// ClearCertifyVex clears all "certify_vex" edges to the CertifyVex entity.
func (cu *CWEUpdate) ClearCertifyVex() *CWEUpdate {
	cu.mutation.ClearCertifyVex()
	return cu
}

// RemoveCertifyVexIDs removes the "certify_vex" edge to CertifyVex entities by IDs.
func (cu *CWEUpdate) RemoveCertifyVexIDs(ids ...uuid.UUID) *CWEUpdate {
	cu.mutation.RemoveCertifyVexIDs(ids...)
	return cu
}

// RemoveCertifyVex removes "certify_vex" edges to CertifyVex entities.
func (cu *CWEUpdate) RemoveCertifyVex(c ...*CertifyVex) *CWEUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCertifyVexIDs(ids...)
}

// ClearConsequence clears all "consequence" edges to the Consequence entity.
func (cu *CWEUpdate) ClearConsequence() *CWEUpdate {
	cu.mutation.ClearConsequence()
	return cu
}

// RemoveConsequenceIDs removes the "consequence" edge to Consequence entities by IDs.
func (cu *CWEUpdate) RemoveConsequenceIDs(ids ...uuid.UUID) *CWEUpdate {
	cu.mutation.RemoveConsequenceIDs(ids...)
	return cu
}

// RemoveConsequence removes "consequence" edges to Consequence entities.
func (cu *CWEUpdate) RemoveConsequence(c ...*Consequence) *CWEUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveConsequenceIDs(ids...)
}

// ClearDemonstrativeExample clears all "demonstrative_example" edges to the DemonstrativeExample entity.
func (cu *CWEUpdate) ClearDemonstrativeExample() *CWEUpdate {
	cu.mutation.ClearDemonstrativeExample()
	return cu
}

// RemoveDemonstrativeExampleIDs removes the "demonstrative_example" edge to DemonstrativeExample entities by IDs.
func (cu *CWEUpdate) RemoveDemonstrativeExampleIDs(ids ...uuid.UUID) *CWEUpdate {
	cu.mutation.RemoveDemonstrativeExampleIDs(ids...)
	return cu
}

// RemoveDemonstrativeExample removes "demonstrative_example" edges to DemonstrativeExample entities.
func (cu *CWEUpdate) RemoveDemonstrativeExample(d ...*DemonstrativeExample) *CWEUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.RemoveDemonstrativeExampleIDs(ids...)
}

// ClearDetectionMethod clears all "detection_method" edges to the DetectionMethod entity.
func (cu *CWEUpdate) ClearDetectionMethod() *CWEUpdate {
	cu.mutation.ClearDetectionMethod()
	return cu
}

// RemoveDetectionMethodIDs removes the "detection_method" edge to DetectionMethod entities by IDs.
func (cu *CWEUpdate) RemoveDetectionMethodIDs(ids ...uuid.UUID) *CWEUpdate {
	cu.mutation.RemoveDetectionMethodIDs(ids...)
	return cu
}

// RemoveDetectionMethod removes "detection_method" edges to DetectionMethod entities.
func (cu *CWEUpdate) RemoveDetectionMethod(d ...*DetectionMethod) *CWEUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.RemoveDetectionMethodIDs(ids...)
}

// ClearPotentialMitigation clears all "potential_mitigation" edges to the PotentialMitigation entity.
func (cu *CWEUpdate) ClearPotentialMitigation() *CWEUpdate {
	cu.mutation.ClearPotentialMitigation()
	return cu
}

// RemovePotentialMitigationIDs removes the "potential_mitigation" edge to PotentialMitigation entities by IDs.
func (cu *CWEUpdate) RemovePotentialMitigationIDs(ids ...uuid.UUID) *CWEUpdate {
	cu.mutation.RemovePotentialMitigationIDs(ids...)
	return cu
}

// RemovePotentialMitigation removes "potential_mitigation" edges to PotentialMitigation entities.
func (cu *CWEUpdate) RemovePotentialMitigation(p ...*PotentialMitigation) *CWEUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemovePotentialMitigationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CWEUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CWEUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CWEUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CWEUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CWEUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(cwe.Table, cwe.Columns, sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.VexID(); ok {
		_spec.SetField(cwe.FieldVexID, field.TypeString, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(cwe.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(cwe.FieldDescription, field.TypeString, value)
	}
	if value, ok := cu.mutation.BackgroundDetail(); ok {
		_spec.SetField(cwe.FieldBackgroundDetail, field.TypeString, value)
	}
	if cu.mutation.BackgroundDetailCleared() {
		_spec.ClearField(cwe.FieldBackgroundDetail, field.TypeString)
	}
	if cu.mutation.CertifyVexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   cwe.CertifyVexTable,
			Columns: cwe.CertifyVexPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCertifyVexIDs(); len(nodes) > 0 && !cu.mutation.CertifyVexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   cwe.CertifyVexTable,
			Columns: cwe.CertifyVexPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CertifyVexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   cwe.CertifyVexTable,
			Columns: cwe.CertifyVexPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ConsequenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.ConsequenceTable,
			Columns: cwe.ConsequencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedConsequenceIDs(); len(nodes) > 0 && !cu.mutation.ConsequenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.ConsequenceTable,
			Columns: cwe.ConsequencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ConsequenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.ConsequenceTable,
			Columns: cwe.ConsequencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DemonstrativeExampleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.DemonstrativeExampleTable,
			Columns: cwe.DemonstrativeExamplePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(demonstrativeexample.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedDemonstrativeExampleIDs(); len(nodes) > 0 && !cu.mutation.DemonstrativeExampleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.DemonstrativeExampleTable,
			Columns: cwe.DemonstrativeExamplePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(demonstrativeexample.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DemonstrativeExampleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.DemonstrativeExampleTable,
			Columns: cwe.DemonstrativeExamplePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(demonstrativeexample.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DetectionMethodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.DetectionMethodTable,
			Columns: cwe.DetectionMethodPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(detectionmethod.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedDetectionMethodIDs(); len(nodes) > 0 && !cu.mutation.DetectionMethodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.DetectionMethodTable,
			Columns: cwe.DetectionMethodPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(detectionmethod.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DetectionMethodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.DetectionMethodTable,
			Columns: cwe.DetectionMethodPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(detectionmethod.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PotentialMitigationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.PotentialMitigationTable,
			Columns: cwe.PotentialMitigationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(potentialmitigation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedPotentialMitigationIDs(); len(nodes) > 0 && !cu.mutation.PotentialMitigationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.PotentialMitigationTable,
			Columns: cwe.PotentialMitigationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(potentialmitigation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PotentialMitigationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.PotentialMitigationTable,
			Columns: cwe.PotentialMitigationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(potentialmitigation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cwe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CWEUpdateOne is the builder for updating a single CWE entity.
type CWEUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CWEMutation
}

// SetVexID sets the "vex_id" field.
func (cuo *CWEUpdateOne) SetVexID(s string) *CWEUpdateOne {
	cuo.mutation.SetVexID(s)
	return cuo
}

// SetNillableVexID sets the "vex_id" field if the given value is not nil.
func (cuo *CWEUpdateOne) SetNillableVexID(s *string) *CWEUpdateOne {
	if s != nil {
		cuo.SetVexID(*s)
	}
	return cuo
}

// SetName sets the "name" field.
func (cuo *CWEUpdateOne) SetName(s string) *CWEUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CWEUpdateOne) SetNillableName(s *string) *CWEUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CWEUpdateOne) SetDescription(s string) *CWEUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CWEUpdateOne) SetNillableDescription(s *string) *CWEUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// SetBackgroundDetail sets the "background_detail" field.
func (cuo *CWEUpdateOne) SetBackgroundDetail(s string) *CWEUpdateOne {
	cuo.mutation.SetBackgroundDetail(s)
	return cuo
}

// SetNillableBackgroundDetail sets the "background_detail" field if the given value is not nil.
func (cuo *CWEUpdateOne) SetNillableBackgroundDetail(s *string) *CWEUpdateOne {
	if s != nil {
		cuo.SetBackgroundDetail(*s)
	}
	return cuo
}

// ClearBackgroundDetail clears the value of the "background_detail" field.
func (cuo *CWEUpdateOne) ClearBackgroundDetail() *CWEUpdateOne {
	cuo.mutation.ClearBackgroundDetail()
	return cuo
}

// AddCertifyVexIDs adds the "certify_vex" edge to the CertifyVex entity by IDs.
func (cuo *CWEUpdateOne) AddCertifyVexIDs(ids ...uuid.UUID) *CWEUpdateOne {
	cuo.mutation.AddCertifyVexIDs(ids...)
	return cuo
}

// AddCertifyVex adds the "certify_vex" edges to the CertifyVex entity.
func (cuo *CWEUpdateOne) AddCertifyVex(c ...*CertifyVex) *CWEUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCertifyVexIDs(ids...)
}

// AddConsequenceIDs adds the "consequence" edge to the Consequence entity by IDs.
func (cuo *CWEUpdateOne) AddConsequenceIDs(ids ...uuid.UUID) *CWEUpdateOne {
	cuo.mutation.AddConsequenceIDs(ids...)
	return cuo
}

// AddConsequence adds the "consequence" edges to the Consequence entity.
func (cuo *CWEUpdateOne) AddConsequence(c ...*Consequence) *CWEUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddConsequenceIDs(ids...)
}

// AddDemonstrativeExampleIDs adds the "demonstrative_example" edge to the DemonstrativeExample entity by IDs.
func (cuo *CWEUpdateOne) AddDemonstrativeExampleIDs(ids ...uuid.UUID) *CWEUpdateOne {
	cuo.mutation.AddDemonstrativeExampleIDs(ids...)
	return cuo
}

// AddDemonstrativeExample adds the "demonstrative_example" edges to the DemonstrativeExample entity.
func (cuo *CWEUpdateOne) AddDemonstrativeExample(d ...*DemonstrativeExample) *CWEUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.AddDemonstrativeExampleIDs(ids...)
}

// AddDetectionMethodIDs adds the "detection_method" edge to the DetectionMethod entity by IDs.
func (cuo *CWEUpdateOne) AddDetectionMethodIDs(ids ...uuid.UUID) *CWEUpdateOne {
	cuo.mutation.AddDetectionMethodIDs(ids...)
	return cuo
}

// AddDetectionMethod adds the "detection_method" edges to the DetectionMethod entity.
func (cuo *CWEUpdateOne) AddDetectionMethod(d ...*DetectionMethod) *CWEUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.AddDetectionMethodIDs(ids...)
}

// AddPotentialMitigationIDs adds the "potential_mitigation" edge to the PotentialMitigation entity by IDs.
func (cuo *CWEUpdateOne) AddPotentialMitigationIDs(ids ...uuid.UUID) *CWEUpdateOne {
	cuo.mutation.AddPotentialMitigationIDs(ids...)
	return cuo
}

// AddPotentialMitigation adds the "potential_mitigation" edges to the PotentialMitigation entity.
func (cuo *CWEUpdateOne) AddPotentialMitigation(p ...*PotentialMitigation) *CWEUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddPotentialMitigationIDs(ids...)
}

// Mutation returns the CWEMutation object of the builder.
func (cuo *CWEUpdateOne) Mutation() *CWEMutation {
	return cuo.mutation
}

// ClearCertifyVex clears all "certify_vex" edges to the CertifyVex entity.
func (cuo *CWEUpdateOne) ClearCertifyVex() *CWEUpdateOne {
	cuo.mutation.ClearCertifyVex()
	return cuo
}

// RemoveCertifyVexIDs removes the "certify_vex" edge to CertifyVex entities by IDs.
func (cuo *CWEUpdateOne) RemoveCertifyVexIDs(ids ...uuid.UUID) *CWEUpdateOne {
	cuo.mutation.RemoveCertifyVexIDs(ids...)
	return cuo
}

// RemoveCertifyVex removes "certify_vex" edges to CertifyVex entities.
func (cuo *CWEUpdateOne) RemoveCertifyVex(c ...*CertifyVex) *CWEUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCertifyVexIDs(ids...)
}

// ClearConsequence clears all "consequence" edges to the Consequence entity.
func (cuo *CWEUpdateOne) ClearConsequence() *CWEUpdateOne {
	cuo.mutation.ClearConsequence()
	return cuo
}

// RemoveConsequenceIDs removes the "consequence" edge to Consequence entities by IDs.
func (cuo *CWEUpdateOne) RemoveConsequenceIDs(ids ...uuid.UUID) *CWEUpdateOne {
	cuo.mutation.RemoveConsequenceIDs(ids...)
	return cuo
}

// RemoveConsequence removes "consequence" edges to Consequence entities.
func (cuo *CWEUpdateOne) RemoveConsequence(c ...*Consequence) *CWEUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveConsequenceIDs(ids...)
}

// ClearDemonstrativeExample clears all "demonstrative_example" edges to the DemonstrativeExample entity.
func (cuo *CWEUpdateOne) ClearDemonstrativeExample() *CWEUpdateOne {
	cuo.mutation.ClearDemonstrativeExample()
	return cuo
}

// RemoveDemonstrativeExampleIDs removes the "demonstrative_example" edge to DemonstrativeExample entities by IDs.
func (cuo *CWEUpdateOne) RemoveDemonstrativeExampleIDs(ids ...uuid.UUID) *CWEUpdateOne {
	cuo.mutation.RemoveDemonstrativeExampleIDs(ids...)
	return cuo
}

// RemoveDemonstrativeExample removes "demonstrative_example" edges to DemonstrativeExample entities.
func (cuo *CWEUpdateOne) RemoveDemonstrativeExample(d ...*DemonstrativeExample) *CWEUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.RemoveDemonstrativeExampleIDs(ids...)
}

// ClearDetectionMethod clears all "detection_method" edges to the DetectionMethod entity.
func (cuo *CWEUpdateOne) ClearDetectionMethod() *CWEUpdateOne {
	cuo.mutation.ClearDetectionMethod()
	return cuo
}

// RemoveDetectionMethodIDs removes the "detection_method" edge to DetectionMethod entities by IDs.
func (cuo *CWEUpdateOne) RemoveDetectionMethodIDs(ids ...uuid.UUID) *CWEUpdateOne {
	cuo.mutation.RemoveDetectionMethodIDs(ids...)
	return cuo
}

// RemoveDetectionMethod removes "detection_method" edges to DetectionMethod entities.
func (cuo *CWEUpdateOne) RemoveDetectionMethod(d ...*DetectionMethod) *CWEUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.RemoveDetectionMethodIDs(ids...)
}

// ClearPotentialMitigation clears all "potential_mitigation" edges to the PotentialMitigation entity.
func (cuo *CWEUpdateOne) ClearPotentialMitigation() *CWEUpdateOne {
	cuo.mutation.ClearPotentialMitigation()
	return cuo
}

// RemovePotentialMitigationIDs removes the "potential_mitigation" edge to PotentialMitigation entities by IDs.
func (cuo *CWEUpdateOne) RemovePotentialMitigationIDs(ids ...uuid.UUID) *CWEUpdateOne {
	cuo.mutation.RemovePotentialMitigationIDs(ids...)
	return cuo
}

// RemovePotentialMitigation removes "potential_mitigation" edges to PotentialMitigation entities.
func (cuo *CWEUpdateOne) RemovePotentialMitigation(p ...*PotentialMitigation) *CWEUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemovePotentialMitigationIDs(ids...)
}

// Where appends a list predicates to the CWEUpdate builder.
func (cuo *CWEUpdateOne) Where(ps ...predicate.CWE) *CWEUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CWEUpdateOne) Select(field string, fields ...string) *CWEUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated CWE entity.
func (cuo *CWEUpdateOne) Save(ctx context.Context) (*CWE, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CWEUpdateOne) SaveX(ctx context.Context) *CWE {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CWEUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CWEUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CWEUpdateOne) sqlSave(ctx context.Context) (_node *CWE, err error) {
	_spec := sqlgraph.NewUpdateSpec(cwe.Table, cwe.Columns, sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CWE.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cwe.FieldID)
		for _, f := range fields {
			if !cwe.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cwe.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.VexID(); ok {
		_spec.SetField(cwe.FieldVexID, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(cwe.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(cwe.FieldDescription, field.TypeString, value)
	}
	if value, ok := cuo.mutation.BackgroundDetail(); ok {
		_spec.SetField(cwe.FieldBackgroundDetail, field.TypeString, value)
	}
	if cuo.mutation.BackgroundDetailCleared() {
		_spec.ClearField(cwe.FieldBackgroundDetail, field.TypeString)
	}
	if cuo.mutation.CertifyVexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   cwe.CertifyVexTable,
			Columns: cwe.CertifyVexPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCertifyVexIDs(); len(nodes) > 0 && !cuo.mutation.CertifyVexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   cwe.CertifyVexTable,
			Columns: cwe.CertifyVexPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CertifyVexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   cwe.CertifyVexTable,
			Columns: cwe.CertifyVexPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ConsequenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.ConsequenceTable,
			Columns: cwe.ConsequencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedConsequenceIDs(); len(nodes) > 0 && !cuo.mutation.ConsequenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.ConsequenceTable,
			Columns: cwe.ConsequencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ConsequenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.ConsequenceTable,
			Columns: cwe.ConsequencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DemonstrativeExampleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.DemonstrativeExampleTable,
			Columns: cwe.DemonstrativeExamplePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(demonstrativeexample.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedDemonstrativeExampleIDs(); len(nodes) > 0 && !cuo.mutation.DemonstrativeExampleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.DemonstrativeExampleTable,
			Columns: cwe.DemonstrativeExamplePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(demonstrativeexample.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DemonstrativeExampleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.DemonstrativeExampleTable,
			Columns: cwe.DemonstrativeExamplePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(demonstrativeexample.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DetectionMethodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.DetectionMethodTable,
			Columns: cwe.DetectionMethodPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(detectionmethod.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedDetectionMethodIDs(); len(nodes) > 0 && !cuo.mutation.DetectionMethodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.DetectionMethodTable,
			Columns: cwe.DetectionMethodPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(detectionmethod.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DetectionMethodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.DetectionMethodTable,
			Columns: cwe.DetectionMethodPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(detectionmethod.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PotentialMitigationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.PotentialMitigationTable,
			Columns: cwe.PotentialMitigationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(potentialmitigation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedPotentialMitigationIDs(); len(nodes) > 0 && !cuo.mutation.PotentialMitigationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.PotentialMitigationTable,
			Columns: cwe.PotentialMitigationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(potentialmitigation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PotentialMitigationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cwe.PotentialMitigationTable,
			Columns: cwe.PotentialMitigationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(potentialmitigation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CWE{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cwe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
