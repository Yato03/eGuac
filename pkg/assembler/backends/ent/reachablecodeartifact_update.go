// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/reachablecode"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/reachablecodeartifact"
)

// ReachableCodeArtifactUpdate is the builder for updating ReachableCodeArtifact entities.
type ReachableCodeArtifactUpdate struct {
	config
	hooks    []Hook
	mutation *ReachableCodeArtifactMutation
}

// Where appends a list predicates to the ReachableCodeArtifactUpdate builder.
func (rcau *ReachableCodeArtifactUpdate) Where(ps ...predicate.ReachableCodeArtifact) *ReachableCodeArtifactUpdate {
	rcau.mutation.Where(ps...)
	return rcau
}

// SetArtifactName sets the "artifact_name" field.
func (rcau *ReachableCodeArtifactUpdate) SetArtifactName(s string) *ReachableCodeArtifactUpdate {
	rcau.mutation.SetArtifactName(s)
	return rcau
}

// SetNillableArtifactName sets the "artifact_name" field if the given value is not nil.
func (rcau *ReachableCodeArtifactUpdate) SetNillableArtifactName(s *string) *ReachableCodeArtifactUpdate {
	if s != nil {
		rcau.SetArtifactName(*s)
	}
	return rcau
}

// ClearArtifactName clears the value of the "artifact_name" field.
func (rcau *ReachableCodeArtifactUpdate) ClearArtifactName() *ReachableCodeArtifactUpdate {
	rcau.mutation.ClearArtifactName()
	return rcau
}

// SetUsedInLines sets the "used_in_lines" field.
func (rcau *ReachableCodeArtifactUpdate) SetUsedInLines(s string) *ReachableCodeArtifactUpdate {
	rcau.mutation.SetUsedInLines(s)
	return rcau
}

// SetNillableUsedInLines sets the "used_in_lines" field if the given value is not nil.
func (rcau *ReachableCodeArtifactUpdate) SetNillableUsedInLines(s *string) *ReachableCodeArtifactUpdate {
	if s != nil {
		rcau.SetUsedInLines(*s)
	}
	return rcau
}

// ClearUsedInLines clears the value of the "used_in_lines" field.
func (rcau *ReachableCodeArtifactUpdate) ClearUsedInLines() *ReachableCodeArtifactUpdate {
	rcau.mutation.ClearUsedInLines()
	return rcau
}

// AddReachableCodeIDs adds the "reachable_code" edge to the ReachableCode entity by IDs.
func (rcau *ReachableCodeArtifactUpdate) AddReachableCodeIDs(ids ...uuid.UUID) *ReachableCodeArtifactUpdate {
	rcau.mutation.AddReachableCodeIDs(ids...)
	return rcau
}

// AddReachableCode adds the "reachable_code" edges to the ReachableCode entity.
func (rcau *ReachableCodeArtifactUpdate) AddReachableCode(r ...*ReachableCode) *ReachableCodeArtifactUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcau.AddReachableCodeIDs(ids...)
}

// Mutation returns the ReachableCodeArtifactMutation object of the builder.
func (rcau *ReachableCodeArtifactUpdate) Mutation() *ReachableCodeArtifactMutation {
	return rcau.mutation
}

// ClearReachableCode clears all "reachable_code" edges to the ReachableCode entity.
func (rcau *ReachableCodeArtifactUpdate) ClearReachableCode() *ReachableCodeArtifactUpdate {
	rcau.mutation.ClearReachableCode()
	return rcau
}

// RemoveReachableCodeIDs removes the "reachable_code" edge to ReachableCode entities by IDs.
func (rcau *ReachableCodeArtifactUpdate) RemoveReachableCodeIDs(ids ...uuid.UUID) *ReachableCodeArtifactUpdate {
	rcau.mutation.RemoveReachableCodeIDs(ids...)
	return rcau
}

// RemoveReachableCode removes "reachable_code" edges to ReachableCode entities.
func (rcau *ReachableCodeArtifactUpdate) RemoveReachableCode(r ...*ReachableCode) *ReachableCodeArtifactUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcau.RemoveReachableCodeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rcau *ReachableCodeArtifactUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rcau.sqlSave, rcau.mutation, rcau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcau *ReachableCodeArtifactUpdate) SaveX(ctx context.Context) int {
	affected, err := rcau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rcau *ReachableCodeArtifactUpdate) Exec(ctx context.Context) error {
	_, err := rcau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcau *ReachableCodeArtifactUpdate) ExecX(ctx context.Context) {
	if err := rcau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rcau *ReachableCodeArtifactUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(reachablecodeartifact.Table, reachablecodeartifact.Columns, sqlgraph.NewFieldSpec(reachablecodeartifact.FieldID, field.TypeUUID))
	if ps := rcau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcau.mutation.ArtifactName(); ok {
		_spec.SetField(reachablecodeartifact.FieldArtifactName, field.TypeString, value)
	}
	if rcau.mutation.ArtifactNameCleared() {
		_spec.ClearField(reachablecodeartifact.FieldArtifactName, field.TypeString)
	}
	if value, ok := rcau.mutation.UsedInLines(); ok {
		_spec.SetField(reachablecodeartifact.FieldUsedInLines, field.TypeString, value)
	}
	if rcau.mutation.UsedInLinesCleared() {
		_spec.ClearField(reachablecodeartifact.FieldUsedInLines, field.TypeString)
	}
	if rcau.mutation.ReachableCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reachablecodeartifact.ReachableCodeTable,
			Columns: reachablecodeartifact.ReachableCodePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reachablecode.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcau.mutation.RemovedReachableCodeIDs(); len(nodes) > 0 && !rcau.mutation.ReachableCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reachablecodeartifact.ReachableCodeTable,
			Columns: reachablecodeartifact.ReachableCodePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reachablecode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcau.mutation.ReachableCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reachablecodeartifact.ReachableCodeTable,
			Columns: reachablecodeartifact.ReachableCodePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reachablecode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rcau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reachablecodeartifact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rcau.mutation.done = true
	return n, nil
}

// ReachableCodeArtifactUpdateOne is the builder for updating a single ReachableCodeArtifact entity.
type ReachableCodeArtifactUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReachableCodeArtifactMutation
}

// SetArtifactName sets the "artifact_name" field.
func (rcauo *ReachableCodeArtifactUpdateOne) SetArtifactName(s string) *ReachableCodeArtifactUpdateOne {
	rcauo.mutation.SetArtifactName(s)
	return rcauo
}

// SetNillableArtifactName sets the "artifact_name" field if the given value is not nil.
func (rcauo *ReachableCodeArtifactUpdateOne) SetNillableArtifactName(s *string) *ReachableCodeArtifactUpdateOne {
	if s != nil {
		rcauo.SetArtifactName(*s)
	}
	return rcauo
}

// ClearArtifactName clears the value of the "artifact_name" field.
func (rcauo *ReachableCodeArtifactUpdateOne) ClearArtifactName() *ReachableCodeArtifactUpdateOne {
	rcauo.mutation.ClearArtifactName()
	return rcauo
}

// SetUsedInLines sets the "used_in_lines" field.
func (rcauo *ReachableCodeArtifactUpdateOne) SetUsedInLines(s string) *ReachableCodeArtifactUpdateOne {
	rcauo.mutation.SetUsedInLines(s)
	return rcauo
}

// SetNillableUsedInLines sets the "used_in_lines" field if the given value is not nil.
func (rcauo *ReachableCodeArtifactUpdateOne) SetNillableUsedInLines(s *string) *ReachableCodeArtifactUpdateOne {
	if s != nil {
		rcauo.SetUsedInLines(*s)
	}
	return rcauo
}

// ClearUsedInLines clears the value of the "used_in_lines" field.
func (rcauo *ReachableCodeArtifactUpdateOne) ClearUsedInLines() *ReachableCodeArtifactUpdateOne {
	rcauo.mutation.ClearUsedInLines()
	return rcauo
}

// AddReachableCodeIDs adds the "reachable_code" edge to the ReachableCode entity by IDs.
func (rcauo *ReachableCodeArtifactUpdateOne) AddReachableCodeIDs(ids ...uuid.UUID) *ReachableCodeArtifactUpdateOne {
	rcauo.mutation.AddReachableCodeIDs(ids...)
	return rcauo
}

// AddReachableCode adds the "reachable_code" edges to the ReachableCode entity.
func (rcauo *ReachableCodeArtifactUpdateOne) AddReachableCode(r ...*ReachableCode) *ReachableCodeArtifactUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcauo.AddReachableCodeIDs(ids...)
}

// Mutation returns the ReachableCodeArtifactMutation object of the builder.
func (rcauo *ReachableCodeArtifactUpdateOne) Mutation() *ReachableCodeArtifactMutation {
	return rcauo.mutation
}

// ClearReachableCode clears all "reachable_code" edges to the ReachableCode entity.
func (rcauo *ReachableCodeArtifactUpdateOne) ClearReachableCode() *ReachableCodeArtifactUpdateOne {
	rcauo.mutation.ClearReachableCode()
	return rcauo
}

// RemoveReachableCodeIDs removes the "reachable_code" edge to ReachableCode entities by IDs.
func (rcauo *ReachableCodeArtifactUpdateOne) RemoveReachableCodeIDs(ids ...uuid.UUID) *ReachableCodeArtifactUpdateOne {
	rcauo.mutation.RemoveReachableCodeIDs(ids...)
	return rcauo
}

// RemoveReachableCode removes "reachable_code" edges to ReachableCode entities.
func (rcauo *ReachableCodeArtifactUpdateOne) RemoveReachableCode(r ...*ReachableCode) *ReachableCodeArtifactUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcauo.RemoveReachableCodeIDs(ids...)
}

// Where appends a list predicates to the ReachableCodeArtifactUpdate builder.
func (rcauo *ReachableCodeArtifactUpdateOne) Where(ps ...predicate.ReachableCodeArtifact) *ReachableCodeArtifactUpdateOne {
	rcauo.mutation.Where(ps...)
	return rcauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rcauo *ReachableCodeArtifactUpdateOne) Select(field string, fields ...string) *ReachableCodeArtifactUpdateOne {
	rcauo.fields = append([]string{field}, fields...)
	return rcauo
}

// Save executes the query and returns the updated ReachableCodeArtifact entity.
func (rcauo *ReachableCodeArtifactUpdateOne) Save(ctx context.Context) (*ReachableCodeArtifact, error) {
	return withHooks(ctx, rcauo.sqlSave, rcauo.mutation, rcauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcauo *ReachableCodeArtifactUpdateOne) SaveX(ctx context.Context) *ReachableCodeArtifact {
	node, err := rcauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rcauo *ReachableCodeArtifactUpdateOne) Exec(ctx context.Context) error {
	_, err := rcauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcauo *ReachableCodeArtifactUpdateOne) ExecX(ctx context.Context) {
	if err := rcauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rcauo *ReachableCodeArtifactUpdateOne) sqlSave(ctx context.Context) (_node *ReachableCodeArtifact, err error) {
	_spec := sqlgraph.NewUpdateSpec(reachablecodeartifact.Table, reachablecodeartifact.Columns, sqlgraph.NewFieldSpec(reachablecodeartifact.FieldID, field.TypeUUID))
	id, ok := rcauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReachableCodeArtifact.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rcauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reachablecodeartifact.FieldID)
		for _, f := range fields {
			if !reachablecodeartifact.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reachablecodeartifact.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rcauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcauo.mutation.ArtifactName(); ok {
		_spec.SetField(reachablecodeartifact.FieldArtifactName, field.TypeString, value)
	}
	if rcauo.mutation.ArtifactNameCleared() {
		_spec.ClearField(reachablecodeartifact.FieldArtifactName, field.TypeString)
	}
	if value, ok := rcauo.mutation.UsedInLines(); ok {
		_spec.SetField(reachablecodeartifact.FieldUsedInLines, field.TypeString, value)
	}
	if rcauo.mutation.UsedInLinesCleared() {
		_spec.ClearField(reachablecodeartifact.FieldUsedInLines, field.TypeString)
	}
	if rcauo.mutation.ReachableCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reachablecodeartifact.ReachableCodeTable,
			Columns: reachablecodeartifact.ReachableCodePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reachablecode.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcauo.mutation.RemovedReachableCodeIDs(); len(nodes) > 0 && !rcauo.mutation.ReachableCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reachablecodeartifact.ReachableCodeTable,
			Columns: reachablecodeartifact.ReachableCodePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reachablecode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcauo.mutation.ReachableCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reachablecodeartifact.ReachableCodeTable,
			Columns: reachablecodeartifact.ReachableCodePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reachablecode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReachableCodeArtifact{config: rcauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rcauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reachablecodeartifact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rcauo.mutation.done = true
	return _node, nil
}
