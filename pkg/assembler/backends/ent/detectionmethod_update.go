// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/cwe"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/detectionmethod"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// DetectionMethodUpdate is the builder for updating DetectionMethod entities.
type DetectionMethodUpdate struct {
	config
	hooks    []Hook
	mutation *DetectionMethodMutation
}

// Where appends a list predicates to the DetectionMethodUpdate builder.
func (dmu *DetectionMethodUpdate) Where(ps ...predicate.DetectionMethod) *DetectionMethodUpdate {
	dmu.mutation.Where(ps...)
	return dmu
}

// SetDetectionID sets the "detection_id" field.
func (dmu *DetectionMethodUpdate) SetDetectionID(s string) *DetectionMethodUpdate {
	dmu.mutation.SetDetectionID(s)
	return dmu
}

// SetNillableDetectionID sets the "detection_id" field if the given value is not nil.
func (dmu *DetectionMethodUpdate) SetNillableDetectionID(s *string) *DetectionMethodUpdate {
	if s != nil {
		dmu.SetDetectionID(*s)
	}
	return dmu
}

// ClearDetectionID clears the value of the "detection_id" field.
func (dmu *DetectionMethodUpdate) ClearDetectionID() *DetectionMethodUpdate {
	dmu.mutation.ClearDetectionID()
	return dmu
}

// SetMethod sets the "method" field.
func (dmu *DetectionMethodUpdate) SetMethod(s string) *DetectionMethodUpdate {
	dmu.mutation.SetMethod(s)
	return dmu
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (dmu *DetectionMethodUpdate) SetNillableMethod(s *string) *DetectionMethodUpdate {
	if s != nil {
		dmu.SetMethod(*s)
	}
	return dmu
}

// ClearMethod clears the value of the "method" field.
func (dmu *DetectionMethodUpdate) ClearMethod() *DetectionMethodUpdate {
	dmu.mutation.ClearMethod()
	return dmu
}

// SetDescription sets the "description" field.
func (dmu *DetectionMethodUpdate) SetDescription(s string) *DetectionMethodUpdate {
	dmu.mutation.SetDescription(s)
	return dmu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dmu *DetectionMethodUpdate) SetNillableDescription(s *string) *DetectionMethodUpdate {
	if s != nil {
		dmu.SetDescription(*s)
	}
	return dmu
}

// ClearDescription clears the value of the "description" field.
func (dmu *DetectionMethodUpdate) ClearDescription() *DetectionMethodUpdate {
	dmu.mutation.ClearDescription()
	return dmu
}

// SetEffectiveness sets the "effectiveness" field.
func (dmu *DetectionMethodUpdate) SetEffectiveness(s string) *DetectionMethodUpdate {
	dmu.mutation.SetEffectiveness(s)
	return dmu
}

// SetNillableEffectiveness sets the "effectiveness" field if the given value is not nil.
func (dmu *DetectionMethodUpdate) SetNillableEffectiveness(s *string) *DetectionMethodUpdate {
	if s != nil {
		dmu.SetEffectiveness(*s)
	}
	return dmu
}

// ClearEffectiveness clears the value of the "effectiveness" field.
func (dmu *DetectionMethodUpdate) ClearEffectiveness() *DetectionMethodUpdate {
	dmu.mutation.ClearEffectiveness()
	return dmu
}

// AddCweIDs adds the "cwe" edge to the CWE entity by IDs.
func (dmu *DetectionMethodUpdate) AddCweIDs(ids ...uuid.UUID) *DetectionMethodUpdate {
	dmu.mutation.AddCweIDs(ids...)
	return dmu
}

// AddCwe adds the "cwe" edges to the CWE entity.
func (dmu *DetectionMethodUpdate) AddCwe(c ...*CWE) *DetectionMethodUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dmu.AddCweIDs(ids...)
}

// Mutation returns the DetectionMethodMutation object of the builder.
func (dmu *DetectionMethodUpdate) Mutation() *DetectionMethodMutation {
	return dmu.mutation
}

// ClearCwe clears all "cwe" edges to the CWE entity.
func (dmu *DetectionMethodUpdate) ClearCwe() *DetectionMethodUpdate {
	dmu.mutation.ClearCwe()
	return dmu
}

// RemoveCweIDs removes the "cwe" edge to CWE entities by IDs.
func (dmu *DetectionMethodUpdate) RemoveCweIDs(ids ...uuid.UUID) *DetectionMethodUpdate {
	dmu.mutation.RemoveCweIDs(ids...)
	return dmu
}

// RemoveCwe removes "cwe" edges to CWE entities.
func (dmu *DetectionMethodUpdate) RemoveCwe(c ...*CWE) *DetectionMethodUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dmu.RemoveCweIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dmu *DetectionMethodUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dmu.sqlSave, dmu.mutation, dmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dmu *DetectionMethodUpdate) SaveX(ctx context.Context) int {
	affected, err := dmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dmu *DetectionMethodUpdate) Exec(ctx context.Context) error {
	_, err := dmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmu *DetectionMethodUpdate) ExecX(ctx context.Context) {
	if err := dmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dmu *DetectionMethodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(detectionmethod.Table, detectionmethod.Columns, sqlgraph.NewFieldSpec(detectionmethod.FieldID, field.TypeUUID))
	if ps := dmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dmu.mutation.DetectionID(); ok {
		_spec.SetField(detectionmethod.FieldDetectionID, field.TypeString, value)
	}
	if dmu.mutation.DetectionIDCleared() {
		_spec.ClearField(detectionmethod.FieldDetectionID, field.TypeString)
	}
	if value, ok := dmu.mutation.Method(); ok {
		_spec.SetField(detectionmethod.FieldMethod, field.TypeString, value)
	}
	if dmu.mutation.MethodCleared() {
		_spec.ClearField(detectionmethod.FieldMethod, field.TypeString)
	}
	if value, ok := dmu.mutation.Description(); ok {
		_spec.SetField(detectionmethod.FieldDescription, field.TypeString, value)
	}
	if dmu.mutation.DescriptionCleared() {
		_spec.ClearField(detectionmethod.FieldDescription, field.TypeString)
	}
	if value, ok := dmu.mutation.Effectiveness(); ok {
		_spec.SetField(detectionmethod.FieldEffectiveness, field.TypeString, value)
	}
	if dmu.mutation.EffectivenessCleared() {
		_spec.ClearField(detectionmethod.FieldEffectiveness, field.TypeString)
	}
	if dmu.mutation.CweCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   detectionmethod.CweTable,
			Columns: detectionmethod.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmu.mutation.RemovedCweIDs(); len(nodes) > 0 && !dmu.mutation.CweCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   detectionmethod.CweTable,
			Columns: detectionmethod.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmu.mutation.CweIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   detectionmethod.CweTable,
			Columns: detectionmethod.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{detectionmethod.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dmu.mutation.done = true
	return n, nil
}

// DetectionMethodUpdateOne is the builder for updating a single DetectionMethod entity.
type DetectionMethodUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DetectionMethodMutation
}

// SetDetectionID sets the "detection_id" field.
func (dmuo *DetectionMethodUpdateOne) SetDetectionID(s string) *DetectionMethodUpdateOne {
	dmuo.mutation.SetDetectionID(s)
	return dmuo
}

// SetNillableDetectionID sets the "detection_id" field if the given value is not nil.
func (dmuo *DetectionMethodUpdateOne) SetNillableDetectionID(s *string) *DetectionMethodUpdateOne {
	if s != nil {
		dmuo.SetDetectionID(*s)
	}
	return dmuo
}

// ClearDetectionID clears the value of the "detection_id" field.
func (dmuo *DetectionMethodUpdateOne) ClearDetectionID() *DetectionMethodUpdateOne {
	dmuo.mutation.ClearDetectionID()
	return dmuo
}

// SetMethod sets the "method" field.
func (dmuo *DetectionMethodUpdateOne) SetMethod(s string) *DetectionMethodUpdateOne {
	dmuo.mutation.SetMethod(s)
	return dmuo
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (dmuo *DetectionMethodUpdateOne) SetNillableMethod(s *string) *DetectionMethodUpdateOne {
	if s != nil {
		dmuo.SetMethod(*s)
	}
	return dmuo
}

// ClearMethod clears the value of the "method" field.
func (dmuo *DetectionMethodUpdateOne) ClearMethod() *DetectionMethodUpdateOne {
	dmuo.mutation.ClearMethod()
	return dmuo
}

// SetDescription sets the "description" field.
func (dmuo *DetectionMethodUpdateOne) SetDescription(s string) *DetectionMethodUpdateOne {
	dmuo.mutation.SetDescription(s)
	return dmuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dmuo *DetectionMethodUpdateOne) SetNillableDescription(s *string) *DetectionMethodUpdateOne {
	if s != nil {
		dmuo.SetDescription(*s)
	}
	return dmuo
}

// ClearDescription clears the value of the "description" field.
func (dmuo *DetectionMethodUpdateOne) ClearDescription() *DetectionMethodUpdateOne {
	dmuo.mutation.ClearDescription()
	return dmuo
}

// SetEffectiveness sets the "effectiveness" field.
func (dmuo *DetectionMethodUpdateOne) SetEffectiveness(s string) *DetectionMethodUpdateOne {
	dmuo.mutation.SetEffectiveness(s)
	return dmuo
}

// SetNillableEffectiveness sets the "effectiveness" field if the given value is not nil.
func (dmuo *DetectionMethodUpdateOne) SetNillableEffectiveness(s *string) *DetectionMethodUpdateOne {
	if s != nil {
		dmuo.SetEffectiveness(*s)
	}
	return dmuo
}

// ClearEffectiveness clears the value of the "effectiveness" field.
func (dmuo *DetectionMethodUpdateOne) ClearEffectiveness() *DetectionMethodUpdateOne {
	dmuo.mutation.ClearEffectiveness()
	return dmuo
}

// AddCweIDs adds the "cwe" edge to the CWE entity by IDs.
func (dmuo *DetectionMethodUpdateOne) AddCweIDs(ids ...uuid.UUID) *DetectionMethodUpdateOne {
	dmuo.mutation.AddCweIDs(ids...)
	return dmuo
}

// AddCwe adds the "cwe" edges to the CWE entity.
func (dmuo *DetectionMethodUpdateOne) AddCwe(c ...*CWE) *DetectionMethodUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dmuo.AddCweIDs(ids...)
}

// Mutation returns the DetectionMethodMutation object of the builder.
func (dmuo *DetectionMethodUpdateOne) Mutation() *DetectionMethodMutation {
	return dmuo.mutation
}

// ClearCwe clears all "cwe" edges to the CWE entity.
func (dmuo *DetectionMethodUpdateOne) ClearCwe() *DetectionMethodUpdateOne {
	dmuo.mutation.ClearCwe()
	return dmuo
}

// RemoveCweIDs removes the "cwe" edge to CWE entities by IDs.
func (dmuo *DetectionMethodUpdateOne) RemoveCweIDs(ids ...uuid.UUID) *DetectionMethodUpdateOne {
	dmuo.mutation.RemoveCweIDs(ids...)
	return dmuo
}

// RemoveCwe removes "cwe" edges to CWE entities.
func (dmuo *DetectionMethodUpdateOne) RemoveCwe(c ...*CWE) *DetectionMethodUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dmuo.RemoveCweIDs(ids...)
}

// Where appends a list predicates to the DetectionMethodUpdate builder.
func (dmuo *DetectionMethodUpdateOne) Where(ps ...predicate.DetectionMethod) *DetectionMethodUpdateOne {
	dmuo.mutation.Where(ps...)
	return dmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dmuo *DetectionMethodUpdateOne) Select(field string, fields ...string) *DetectionMethodUpdateOne {
	dmuo.fields = append([]string{field}, fields...)
	return dmuo
}

// Save executes the query and returns the updated DetectionMethod entity.
func (dmuo *DetectionMethodUpdateOne) Save(ctx context.Context) (*DetectionMethod, error) {
	return withHooks(ctx, dmuo.sqlSave, dmuo.mutation, dmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dmuo *DetectionMethodUpdateOne) SaveX(ctx context.Context) *DetectionMethod {
	node, err := dmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dmuo *DetectionMethodUpdateOne) Exec(ctx context.Context) error {
	_, err := dmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmuo *DetectionMethodUpdateOne) ExecX(ctx context.Context) {
	if err := dmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dmuo *DetectionMethodUpdateOne) sqlSave(ctx context.Context) (_node *DetectionMethod, err error) {
	_spec := sqlgraph.NewUpdateSpec(detectionmethod.Table, detectionmethod.Columns, sqlgraph.NewFieldSpec(detectionmethod.FieldID, field.TypeUUID))
	id, ok := dmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DetectionMethod.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, detectionmethod.FieldID)
		for _, f := range fields {
			if !detectionmethod.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != detectionmethod.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dmuo.mutation.DetectionID(); ok {
		_spec.SetField(detectionmethod.FieldDetectionID, field.TypeString, value)
	}
	if dmuo.mutation.DetectionIDCleared() {
		_spec.ClearField(detectionmethod.FieldDetectionID, field.TypeString)
	}
	if value, ok := dmuo.mutation.Method(); ok {
		_spec.SetField(detectionmethod.FieldMethod, field.TypeString, value)
	}
	if dmuo.mutation.MethodCleared() {
		_spec.ClearField(detectionmethod.FieldMethod, field.TypeString)
	}
	if value, ok := dmuo.mutation.Description(); ok {
		_spec.SetField(detectionmethod.FieldDescription, field.TypeString, value)
	}
	if dmuo.mutation.DescriptionCleared() {
		_spec.ClearField(detectionmethod.FieldDescription, field.TypeString)
	}
	if value, ok := dmuo.mutation.Effectiveness(); ok {
		_spec.SetField(detectionmethod.FieldEffectiveness, field.TypeString, value)
	}
	if dmuo.mutation.EffectivenessCleared() {
		_spec.ClearField(detectionmethod.FieldEffectiveness, field.TypeString)
	}
	if dmuo.mutation.CweCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   detectionmethod.CweTable,
			Columns: detectionmethod.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmuo.mutation.RemovedCweIDs(); len(nodes) > 0 && !dmuo.mutation.CweCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   detectionmethod.CweTable,
			Columns: detectionmethod.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmuo.mutation.CweIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   detectionmethod.CweTable,
			Columns: detectionmethod.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DetectionMethod{config: dmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{detectionmethod.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dmuo.mutation.done = true
	return _node, nil
}
