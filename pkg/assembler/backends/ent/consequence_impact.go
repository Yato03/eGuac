// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/consequence_impact"
)

// Consequence_Impact is the model entity for the Consequence_Impact schema.
type Consequence_Impact struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Impact holds the value of the "impact" field.
	Impact string `json:"impact,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Consequence_ImpactQuery when eager-loading is set.
	Edges        Consequence_ImpactEdges `json:"edges"`
	selectValues sql.SelectValues
}

// Consequence_ImpactEdges holds the relations/edges for other nodes in the graph.
type Consequence_ImpactEdges struct {
	// Consequence holds the value of the consequence edge.
	Consequence []*Consequence `json:"consequence,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedConsequence map[string][]*Consequence
}

// ConsequenceOrErr returns the Consequence value or an error if the edge
// was not loaded in eager-loading.
func (e Consequence_ImpactEdges) ConsequenceOrErr() ([]*Consequence, error) {
	if e.loadedTypes[0] {
		return e.Consequence, nil
	}
	return nil, &NotLoadedError{edge: "consequence"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Consequence_Impact) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case consequence_impact.FieldImpact:
			values[i] = new(sql.NullString)
		case consequence_impact.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Consequence_Impact fields.
func (ci *Consequence_Impact) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case consequence_impact.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ci.ID = *value
			}
		case consequence_impact.FieldImpact:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field impact", values[i])
			} else if value.Valid {
				ci.Impact = value.String
			}
		default:
			ci.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Consequence_Impact.
// This includes values selected through modifiers, order, etc.
func (ci *Consequence_Impact) Value(name string) (ent.Value, error) {
	return ci.selectValues.Get(name)
}

// QueryConsequence queries the "consequence" edge of the Consequence_Impact entity.
func (ci *Consequence_Impact) QueryConsequence() *ConsequenceQuery {
	return NewConsequenceImpactClient(ci.config).QueryConsequence(ci)
}

// Update returns a builder for updating this Consequence_Impact.
// Note that you need to call Consequence_Impact.Unwrap() before calling this method if this Consequence_Impact
// was returned from a transaction, and the transaction was committed or rolled back.
func (ci *Consequence_Impact) Update() *ConsequenceImpactUpdateOne {
	return NewConsequenceImpactClient(ci.config).UpdateOne(ci)
}

// Unwrap unwraps the Consequence_Impact entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ci *Consequence_Impact) Unwrap() *Consequence_Impact {
	_tx, ok := ci.config.driver.(*txDriver)
	if !ok {
		panic("ent: Consequence_Impact is not a transactional entity")
	}
	ci.config.driver = _tx.drv
	return ci
}

// String implements the fmt.Stringer.
func (ci *Consequence_Impact) String() string {
	var builder strings.Builder
	builder.WriteString("Consequence_Impact(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ci.ID))
	builder.WriteString("impact=")
	builder.WriteString(ci.Impact)
	builder.WriteByte(')')
	return builder.String()
}

// NamedConsequence returns the Consequence named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ci *Consequence_Impact) NamedConsequence(name string) ([]*Consequence, error) {
	if ci.Edges.namedConsequence == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ci.Edges.namedConsequence[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ci *Consequence_Impact) appendNamedConsequence(name string, edges ...*Consequence) {
	if ci.Edges.namedConsequence == nil {
		ci.Edges.namedConsequence = make(map[string][]*Consequence)
	}
	if len(edges) == 0 {
		ci.Edges.namedConsequence[name] = []*Consequence{}
	} else {
		ci.Edges.namedConsequence[name] = append(ci.Edges.namedConsequence[name], edges...)
	}
}

// Consequence_Impacts is a parsable slice of Consequence_Impact.
type Consequence_Impacts []*Consequence_Impact
