// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/reachablecodeartifact"
)

// ReachableCodeArtifactDelete is the builder for deleting a ReachableCodeArtifact entity.
type ReachableCodeArtifactDelete struct {
	config
	hooks    []Hook
	mutation *ReachableCodeArtifactMutation
}

// Where appends a list predicates to the ReachableCodeArtifactDelete builder.
func (rcad *ReachableCodeArtifactDelete) Where(ps ...predicate.ReachableCodeArtifact) *ReachableCodeArtifactDelete {
	rcad.mutation.Where(ps...)
	return rcad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rcad *ReachableCodeArtifactDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rcad.sqlExec, rcad.mutation, rcad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rcad *ReachableCodeArtifactDelete) ExecX(ctx context.Context) int {
	n, err := rcad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rcad *ReachableCodeArtifactDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(reachablecodeartifact.Table, sqlgraph.NewFieldSpec(reachablecodeartifact.FieldID, field.TypeUUID))
	if ps := rcad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rcad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rcad.mutation.done = true
	return affected, err
}

// ReachableCodeArtifactDeleteOne is the builder for deleting a single ReachableCodeArtifact entity.
type ReachableCodeArtifactDeleteOne struct {
	rcad *ReachableCodeArtifactDelete
}

// Where appends a list predicates to the ReachableCodeArtifactDelete builder.
func (rcado *ReachableCodeArtifactDeleteOne) Where(ps ...predicate.ReachableCodeArtifact) *ReachableCodeArtifactDeleteOne {
	rcado.rcad.mutation.Where(ps...)
	return rcado
}

// Exec executes the deletion query.
func (rcado *ReachableCodeArtifactDeleteOne) Exec(ctx context.Context) error {
	n, err := rcado.rcad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{reachablecodeartifact.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rcado *ReachableCodeArtifactDeleteOne) ExecX(ctx context.Context) {
	if err := rcado.Exec(ctx); err != nil {
		panic(err)
	}
}
