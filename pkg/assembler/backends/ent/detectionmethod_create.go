// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/cwe"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/detectionmethod"
)

// DetectionMethodCreate is the builder for creating a DetectionMethod entity.
type DetectionMethodCreate struct {
	config
	mutation *DetectionMethodMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDetectionID sets the "detection_id" field.
func (dmc *DetectionMethodCreate) SetDetectionID(s string) *DetectionMethodCreate {
	dmc.mutation.SetDetectionID(s)
	return dmc
}

// SetNillableDetectionID sets the "detection_id" field if the given value is not nil.
func (dmc *DetectionMethodCreate) SetNillableDetectionID(s *string) *DetectionMethodCreate {
	if s != nil {
		dmc.SetDetectionID(*s)
	}
	return dmc
}

// SetMethod sets the "method" field.
func (dmc *DetectionMethodCreate) SetMethod(s string) *DetectionMethodCreate {
	dmc.mutation.SetMethod(s)
	return dmc
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (dmc *DetectionMethodCreate) SetNillableMethod(s *string) *DetectionMethodCreate {
	if s != nil {
		dmc.SetMethod(*s)
	}
	return dmc
}

// SetDescription sets the "description" field.
func (dmc *DetectionMethodCreate) SetDescription(s string) *DetectionMethodCreate {
	dmc.mutation.SetDescription(s)
	return dmc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dmc *DetectionMethodCreate) SetNillableDescription(s *string) *DetectionMethodCreate {
	if s != nil {
		dmc.SetDescription(*s)
	}
	return dmc
}

// SetEffectiveness sets the "effectiveness" field.
func (dmc *DetectionMethodCreate) SetEffectiveness(s string) *DetectionMethodCreate {
	dmc.mutation.SetEffectiveness(s)
	return dmc
}

// SetNillableEffectiveness sets the "effectiveness" field if the given value is not nil.
func (dmc *DetectionMethodCreate) SetNillableEffectiveness(s *string) *DetectionMethodCreate {
	if s != nil {
		dmc.SetEffectiveness(*s)
	}
	return dmc
}

// SetID sets the "id" field.
func (dmc *DetectionMethodCreate) SetID(u uuid.UUID) *DetectionMethodCreate {
	dmc.mutation.SetID(u)
	return dmc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dmc *DetectionMethodCreate) SetNillableID(u *uuid.UUID) *DetectionMethodCreate {
	if u != nil {
		dmc.SetID(*u)
	}
	return dmc
}

// AddCweIDs adds the "cwe" edge to the CWE entity by IDs.
func (dmc *DetectionMethodCreate) AddCweIDs(ids ...uuid.UUID) *DetectionMethodCreate {
	dmc.mutation.AddCweIDs(ids...)
	return dmc
}

// AddCwe adds the "cwe" edges to the CWE entity.
func (dmc *DetectionMethodCreate) AddCwe(c ...*CWE) *DetectionMethodCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dmc.AddCweIDs(ids...)
}

// Mutation returns the DetectionMethodMutation object of the builder.
func (dmc *DetectionMethodCreate) Mutation() *DetectionMethodMutation {
	return dmc.mutation
}

// Save creates the DetectionMethod in the database.
func (dmc *DetectionMethodCreate) Save(ctx context.Context) (*DetectionMethod, error) {
	dmc.defaults()
	return withHooks(ctx, dmc.sqlSave, dmc.mutation, dmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dmc *DetectionMethodCreate) SaveX(ctx context.Context) *DetectionMethod {
	v, err := dmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dmc *DetectionMethodCreate) Exec(ctx context.Context) error {
	_, err := dmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmc *DetectionMethodCreate) ExecX(ctx context.Context) {
	if err := dmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dmc *DetectionMethodCreate) defaults() {
	if _, ok := dmc.mutation.ID(); !ok {
		v := detectionmethod.DefaultID()
		dmc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dmc *DetectionMethodCreate) check() error {
	return nil
}

func (dmc *DetectionMethodCreate) sqlSave(ctx context.Context) (*DetectionMethod, error) {
	if err := dmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dmc.mutation.id = &_node.ID
	dmc.mutation.done = true
	return _node, nil
}

func (dmc *DetectionMethodCreate) createSpec() (*DetectionMethod, *sqlgraph.CreateSpec) {
	var (
		_node = &DetectionMethod{config: dmc.config}
		_spec = sqlgraph.NewCreateSpec(detectionmethod.Table, sqlgraph.NewFieldSpec(detectionmethod.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = dmc.conflict
	if id, ok := dmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dmc.mutation.DetectionID(); ok {
		_spec.SetField(detectionmethod.FieldDetectionID, field.TypeString, value)
		_node.DetectionID = &value
	}
	if value, ok := dmc.mutation.Method(); ok {
		_spec.SetField(detectionmethod.FieldMethod, field.TypeString, value)
		_node.Method = &value
	}
	if value, ok := dmc.mutation.Description(); ok {
		_spec.SetField(detectionmethod.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := dmc.mutation.Effectiveness(); ok {
		_spec.SetField(detectionmethod.FieldEffectiveness, field.TypeString, value)
		_node.Effectiveness = &value
	}
	if nodes := dmc.mutation.CweIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   detectionmethod.CweTable,
			Columns: detectionmethod.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DetectionMethod.Create().
//		SetDetectionID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DetectionMethodUpsert) {
//			SetDetectionID(v+v).
//		}).
//		Exec(ctx)
func (dmc *DetectionMethodCreate) OnConflict(opts ...sql.ConflictOption) *DetectionMethodUpsertOne {
	dmc.conflict = opts
	return &DetectionMethodUpsertOne{
		create: dmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DetectionMethod.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dmc *DetectionMethodCreate) OnConflictColumns(columns ...string) *DetectionMethodUpsertOne {
	dmc.conflict = append(dmc.conflict, sql.ConflictColumns(columns...))
	return &DetectionMethodUpsertOne{
		create: dmc,
	}
}

type (
	// DetectionMethodUpsertOne is the builder for "upsert"-ing
	//  one DetectionMethod node.
	DetectionMethodUpsertOne struct {
		create *DetectionMethodCreate
	}

	// DetectionMethodUpsert is the "OnConflict" setter.
	DetectionMethodUpsert struct {
		*sql.UpdateSet
	}
)

// SetDetectionID sets the "detection_id" field.
func (u *DetectionMethodUpsert) SetDetectionID(v string) *DetectionMethodUpsert {
	u.Set(detectionmethod.FieldDetectionID, v)
	return u
}

// UpdateDetectionID sets the "detection_id" field to the value that was provided on create.
func (u *DetectionMethodUpsert) UpdateDetectionID() *DetectionMethodUpsert {
	u.SetExcluded(detectionmethod.FieldDetectionID)
	return u
}

// ClearDetectionID clears the value of the "detection_id" field.
func (u *DetectionMethodUpsert) ClearDetectionID() *DetectionMethodUpsert {
	u.SetNull(detectionmethod.FieldDetectionID)
	return u
}

// SetMethod sets the "method" field.
func (u *DetectionMethodUpsert) SetMethod(v string) *DetectionMethodUpsert {
	u.Set(detectionmethod.FieldMethod, v)
	return u
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *DetectionMethodUpsert) UpdateMethod() *DetectionMethodUpsert {
	u.SetExcluded(detectionmethod.FieldMethod)
	return u
}

// ClearMethod clears the value of the "method" field.
func (u *DetectionMethodUpsert) ClearMethod() *DetectionMethodUpsert {
	u.SetNull(detectionmethod.FieldMethod)
	return u
}

// SetDescription sets the "description" field.
func (u *DetectionMethodUpsert) SetDescription(v string) *DetectionMethodUpsert {
	u.Set(detectionmethod.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DetectionMethodUpsert) UpdateDescription() *DetectionMethodUpsert {
	u.SetExcluded(detectionmethod.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *DetectionMethodUpsert) ClearDescription() *DetectionMethodUpsert {
	u.SetNull(detectionmethod.FieldDescription)
	return u
}

// SetEffectiveness sets the "effectiveness" field.
func (u *DetectionMethodUpsert) SetEffectiveness(v string) *DetectionMethodUpsert {
	u.Set(detectionmethod.FieldEffectiveness, v)
	return u
}

// UpdateEffectiveness sets the "effectiveness" field to the value that was provided on create.
func (u *DetectionMethodUpsert) UpdateEffectiveness() *DetectionMethodUpsert {
	u.SetExcluded(detectionmethod.FieldEffectiveness)
	return u
}

// ClearEffectiveness clears the value of the "effectiveness" field.
func (u *DetectionMethodUpsert) ClearEffectiveness() *DetectionMethodUpsert {
	u.SetNull(detectionmethod.FieldEffectiveness)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DetectionMethod.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(detectionmethod.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DetectionMethodUpsertOne) UpdateNewValues() *DetectionMethodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(detectionmethod.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DetectionMethod.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DetectionMethodUpsertOne) Ignore() *DetectionMethodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DetectionMethodUpsertOne) DoNothing() *DetectionMethodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DetectionMethodCreate.OnConflict
// documentation for more info.
func (u *DetectionMethodUpsertOne) Update(set func(*DetectionMethodUpsert)) *DetectionMethodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DetectionMethodUpsert{UpdateSet: update})
	}))
	return u
}

// SetDetectionID sets the "detection_id" field.
func (u *DetectionMethodUpsertOne) SetDetectionID(v string) *DetectionMethodUpsertOne {
	return u.Update(func(s *DetectionMethodUpsert) {
		s.SetDetectionID(v)
	})
}

// UpdateDetectionID sets the "detection_id" field to the value that was provided on create.
func (u *DetectionMethodUpsertOne) UpdateDetectionID() *DetectionMethodUpsertOne {
	return u.Update(func(s *DetectionMethodUpsert) {
		s.UpdateDetectionID()
	})
}

// ClearDetectionID clears the value of the "detection_id" field.
func (u *DetectionMethodUpsertOne) ClearDetectionID() *DetectionMethodUpsertOne {
	return u.Update(func(s *DetectionMethodUpsert) {
		s.ClearDetectionID()
	})
}

// SetMethod sets the "method" field.
func (u *DetectionMethodUpsertOne) SetMethod(v string) *DetectionMethodUpsertOne {
	return u.Update(func(s *DetectionMethodUpsert) {
		s.SetMethod(v)
	})
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *DetectionMethodUpsertOne) UpdateMethod() *DetectionMethodUpsertOne {
	return u.Update(func(s *DetectionMethodUpsert) {
		s.UpdateMethod()
	})
}

// ClearMethod clears the value of the "method" field.
func (u *DetectionMethodUpsertOne) ClearMethod() *DetectionMethodUpsertOne {
	return u.Update(func(s *DetectionMethodUpsert) {
		s.ClearMethod()
	})
}

// SetDescription sets the "description" field.
func (u *DetectionMethodUpsertOne) SetDescription(v string) *DetectionMethodUpsertOne {
	return u.Update(func(s *DetectionMethodUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DetectionMethodUpsertOne) UpdateDescription() *DetectionMethodUpsertOne {
	return u.Update(func(s *DetectionMethodUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *DetectionMethodUpsertOne) ClearDescription() *DetectionMethodUpsertOne {
	return u.Update(func(s *DetectionMethodUpsert) {
		s.ClearDescription()
	})
}

// SetEffectiveness sets the "effectiveness" field.
func (u *DetectionMethodUpsertOne) SetEffectiveness(v string) *DetectionMethodUpsertOne {
	return u.Update(func(s *DetectionMethodUpsert) {
		s.SetEffectiveness(v)
	})
}

// UpdateEffectiveness sets the "effectiveness" field to the value that was provided on create.
func (u *DetectionMethodUpsertOne) UpdateEffectiveness() *DetectionMethodUpsertOne {
	return u.Update(func(s *DetectionMethodUpsert) {
		s.UpdateEffectiveness()
	})
}

// ClearEffectiveness clears the value of the "effectiveness" field.
func (u *DetectionMethodUpsertOne) ClearEffectiveness() *DetectionMethodUpsertOne {
	return u.Update(func(s *DetectionMethodUpsert) {
		s.ClearEffectiveness()
	})
}

// Exec executes the query.
func (u *DetectionMethodUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DetectionMethodCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DetectionMethodUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DetectionMethodUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DetectionMethodUpsertOne.ID is not supported by MySQL driver. Use DetectionMethodUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DetectionMethodUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DetectionMethodCreateBulk is the builder for creating many DetectionMethod entities in bulk.
type DetectionMethodCreateBulk struct {
	config
	err      error
	builders []*DetectionMethodCreate
	conflict []sql.ConflictOption
}

// Save creates the DetectionMethod entities in the database.
func (dmcb *DetectionMethodCreateBulk) Save(ctx context.Context) ([]*DetectionMethod, error) {
	if dmcb.err != nil {
		return nil, dmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dmcb.builders))
	nodes := make([]*DetectionMethod, len(dmcb.builders))
	mutators := make([]Mutator, len(dmcb.builders))
	for i := range dmcb.builders {
		func(i int, root context.Context) {
			builder := dmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DetectionMethodMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dmcb *DetectionMethodCreateBulk) SaveX(ctx context.Context) []*DetectionMethod {
	v, err := dmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dmcb *DetectionMethodCreateBulk) Exec(ctx context.Context) error {
	_, err := dmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmcb *DetectionMethodCreateBulk) ExecX(ctx context.Context) {
	if err := dmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DetectionMethod.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DetectionMethodUpsert) {
//			SetDetectionID(v+v).
//		}).
//		Exec(ctx)
func (dmcb *DetectionMethodCreateBulk) OnConflict(opts ...sql.ConflictOption) *DetectionMethodUpsertBulk {
	dmcb.conflict = opts
	return &DetectionMethodUpsertBulk{
		create: dmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DetectionMethod.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dmcb *DetectionMethodCreateBulk) OnConflictColumns(columns ...string) *DetectionMethodUpsertBulk {
	dmcb.conflict = append(dmcb.conflict, sql.ConflictColumns(columns...))
	return &DetectionMethodUpsertBulk{
		create: dmcb,
	}
}

// DetectionMethodUpsertBulk is the builder for "upsert"-ing
// a bulk of DetectionMethod nodes.
type DetectionMethodUpsertBulk struct {
	create *DetectionMethodCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DetectionMethod.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(detectionmethod.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DetectionMethodUpsertBulk) UpdateNewValues() *DetectionMethodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(detectionmethod.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DetectionMethod.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DetectionMethodUpsertBulk) Ignore() *DetectionMethodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DetectionMethodUpsertBulk) DoNothing() *DetectionMethodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DetectionMethodCreateBulk.OnConflict
// documentation for more info.
func (u *DetectionMethodUpsertBulk) Update(set func(*DetectionMethodUpsert)) *DetectionMethodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DetectionMethodUpsert{UpdateSet: update})
	}))
	return u
}

// SetDetectionID sets the "detection_id" field.
func (u *DetectionMethodUpsertBulk) SetDetectionID(v string) *DetectionMethodUpsertBulk {
	return u.Update(func(s *DetectionMethodUpsert) {
		s.SetDetectionID(v)
	})
}

// UpdateDetectionID sets the "detection_id" field to the value that was provided on create.
func (u *DetectionMethodUpsertBulk) UpdateDetectionID() *DetectionMethodUpsertBulk {
	return u.Update(func(s *DetectionMethodUpsert) {
		s.UpdateDetectionID()
	})
}

// ClearDetectionID clears the value of the "detection_id" field.
func (u *DetectionMethodUpsertBulk) ClearDetectionID() *DetectionMethodUpsertBulk {
	return u.Update(func(s *DetectionMethodUpsert) {
		s.ClearDetectionID()
	})
}

// SetMethod sets the "method" field.
func (u *DetectionMethodUpsertBulk) SetMethod(v string) *DetectionMethodUpsertBulk {
	return u.Update(func(s *DetectionMethodUpsert) {
		s.SetMethod(v)
	})
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *DetectionMethodUpsertBulk) UpdateMethod() *DetectionMethodUpsertBulk {
	return u.Update(func(s *DetectionMethodUpsert) {
		s.UpdateMethod()
	})
}

// ClearMethod clears the value of the "method" field.
func (u *DetectionMethodUpsertBulk) ClearMethod() *DetectionMethodUpsertBulk {
	return u.Update(func(s *DetectionMethodUpsert) {
		s.ClearMethod()
	})
}

// SetDescription sets the "description" field.
func (u *DetectionMethodUpsertBulk) SetDescription(v string) *DetectionMethodUpsertBulk {
	return u.Update(func(s *DetectionMethodUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DetectionMethodUpsertBulk) UpdateDescription() *DetectionMethodUpsertBulk {
	return u.Update(func(s *DetectionMethodUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *DetectionMethodUpsertBulk) ClearDescription() *DetectionMethodUpsertBulk {
	return u.Update(func(s *DetectionMethodUpsert) {
		s.ClearDescription()
	})
}

// SetEffectiveness sets the "effectiveness" field.
func (u *DetectionMethodUpsertBulk) SetEffectiveness(v string) *DetectionMethodUpsertBulk {
	return u.Update(func(s *DetectionMethodUpsert) {
		s.SetEffectiveness(v)
	})
}

// UpdateEffectiveness sets the "effectiveness" field to the value that was provided on create.
func (u *DetectionMethodUpsertBulk) UpdateEffectiveness() *DetectionMethodUpsertBulk {
	return u.Update(func(s *DetectionMethodUpsert) {
		s.UpdateEffectiveness()
	})
}

// ClearEffectiveness clears the value of the "effectiveness" field.
func (u *DetectionMethodUpsertBulk) ClearEffectiveness() *DetectionMethodUpsertBulk {
	return u.Update(func(s *DetectionMethodUpsert) {
		s.ClearEffectiveness()
	})
}

// Exec executes the query.
func (u *DetectionMethodUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DetectionMethodCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DetectionMethodCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DetectionMethodUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
