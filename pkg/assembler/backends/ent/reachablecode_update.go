// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyvex"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/reachablecode"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/reachablecodeartifact"
)

// ReachableCodeUpdate is the builder for updating ReachableCode entities.
type ReachableCodeUpdate struct {
	config
	hooks    []Hook
	mutation *ReachableCodeMutation
}

// Where appends a list predicates to the ReachableCodeUpdate builder.
func (rcu *ReachableCodeUpdate) Where(ps ...predicate.ReachableCode) *ReachableCodeUpdate {
	rcu.mutation.Where(ps...)
	return rcu
}

// SetPathToFile sets the "path_to_file" field.
func (rcu *ReachableCodeUpdate) SetPathToFile(s string) *ReachableCodeUpdate {
	rcu.mutation.SetPathToFile(s)
	return rcu
}

// SetNillablePathToFile sets the "path_to_file" field if the given value is not nil.
func (rcu *ReachableCodeUpdate) SetNillablePathToFile(s *string) *ReachableCodeUpdate {
	if s != nil {
		rcu.SetPathToFile(*s)
	}
	return rcu
}

// ClearPathToFile clears the value of the "path_to_file" field.
func (rcu *ReachableCodeUpdate) ClearPathToFile() *ReachableCodeUpdate {
	rcu.mutation.ClearPathToFile()
	return rcu
}

// AddCertifyVexIDs adds the "certify_vex" edge to the CertifyVex entity by IDs.
func (rcu *ReachableCodeUpdate) AddCertifyVexIDs(ids ...uuid.UUID) *ReachableCodeUpdate {
	rcu.mutation.AddCertifyVexIDs(ids...)
	return rcu
}

// AddCertifyVex adds the "certify_vex" edges to the CertifyVex entity.
func (rcu *ReachableCodeUpdate) AddCertifyVex(c ...*CertifyVex) *ReachableCodeUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rcu.AddCertifyVexIDs(ids...)
}

// AddReachableCodeArtifactIDs adds the "reachable_code_artifact" edge to the ReachableCodeArtifact entity by IDs.
func (rcu *ReachableCodeUpdate) AddReachableCodeArtifactIDs(ids ...uuid.UUID) *ReachableCodeUpdate {
	rcu.mutation.AddReachableCodeArtifactIDs(ids...)
	return rcu
}

// AddReachableCodeArtifact adds the "reachable_code_artifact" edges to the ReachableCodeArtifact entity.
func (rcu *ReachableCodeUpdate) AddReachableCodeArtifact(r ...*ReachableCodeArtifact) *ReachableCodeUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcu.AddReachableCodeArtifactIDs(ids...)
}

// Mutation returns the ReachableCodeMutation object of the builder.
func (rcu *ReachableCodeUpdate) Mutation() *ReachableCodeMutation {
	return rcu.mutation
}

// ClearCertifyVex clears all "certify_vex" edges to the CertifyVex entity.
func (rcu *ReachableCodeUpdate) ClearCertifyVex() *ReachableCodeUpdate {
	rcu.mutation.ClearCertifyVex()
	return rcu
}

// RemoveCertifyVexIDs removes the "certify_vex" edge to CertifyVex entities by IDs.
func (rcu *ReachableCodeUpdate) RemoveCertifyVexIDs(ids ...uuid.UUID) *ReachableCodeUpdate {
	rcu.mutation.RemoveCertifyVexIDs(ids...)
	return rcu
}

// RemoveCertifyVex removes "certify_vex" edges to CertifyVex entities.
func (rcu *ReachableCodeUpdate) RemoveCertifyVex(c ...*CertifyVex) *ReachableCodeUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rcu.RemoveCertifyVexIDs(ids...)
}

// ClearReachableCodeArtifact clears all "reachable_code_artifact" edges to the ReachableCodeArtifact entity.
func (rcu *ReachableCodeUpdate) ClearReachableCodeArtifact() *ReachableCodeUpdate {
	rcu.mutation.ClearReachableCodeArtifact()
	return rcu
}

// RemoveReachableCodeArtifactIDs removes the "reachable_code_artifact" edge to ReachableCodeArtifact entities by IDs.
func (rcu *ReachableCodeUpdate) RemoveReachableCodeArtifactIDs(ids ...uuid.UUID) *ReachableCodeUpdate {
	rcu.mutation.RemoveReachableCodeArtifactIDs(ids...)
	return rcu
}

// RemoveReachableCodeArtifact removes "reachable_code_artifact" edges to ReachableCodeArtifact entities.
func (rcu *ReachableCodeUpdate) RemoveReachableCodeArtifact(r ...*ReachableCodeArtifact) *ReachableCodeUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcu.RemoveReachableCodeArtifactIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rcu *ReachableCodeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rcu.sqlSave, rcu.mutation, rcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcu *ReachableCodeUpdate) SaveX(ctx context.Context) int {
	affected, err := rcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rcu *ReachableCodeUpdate) Exec(ctx context.Context) error {
	_, err := rcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcu *ReachableCodeUpdate) ExecX(ctx context.Context) {
	if err := rcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rcu *ReachableCodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(reachablecode.Table, reachablecode.Columns, sqlgraph.NewFieldSpec(reachablecode.FieldID, field.TypeUUID))
	if ps := rcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcu.mutation.PathToFile(); ok {
		_spec.SetField(reachablecode.FieldPathToFile, field.TypeString, value)
	}
	if rcu.mutation.PathToFileCleared() {
		_spec.ClearField(reachablecode.FieldPathToFile, field.TypeString)
	}
	if rcu.mutation.CertifyVexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reachablecode.CertifyVexTable,
			Columns: reachablecode.CertifyVexPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.RemovedCertifyVexIDs(); len(nodes) > 0 && !rcu.mutation.CertifyVexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reachablecode.CertifyVexTable,
			Columns: reachablecode.CertifyVexPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.CertifyVexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reachablecode.CertifyVexTable,
			Columns: reachablecode.CertifyVexPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcu.mutation.ReachableCodeArtifactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   reachablecode.ReachableCodeArtifactTable,
			Columns: reachablecode.ReachableCodeArtifactPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reachablecodeartifact.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.RemovedReachableCodeArtifactIDs(); len(nodes) > 0 && !rcu.mutation.ReachableCodeArtifactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   reachablecode.ReachableCodeArtifactTable,
			Columns: reachablecode.ReachableCodeArtifactPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reachablecodeartifact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.ReachableCodeArtifactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   reachablecode.ReachableCodeArtifactTable,
			Columns: reachablecode.ReachableCodeArtifactPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reachablecodeartifact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reachablecode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rcu.mutation.done = true
	return n, nil
}

// ReachableCodeUpdateOne is the builder for updating a single ReachableCode entity.
type ReachableCodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReachableCodeMutation
}

// SetPathToFile sets the "path_to_file" field.
func (rcuo *ReachableCodeUpdateOne) SetPathToFile(s string) *ReachableCodeUpdateOne {
	rcuo.mutation.SetPathToFile(s)
	return rcuo
}

// SetNillablePathToFile sets the "path_to_file" field if the given value is not nil.
func (rcuo *ReachableCodeUpdateOne) SetNillablePathToFile(s *string) *ReachableCodeUpdateOne {
	if s != nil {
		rcuo.SetPathToFile(*s)
	}
	return rcuo
}

// ClearPathToFile clears the value of the "path_to_file" field.
func (rcuo *ReachableCodeUpdateOne) ClearPathToFile() *ReachableCodeUpdateOne {
	rcuo.mutation.ClearPathToFile()
	return rcuo
}

// AddCertifyVexIDs adds the "certify_vex" edge to the CertifyVex entity by IDs.
func (rcuo *ReachableCodeUpdateOne) AddCertifyVexIDs(ids ...uuid.UUID) *ReachableCodeUpdateOne {
	rcuo.mutation.AddCertifyVexIDs(ids...)
	return rcuo
}

// AddCertifyVex adds the "certify_vex" edges to the CertifyVex entity.
func (rcuo *ReachableCodeUpdateOne) AddCertifyVex(c ...*CertifyVex) *ReachableCodeUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rcuo.AddCertifyVexIDs(ids...)
}

// AddReachableCodeArtifactIDs adds the "reachable_code_artifact" edge to the ReachableCodeArtifact entity by IDs.
func (rcuo *ReachableCodeUpdateOne) AddReachableCodeArtifactIDs(ids ...uuid.UUID) *ReachableCodeUpdateOne {
	rcuo.mutation.AddReachableCodeArtifactIDs(ids...)
	return rcuo
}

// AddReachableCodeArtifact adds the "reachable_code_artifact" edges to the ReachableCodeArtifact entity.
func (rcuo *ReachableCodeUpdateOne) AddReachableCodeArtifact(r ...*ReachableCodeArtifact) *ReachableCodeUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcuo.AddReachableCodeArtifactIDs(ids...)
}

// Mutation returns the ReachableCodeMutation object of the builder.
func (rcuo *ReachableCodeUpdateOne) Mutation() *ReachableCodeMutation {
	return rcuo.mutation
}

// ClearCertifyVex clears all "certify_vex" edges to the CertifyVex entity.
func (rcuo *ReachableCodeUpdateOne) ClearCertifyVex() *ReachableCodeUpdateOne {
	rcuo.mutation.ClearCertifyVex()
	return rcuo
}

// RemoveCertifyVexIDs removes the "certify_vex" edge to CertifyVex entities by IDs.
func (rcuo *ReachableCodeUpdateOne) RemoveCertifyVexIDs(ids ...uuid.UUID) *ReachableCodeUpdateOne {
	rcuo.mutation.RemoveCertifyVexIDs(ids...)
	return rcuo
}

// RemoveCertifyVex removes "certify_vex" edges to CertifyVex entities.
func (rcuo *ReachableCodeUpdateOne) RemoveCertifyVex(c ...*CertifyVex) *ReachableCodeUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rcuo.RemoveCertifyVexIDs(ids...)
}

// ClearReachableCodeArtifact clears all "reachable_code_artifact" edges to the ReachableCodeArtifact entity.
func (rcuo *ReachableCodeUpdateOne) ClearReachableCodeArtifact() *ReachableCodeUpdateOne {
	rcuo.mutation.ClearReachableCodeArtifact()
	return rcuo
}

// RemoveReachableCodeArtifactIDs removes the "reachable_code_artifact" edge to ReachableCodeArtifact entities by IDs.
func (rcuo *ReachableCodeUpdateOne) RemoveReachableCodeArtifactIDs(ids ...uuid.UUID) *ReachableCodeUpdateOne {
	rcuo.mutation.RemoveReachableCodeArtifactIDs(ids...)
	return rcuo
}

// RemoveReachableCodeArtifact removes "reachable_code_artifact" edges to ReachableCodeArtifact entities.
func (rcuo *ReachableCodeUpdateOne) RemoveReachableCodeArtifact(r ...*ReachableCodeArtifact) *ReachableCodeUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcuo.RemoveReachableCodeArtifactIDs(ids...)
}

// Where appends a list predicates to the ReachableCodeUpdate builder.
func (rcuo *ReachableCodeUpdateOne) Where(ps ...predicate.ReachableCode) *ReachableCodeUpdateOne {
	rcuo.mutation.Where(ps...)
	return rcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rcuo *ReachableCodeUpdateOne) Select(field string, fields ...string) *ReachableCodeUpdateOne {
	rcuo.fields = append([]string{field}, fields...)
	return rcuo
}

// Save executes the query and returns the updated ReachableCode entity.
func (rcuo *ReachableCodeUpdateOne) Save(ctx context.Context) (*ReachableCode, error) {
	return withHooks(ctx, rcuo.sqlSave, rcuo.mutation, rcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcuo *ReachableCodeUpdateOne) SaveX(ctx context.Context) *ReachableCode {
	node, err := rcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rcuo *ReachableCodeUpdateOne) Exec(ctx context.Context) error {
	_, err := rcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcuo *ReachableCodeUpdateOne) ExecX(ctx context.Context) {
	if err := rcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rcuo *ReachableCodeUpdateOne) sqlSave(ctx context.Context) (_node *ReachableCode, err error) {
	_spec := sqlgraph.NewUpdateSpec(reachablecode.Table, reachablecode.Columns, sqlgraph.NewFieldSpec(reachablecode.FieldID, field.TypeUUID))
	id, ok := rcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReachableCode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reachablecode.FieldID)
		for _, f := range fields {
			if !reachablecode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reachablecode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcuo.mutation.PathToFile(); ok {
		_spec.SetField(reachablecode.FieldPathToFile, field.TypeString, value)
	}
	if rcuo.mutation.PathToFileCleared() {
		_spec.ClearField(reachablecode.FieldPathToFile, field.TypeString)
	}
	if rcuo.mutation.CertifyVexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reachablecode.CertifyVexTable,
			Columns: reachablecode.CertifyVexPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.RemovedCertifyVexIDs(); len(nodes) > 0 && !rcuo.mutation.CertifyVexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reachablecode.CertifyVexTable,
			Columns: reachablecode.CertifyVexPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.CertifyVexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reachablecode.CertifyVexTable,
			Columns: reachablecode.CertifyVexPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcuo.mutation.ReachableCodeArtifactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   reachablecode.ReachableCodeArtifactTable,
			Columns: reachablecode.ReachableCodeArtifactPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reachablecodeartifact.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.RemovedReachableCodeArtifactIDs(); len(nodes) > 0 && !rcuo.mutation.ReachableCodeArtifactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   reachablecode.ReachableCodeArtifactTable,
			Columns: reachablecode.ReachableCodeArtifactPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reachablecodeartifact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.ReachableCodeArtifactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   reachablecode.ReachableCodeArtifactTable,
			Columns: reachablecode.ReachableCodeArtifactPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reachablecodeartifact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReachableCode{config: rcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reachablecode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rcuo.mutation.done = true
	return _node, nil
}
