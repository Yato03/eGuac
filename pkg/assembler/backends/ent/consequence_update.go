// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/consequence"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/consequence_impact"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/consequence_scope"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/cwe"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// ConsequenceUpdate is the builder for updating Consequence entities.
type ConsequenceUpdate struct {
	config
	hooks    []Hook
	mutation *ConsequenceMutation
}

// Where appends a list predicates to the ConsequenceUpdate builder.
func (cu *ConsequenceUpdate) Where(ps ...predicate.Consequence) *ConsequenceUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetNotes sets the "notes" field.
func (cu *ConsequenceUpdate) SetNotes(s string) *ConsequenceUpdate {
	cu.mutation.SetNotes(s)
	return cu
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (cu *ConsequenceUpdate) SetNillableNotes(s *string) *ConsequenceUpdate {
	if s != nil {
		cu.SetNotes(*s)
	}
	return cu
}

// ClearNotes clears the value of the "notes" field.
func (cu *ConsequenceUpdate) ClearNotes() *ConsequenceUpdate {
	cu.mutation.ClearNotes()
	return cu
}

// SetLikelihood sets the "likelihood" field.
func (cu *ConsequenceUpdate) SetLikelihood(s string) *ConsequenceUpdate {
	cu.mutation.SetLikelihood(s)
	return cu
}

// SetNillableLikelihood sets the "likelihood" field if the given value is not nil.
func (cu *ConsequenceUpdate) SetNillableLikelihood(s *string) *ConsequenceUpdate {
	if s != nil {
		cu.SetLikelihood(*s)
	}
	return cu
}

// ClearLikelihood clears the value of the "likelihood" field.
func (cu *ConsequenceUpdate) ClearLikelihood() *ConsequenceUpdate {
	cu.mutation.ClearLikelihood()
	return cu
}

// AddCweIDs adds the "cwe" edge to the CWE entity by IDs.
func (cu *ConsequenceUpdate) AddCweIDs(ids ...uuid.UUID) *ConsequenceUpdate {
	cu.mutation.AddCweIDs(ids...)
	return cu
}

// AddCwe adds the "cwe" edges to the CWE entity.
func (cu *ConsequenceUpdate) AddCwe(c ...*CWE) *ConsequenceUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCweIDs(ids...)
}

// AddConsequenceScopeIDs adds the "consequence_scope" edge to the Consequence_Scope entity by IDs.
func (cu *ConsequenceUpdate) AddConsequenceScopeIDs(ids ...uuid.UUID) *ConsequenceUpdate {
	cu.mutation.AddConsequenceScopeIDs(ids...)
	return cu
}

// AddConsequenceScope adds the "consequence_scope" edges to the Consequence_Scope entity.
func (cu *ConsequenceUpdate) AddConsequenceScope(c ...*Consequence_Scope) *ConsequenceUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddConsequenceScopeIDs(ids...)
}

// AddConsequenceImpactIDs adds the "consequence_impact" edge to the Consequence_Impact entity by IDs.
func (cu *ConsequenceUpdate) AddConsequenceImpactIDs(ids ...uuid.UUID) *ConsequenceUpdate {
	cu.mutation.AddConsequenceImpactIDs(ids...)
	return cu
}

// AddConsequenceImpact adds the "consequence_impact" edges to the Consequence_Impact entity.
func (cu *ConsequenceUpdate) AddConsequenceImpact(c ...*Consequence_Impact) *ConsequenceUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddConsequenceImpactIDs(ids...)
}

// Mutation returns the ConsequenceMutation object of the builder.
func (cu *ConsequenceUpdate) Mutation() *ConsequenceMutation {
	return cu.mutation
}

// ClearCwe clears all "cwe" edges to the CWE entity.
func (cu *ConsequenceUpdate) ClearCwe() *ConsequenceUpdate {
	cu.mutation.ClearCwe()
	return cu
}

// RemoveCweIDs removes the "cwe" edge to CWE entities by IDs.
func (cu *ConsequenceUpdate) RemoveCweIDs(ids ...uuid.UUID) *ConsequenceUpdate {
	cu.mutation.RemoveCweIDs(ids...)
	return cu
}

// RemoveCwe removes "cwe" edges to CWE entities.
func (cu *ConsequenceUpdate) RemoveCwe(c ...*CWE) *ConsequenceUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCweIDs(ids...)
}

// ClearConsequenceScope clears all "consequence_scope" edges to the Consequence_Scope entity.
func (cu *ConsequenceUpdate) ClearConsequenceScope() *ConsequenceUpdate {
	cu.mutation.ClearConsequenceScope()
	return cu
}

// RemoveConsequenceScopeIDs removes the "consequence_scope" edge to Consequence_Scope entities by IDs.
func (cu *ConsequenceUpdate) RemoveConsequenceScopeIDs(ids ...uuid.UUID) *ConsequenceUpdate {
	cu.mutation.RemoveConsequenceScopeIDs(ids...)
	return cu
}

// RemoveConsequenceScope removes "consequence_scope" edges to Consequence_Scope entities.
func (cu *ConsequenceUpdate) RemoveConsequenceScope(c ...*Consequence_Scope) *ConsequenceUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveConsequenceScopeIDs(ids...)
}

// ClearConsequenceImpact clears all "consequence_impact" edges to the Consequence_Impact entity.
func (cu *ConsequenceUpdate) ClearConsequenceImpact() *ConsequenceUpdate {
	cu.mutation.ClearConsequenceImpact()
	return cu
}

// RemoveConsequenceImpactIDs removes the "consequence_impact" edge to Consequence_Impact entities by IDs.
func (cu *ConsequenceUpdate) RemoveConsequenceImpactIDs(ids ...uuid.UUID) *ConsequenceUpdate {
	cu.mutation.RemoveConsequenceImpactIDs(ids...)
	return cu
}

// RemoveConsequenceImpact removes "consequence_impact" edges to Consequence_Impact entities.
func (cu *ConsequenceUpdate) RemoveConsequenceImpact(c ...*Consequence_Impact) *ConsequenceUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveConsequenceImpactIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ConsequenceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ConsequenceUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ConsequenceUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ConsequenceUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ConsequenceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(consequence.Table, consequence.Columns, sqlgraph.NewFieldSpec(consequence.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Notes(); ok {
		_spec.SetField(consequence.FieldNotes, field.TypeString, value)
	}
	if cu.mutation.NotesCleared() {
		_spec.ClearField(consequence.FieldNotes, field.TypeString)
	}
	if value, ok := cu.mutation.Likelihood(); ok {
		_spec.SetField(consequence.FieldLikelihood, field.TypeString, value)
	}
	if cu.mutation.LikelihoodCleared() {
		_spec.ClearField(consequence.FieldLikelihood, field.TypeString)
	}
	if cu.mutation.CweCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consequence.CweTable,
			Columns: consequence.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCweIDs(); len(nodes) > 0 && !cu.mutation.CweCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consequence.CweTable,
			Columns: consequence.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CweIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consequence.CweTable,
			Columns: consequence.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ConsequenceScopeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   consequence.ConsequenceScopeTable,
			Columns: consequence.ConsequenceScopePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence_scope.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedConsequenceScopeIDs(); len(nodes) > 0 && !cu.mutation.ConsequenceScopeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   consequence.ConsequenceScopeTable,
			Columns: consequence.ConsequenceScopePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence_scope.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ConsequenceScopeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   consequence.ConsequenceScopeTable,
			Columns: consequence.ConsequenceScopePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence_scope.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ConsequenceImpactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   consequence.ConsequenceImpactTable,
			Columns: consequence.ConsequenceImpactPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence_impact.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedConsequenceImpactIDs(); len(nodes) > 0 && !cu.mutation.ConsequenceImpactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   consequence.ConsequenceImpactTable,
			Columns: consequence.ConsequenceImpactPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence_impact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ConsequenceImpactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   consequence.ConsequenceImpactTable,
			Columns: consequence.ConsequenceImpactPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence_impact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{consequence.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ConsequenceUpdateOne is the builder for updating a single Consequence entity.
type ConsequenceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConsequenceMutation
}

// SetNotes sets the "notes" field.
func (cuo *ConsequenceUpdateOne) SetNotes(s string) *ConsequenceUpdateOne {
	cuo.mutation.SetNotes(s)
	return cuo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (cuo *ConsequenceUpdateOne) SetNillableNotes(s *string) *ConsequenceUpdateOne {
	if s != nil {
		cuo.SetNotes(*s)
	}
	return cuo
}

// ClearNotes clears the value of the "notes" field.
func (cuo *ConsequenceUpdateOne) ClearNotes() *ConsequenceUpdateOne {
	cuo.mutation.ClearNotes()
	return cuo
}

// SetLikelihood sets the "likelihood" field.
func (cuo *ConsequenceUpdateOne) SetLikelihood(s string) *ConsequenceUpdateOne {
	cuo.mutation.SetLikelihood(s)
	return cuo
}

// SetNillableLikelihood sets the "likelihood" field if the given value is not nil.
func (cuo *ConsequenceUpdateOne) SetNillableLikelihood(s *string) *ConsequenceUpdateOne {
	if s != nil {
		cuo.SetLikelihood(*s)
	}
	return cuo
}

// ClearLikelihood clears the value of the "likelihood" field.
func (cuo *ConsequenceUpdateOne) ClearLikelihood() *ConsequenceUpdateOne {
	cuo.mutation.ClearLikelihood()
	return cuo
}

// AddCweIDs adds the "cwe" edge to the CWE entity by IDs.
func (cuo *ConsequenceUpdateOne) AddCweIDs(ids ...uuid.UUID) *ConsequenceUpdateOne {
	cuo.mutation.AddCweIDs(ids...)
	return cuo
}

// AddCwe adds the "cwe" edges to the CWE entity.
func (cuo *ConsequenceUpdateOne) AddCwe(c ...*CWE) *ConsequenceUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCweIDs(ids...)
}

// AddConsequenceScopeIDs adds the "consequence_scope" edge to the Consequence_Scope entity by IDs.
func (cuo *ConsequenceUpdateOne) AddConsequenceScopeIDs(ids ...uuid.UUID) *ConsequenceUpdateOne {
	cuo.mutation.AddConsequenceScopeIDs(ids...)
	return cuo
}

// AddConsequenceScope adds the "consequence_scope" edges to the Consequence_Scope entity.
func (cuo *ConsequenceUpdateOne) AddConsequenceScope(c ...*Consequence_Scope) *ConsequenceUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddConsequenceScopeIDs(ids...)
}

// AddConsequenceImpactIDs adds the "consequence_impact" edge to the Consequence_Impact entity by IDs.
func (cuo *ConsequenceUpdateOne) AddConsequenceImpactIDs(ids ...uuid.UUID) *ConsequenceUpdateOne {
	cuo.mutation.AddConsequenceImpactIDs(ids...)
	return cuo
}

// AddConsequenceImpact adds the "consequence_impact" edges to the Consequence_Impact entity.
func (cuo *ConsequenceUpdateOne) AddConsequenceImpact(c ...*Consequence_Impact) *ConsequenceUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddConsequenceImpactIDs(ids...)
}

// Mutation returns the ConsequenceMutation object of the builder.
func (cuo *ConsequenceUpdateOne) Mutation() *ConsequenceMutation {
	return cuo.mutation
}

// ClearCwe clears all "cwe" edges to the CWE entity.
func (cuo *ConsequenceUpdateOne) ClearCwe() *ConsequenceUpdateOne {
	cuo.mutation.ClearCwe()
	return cuo
}

// RemoveCweIDs removes the "cwe" edge to CWE entities by IDs.
func (cuo *ConsequenceUpdateOne) RemoveCweIDs(ids ...uuid.UUID) *ConsequenceUpdateOne {
	cuo.mutation.RemoveCweIDs(ids...)
	return cuo
}

// RemoveCwe removes "cwe" edges to CWE entities.
func (cuo *ConsequenceUpdateOne) RemoveCwe(c ...*CWE) *ConsequenceUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCweIDs(ids...)
}

// ClearConsequenceScope clears all "consequence_scope" edges to the Consequence_Scope entity.
func (cuo *ConsequenceUpdateOne) ClearConsequenceScope() *ConsequenceUpdateOne {
	cuo.mutation.ClearConsequenceScope()
	return cuo
}

// RemoveConsequenceScopeIDs removes the "consequence_scope" edge to Consequence_Scope entities by IDs.
func (cuo *ConsequenceUpdateOne) RemoveConsequenceScopeIDs(ids ...uuid.UUID) *ConsequenceUpdateOne {
	cuo.mutation.RemoveConsequenceScopeIDs(ids...)
	return cuo
}

// RemoveConsequenceScope removes "consequence_scope" edges to Consequence_Scope entities.
func (cuo *ConsequenceUpdateOne) RemoveConsequenceScope(c ...*Consequence_Scope) *ConsequenceUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveConsequenceScopeIDs(ids...)
}

// ClearConsequenceImpact clears all "consequence_impact" edges to the Consequence_Impact entity.
func (cuo *ConsequenceUpdateOne) ClearConsequenceImpact() *ConsequenceUpdateOne {
	cuo.mutation.ClearConsequenceImpact()
	return cuo
}

// RemoveConsequenceImpactIDs removes the "consequence_impact" edge to Consequence_Impact entities by IDs.
func (cuo *ConsequenceUpdateOne) RemoveConsequenceImpactIDs(ids ...uuid.UUID) *ConsequenceUpdateOne {
	cuo.mutation.RemoveConsequenceImpactIDs(ids...)
	return cuo
}

// RemoveConsequenceImpact removes "consequence_impact" edges to Consequence_Impact entities.
func (cuo *ConsequenceUpdateOne) RemoveConsequenceImpact(c ...*Consequence_Impact) *ConsequenceUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveConsequenceImpactIDs(ids...)
}

// Where appends a list predicates to the ConsequenceUpdate builder.
func (cuo *ConsequenceUpdateOne) Where(ps ...predicate.Consequence) *ConsequenceUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ConsequenceUpdateOne) Select(field string, fields ...string) *ConsequenceUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Consequence entity.
func (cuo *ConsequenceUpdateOne) Save(ctx context.Context) (*Consequence, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ConsequenceUpdateOne) SaveX(ctx context.Context) *Consequence {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ConsequenceUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ConsequenceUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ConsequenceUpdateOne) sqlSave(ctx context.Context) (_node *Consequence, err error) {
	_spec := sqlgraph.NewUpdateSpec(consequence.Table, consequence.Columns, sqlgraph.NewFieldSpec(consequence.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Consequence.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, consequence.FieldID)
		for _, f := range fields {
			if !consequence.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != consequence.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Notes(); ok {
		_spec.SetField(consequence.FieldNotes, field.TypeString, value)
	}
	if cuo.mutation.NotesCleared() {
		_spec.ClearField(consequence.FieldNotes, field.TypeString)
	}
	if value, ok := cuo.mutation.Likelihood(); ok {
		_spec.SetField(consequence.FieldLikelihood, field.TypeString, value)
	}
	if cuo.mutation.LikelihoodCleared() {
		_spec.ClearField(consequence.FieldLikelihood, field.TypeString)
	}
	if cuo.mutation.CweCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consequence.CweTable,
			Columns: consequence.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCweIDs(); len(nodes) > 0 && !cuo.mutation.CweCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consequence.CweTable,
			Columns: consequence.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CweIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consequence.CweTable,
			Columns: consequence.CwePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cwe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ConsequenceScopeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   consequence.ConsequenceScopeTable,
			Columns: consequence.ConsequenceScopePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence_scope.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedConsequenceScopeIDs(); len(nodes) > 0 && !cuo.mutation.ConsequenceScopeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   consequence.ConsequenceScopeTable,
			Columns: consequence.ConsequenceScopePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence_scope.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ConsequenceScopeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   consequence.ConsequenceScopeTable,
			Columns: consequence.ConsequenceScopePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence_scope.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ConsequenceImpactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   consequence.ConsequenceImpactTable,
			Columns: consequence.ConsequenceImpactPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence_impact.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedConsequenceImpactIDs(); len(nodes) > 0 && !cuo.mutation.ConsequenceImpactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   consequence.ConsequenceImpactTable,
			Columns: consequence.ConsequenceImpactPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence_impact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ConsequenceImpactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   consequence.ConsequenceImpactTable,
			Columns: consequence.ConsequenceImpactPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consequence_impact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Consequence{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{consequence.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
