// Code generated by ent, DO NOT EDIT.

package cvss

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.CVSS {
	return predicate.CVSS(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.CVSS {
	return predicate.CVSS(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.CVSS {
	return predicate.CVSS(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.CVSS {
	return predicate.CVSS(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.CVSS {
	return predicate.CVSS(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.CVSS {
	return predicate.CVSS(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.CVSS {
	return predicate.CVSS(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.CVSS {
	return predicate.CVSS(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.CVSS {
	return predicate.CVSS(sql.FieldLTE(FieldID, id))
}

// VulnImpact applies equality check predicate on the "vuln_impact" field. It's identical to VulnImpactEQ.
func VulnImpact(v float64) predicate.CVSS {
	return predicate.CVSS(sql.FieldEQ(FieldVulnImpact, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.CVSS {
	return predicate.CVSS(sql.FieldEQ(FieldVersion, v))
}

// AttackVector applies equality check predicate on the "attack_vector" field. It's identical to AttackVectorEQ.
func AttackVector(v string) predicate.CVSS {
	return predicate.CVSS(sql.FieldEQ(FieldAttackVector, v))
}

// VulnImpactEQ applies the EQ predicate on the "vuln_impact" field.
func VulnImpactEQ(v float64) predicate.CVSS {
	return predicate.CVSS(sql.FieldEQ(FieldVulnImpact, v))
}

// VulnImpactNEQ applies the NEQ predicate on the "vuln_impact" field.
func VulnImpactNEQ(v float64) predicate.CVSS {
	return predicate.CVSS(sql.FieldNEQ(FieldVulnImpact, v))
}

// VulnImpactIn applies the In predicate on the "vuln_impact" field.
func VulnImpactIn(vs ...float64) predicate.CVSS {
	return predicate.CVSS(sql.FieldIn(FieldVulnImpact, vs...))
}

// VulnImpactNotIn applies the NotIn predicate on the "vuln_impact" field.
func VulnImpactNotIn(vs ...float64) predicate.CVSS {
	return predicate.CVSS(sql.FieldNotIn(FieldVulnImpact, vs...))
}

// VulnImpactGT applies the GT predicate on the "vuln_impact" field.
func VulnImpactGT(v float64) predicate.CVSS {
	return predicate.CVSS(sql.FieldGT(FieldVulnImpact, v))
}

// VulnImpactGTE applies the GTE predicate on the "vuln_impact" field.
func VulnImpactGTE(v float64) predicate.CVSS {
	return predicate.CVSS(sql.FieldGTE(FieldVulnImpact, v))
}

// VulnImpactLT applies the LT predicate on the "vuln_impact" field.
func VulnImpactLT(v float64) predicate.CVSS {
	return predicate.CVSS(sql.FieldLT(FieldVulnImpact, v))
}

// VulnImpactLTE applies the LTE predicate on the "vuln_impact" field.
func VulnImpactLTE(v float64) predicate.CVSS {
	return predicate.CVSS(sql.FieldLTE(FieldVulnImpact, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.CVSS {
	return predicate.CVSS(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.CVSS {
	return predicate.CVSS(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.CVSS {
	return predicate.CVSS(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.CVSS {
	return predicate.CVSS(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.CVSS {
	return predicate.CVSS(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.CVSS {
	return predicate.CVSS(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.CVSS {
	return predicate.CVSS(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.CVSS {
	return predicate.CVSS(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.CVSS {
	return predicate.CVSS(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.CVSS {
	return predicate.CVSS(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.CVSS {
	return predicate.CVSS(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.CVSS {
	return predicate.CVSS(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.CVSS {
	return predicate.CVSS(sql.FieldContainsFold(FieldVersion, v))
}

// AttackVectorEQ applies the EQ predicate on the "attack_vector" field.
func AttackVectorEQ(v string) predicate.CVSS {
	return predicate.CVSS(sql.FieldEQ(FieldAttackVector, v))
}

// AttackVectorNEQ applies the NEQ predicate on the "attack_vector" field.
func AttackVectorNEQ(v string) predicate.CVSS {
	return predicate.CVSS(sql.FieldNEQ(FieldAttackVector, v))
}

// AttackVectorIn applies the In predicate on the "attack_vector" field.
func AttackVectorIn(vs ...string) predicate.CVSS {
	return predicate.CVSS(sql.FieldIn(FieldAttackVector, vs...))
}

// AttackVectorNotIn applies the NotIn predicate on the "attack_vector" field.
func AttackVectorNotIn(vs ...string) predicate.CVSS {
	return predicate.CVSS(sql.FieldNotIn(FieldAttackVector, vs...))
}

// AttackVectorGT applies the GT predicate on the "attack_vector" field.
func AttackVectorGT(v string) predicate.CVSS {
	return predicate.CVSS(sql.FieldGT(FieldAttackVector, v))
}

// AttackVectorGTE applies the GTE predicate on the "attack_vector" field.
func AttackVectorGTE(v string) predicate.CVSS {
	return predicate.CVSS(sql.FieldGTE(FieldAttackVector, v))
}

// AttackVectorLT applies the LT predicate on the "attack_vector" field.
func AttackVectorLT(v string) predicate.CVSS {
	return predicate.CVSS(sql.FieldLT(FieldAttackVector, v))
}

// AttackVectorLTE applies the LTE predicate on the "attack_vector" field.
func AttackVectorLTE(v string) predicate.CVSS {
	return predicate.CVSS(sql.FieldLTE(FieldAttackVector, v))
}

// AttackVectorContains applies the Contains predicate on the "attack_vector" field.
func AttackVectorContains(v string) predicate.CVSS {
	return predicate.CVSS(sql.FieldContains(FieldAttackVector, v))
}

// AttackVectorHasPrefix applies the HasPrefix predicate on the "attack_vector" field.
func AttackVectorHasPrefix(v string) predicate.CVSS {
	return predicate.CVSS(sql.FieldHasPrefix(FieldAttackVector, v))
}

// AttackVectorHasSuffix applies the HasSuffix predicate on the "attack_vector" field.
func AttackVectorHasSuffix(v string) predicate.CVSS {
	return predicate.CVSS(sql.FieldHasSuffix(FieldAttackVector, v))
}

// AttackVectorEqualFold applies the EqualFold predicate on the "attack_vector" field.
func AttackVectorEqualFold(v string) predicate.CVSS {
	return predicate.CVSS(sql.FieldEqualFold(FieldAttackVector, v))
}

// AttackVectorContainsFold applies the ContainsFold predicate on the "attack_vector" field.
func AttackVectorContainsFold(v string) predicate.CVSS {
	return predicate.CVSS(sql.FieldContainsFold(FieldAttackVector, v))
}

// HasCertifyVex applies the HasEdge predicate on the "certify_vex" edge.
func HasCertifyVex() predicate.CVSS {
	return predicate.CVSS(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, CertifyVexTable, CertifyVexColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCertifyVexWith applies the HasEdge predicate on the "certify_vex" edge with a given conditions (other predicates).
func HasCertifyVexWith(preds ...predicate.CertifyVex) predicate.CVSS {
	return predicate.CVSS(func(s *sql.Selector) {
		step := newCertifyVexStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CVSS) predicate.CVSS {
	return predicate.CVSS(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CVSS) predicate.CVSS {
	return predicate.CVSS(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CVSS) predicate.CVSS {
	return predicate.CVSS(sql.NotPredicates(p))
}
