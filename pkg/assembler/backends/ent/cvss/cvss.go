// Code generated by ent, DO NOT EDIT.

package cvss

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the cvss type in the database.
	Label = "cvss"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVulnImpact holds the string denoting the vuln_impact field in the database.
	FieldVulnImpact = "vuln_impact"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldAttackVector holds the string denoting the attack_vector field in the database.
	FieldAttackVector = "attack_vector"
	// EdgeCertifyVex holds the string denoting the certify_vex edge name in mutations.
	EdgeCertifyVex = "certify_vex"
	// Table holds the table name of the cvss in the database.
	Table = "cvs_ss"
	// CertifyVexTable is the table that holds the certify_vex relation/edge.
	CertifyVexTable = "certify_vexes"
	// CertifyVexInverseTable is the table name for the CertifyVex entity.
	// It exists in this package in order to avoid circular dependency with the "certifyvex" package.
	CertifyVexInverseTable = "certify_vexes"
	// CertifyVexColumn is the table column denoting the certify_vex relation/edge.
	CertifyVexColumn = "certify_vex_cvss"
)

// Columns holds all SQL columns for cvss fields.
var Columns = []string{
	FieldID,
	FieldVulnImpact,
	FieldVersion,
	FieldAttackVector,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the CVSS queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVulnImpact orders the results by the vuln_impact field.
func ByVulnImpact(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVulnImpact, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByAttackVector orders the results by the attack_vector field.
func ByAttackVector(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttackVector, opts...).ToFunc()
}

// ByCertifyVexCount orders the results by certify_vex count.
func ByCertifyVexCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCertifyVexStep(), opts...)
	}
}

// ByCertifyVex orders the results by certify_vex terms.
func ByCertifyVex(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCertifyVexStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCertifyVexStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CertifyVexInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, CertifyVexTable, CertifyVexColumn),
	)
}
