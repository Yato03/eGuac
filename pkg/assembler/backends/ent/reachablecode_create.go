// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/certifyvex"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/reachablecode"
	"github.com/guacsec/guac/pkg/assembler/backends/ent/reachablecodeartifact"
)

// ReachableCodeCreate is the builder for creating a ReachableCode entity.
type ReachableCodeCreate struct {
	config
	mutation *ReachableCodeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPathToFile sets the "path_to_file" field.
func (rcc *ReachableCodeCreate) SetPathToFile(s string) *ReachableCodeCreate {
	rcc.mutation.SetPathToFile(s)
	return rcc
}

// SetNillablePathToFile sets the "path_to_file" field if the given value is not nil.
func (rcc *ReachableCodeCreate) SetNillablePathToFile(s *string) *ReachableCodeCreate {
	if s != nil {
		rcc.SetPathToFile(*s)
	}
	return rcc
}

// SetID sets the "id" field.
func (rcc *ReachableCodeCreate) SetID(u uuid.UUID) *ReachableCodeCreate {
	rcc.mutation.SetID(u)
	return rcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rcc *ReachableCodeCreate) SetNillableID(u *uuid.UUID) *ReachableCodeCreate {
	if u != nil {
		rcc.SetID(*u)
	}
	return rcc
}

// AddCertifyVexIDs adds the "certify_vex" edge to the CertifyVex entity by IDs.
func (rcc *ReachableCodeCreate) AddCertifyVexIDs(ids ...uuid.UUID) *ReachableCodeCreate {
	rcc.mutation.AddCertifyVexIDs(ids...)
	return rcc
}

// AddCertifyVex adds the "certify_vex" edges to the CertifyVex entity.
func (rcc *ReachableCodeCreate) AddCertifyVex(c ...*CertifyVex) *ReachableCodeCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rcc.AddCertifyVexIDs(ids...)
}

// AddReachableCodeArtifactIDs adds the "reachable_code_artifact" edge to the ReachableCodeArtifact entity by IDs.
func (rcc *ReachableCodeCreate) AddReachableCodeArtifactIDs(ids ...uuid.UUID) *ReachableCodeCreate {
	rcc.mutation.AddReachableCodeArtifactIDs(ids...)
	return rcc
}

// AddReachableCodeArtifact adds the "reachable_code_artifact" edges to the ReachableCodeArtifact entity.
func (rcc *ReachableCodeCreate) AddReachableCodeArtifact(r ...*ReachableCodeArtifact) *ReachableCodeCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcc.AddReachableCodeArtifactIDs(ids...)
}

// Mutation returns the ReachableCodeMutation object of the builder.
func (rcc *ReachableCodeCreate) Mutation() *ReachableCodeMutation {
	return rcc.mutation
}

// Save creates the ReachableCode in the database.
func (rcc *ReachableCodeCreate) Save(ctx context.Context) (*ReachableCode, error) {
	rcc.defaults()
	return withHooks(ctx, rcc.sqlSave, rcc.mutation, rcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rcc *ReachableCodeCreate) SaveX(ctx context.Context) *ReachableCode {
	v, err := rcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcc *ReachableCodeCreate) Exec(ctx context.Context) error {
	_, err := rcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcc *ReachableCodeCreate) ExecX(ctx context.Context) {
	if err := rcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcc *ReachableCodeCreate) defaults() {
	if _, ok := rcc.mutation.ID(); !ok {
		v := reachablecode.DefaultID()
		rcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcc *ReachableCodeCreate) check() error {
	return nil
}

func (rcc *ReachableCodeCreate) sqlSave(ctx context.Context) (*ReachableCode, error) {
	if err := rcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rcc.mutation.id = &_node.ID
	rcc.mutation.done = true
	return _node, nil
}

func (rcc *ReachableCodeCreate) createSpec() (*ReachableCode, *sqlgraph.CreateSpec) {
	var (
		_node = &ReachableCode{config: rcc.config}
		_spec = sqlgraph.NewCreateSpec(reachablecode.Table, sqlgraph.NewFieldSpec(reachablecode.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = rcc.conflict
	if id, ok := rcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rcc.mutation.PathToFile(); ok {
		_spec.SetField(reachablecode.FieldPathToFile, field.TypeString, value)
		_node.PathToFile = &value
	}
	if nodes := rcc.mutation.CertifyVexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reachablecode.CertifyVexTable,
			Columns: reachablecode.CertifyVexPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certifyvex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rcc.mutation.ReachableCodeArtifactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   reachablecode.ReachableCodeArtifactTable,
			Columns: reachablecode.ReachableCodeArtifactPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reachablecodeartifact.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ReachableCode.Create().
//		SetPathToFile(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReachableCodeUpsert) {
//			SetPathToFile(v+v).
//		}).
//		Exec(ctx)
func (rcc *ReachableCodeCreate) OnConflict(opts ...sql.ConflictOption) *ReachableCodeUpsertOne {
	rcc.conflict = opts
	return &ReachableCodeUpsertOne{
		create: rcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ReachableCode.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcc *ReachableCodeCreate) OnConflictColumns(columns ...string) *ReachableCodeUpsertOne {
	rcc.conflict = append(rcc.conflict, sql.ConflictColumns(columns...))
	return &ReachableCodeUpsertOne{
		create: rcc,
	}
}

type (
	// ReachableCodeUpsertOne is the builder for "upsert"-ing
	//  one ReachableCode node.
	ReachableCodeUpsertOne struct {
		create *ReachableCodeCreate
	}

	// ReachableCodeUpsert is the "OnConflict" setter.
	ReachableCodeUpsert struct {
		*sql.UpdateSet
	}
)

// SetPathToFile sets the "path_to_file" field.
func (u *ReachableCodeUpsert) SetPathToFile(v string) *ReachableCodeUpsert {
	u.Set(reachablecode.FieldPathToFile, v)
	return u
}

// UpdatePathToFile sets the "path_to_file" field to the value that was provided on create.
func (u *ReachableCodeUpsert) UpdatePathToFile() *ReachableCodeUpsert {
	u.SetExcluded(reachablecode.FieldPathToFile)
	return u
}

// ClearPathToFile clears the value of the "path_to_file" field.
func (u *ReachableCodeUpsert) ClearPathToFile() *ReachableCodeUpsert {
	u.SetNull(reachablecode.FieldPathToFile)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ReachableCode.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(reachablecode.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ReachableCodeUpsertOne) UpdateNewValues() *ReachableCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(reachablecode.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ReachableCode.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ReachableCodeUpsertOne) Ignore() *ReachableCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReachableCodeUpsertOne) DoNothing() *ReachableCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReachableCodeCreate.OnConflict
// documentation for more info.
func (u *ReachableCodeUpsertOne) Update(set func(*ReachableCodeUpsert)) *ReachableCodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReachableCodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetPathToFile sets the "path_to_file" field.
func (u *ReachableCodeUpsertOne) SetPathToFile(v string) *ReachableCodeUpsertOne {
	return u.Update(func(s *ReachableCodeUpsert) {
		s.SetPathToFile(v)
	})
}

// UpdatePathToFile sets the "path_to_file" field to the value that was provided on create.
func (u *ReachableCodeUpsertOne) UpdatePathToFile() *ReachableCodeUpsertOne {
	return u.Update(func(s *ReachableCodeUpsert) {
		s.UpdatePathToFile()
	})
}

// ClearPathToFile clears the value of the "path_to_file" field.
func (u *ReachableCodeUpsertOne) ClearPathToFile() *ReachableCodeUpsertOne {
	return u.Update(func(s *ReachableCodeUpsert) {
		s.ClearPathToFile()
	})
}

// Exec executes the query.
func (u *ReachableCodeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReachableCodeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReachableCodeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ReachableCodeUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ReachableCodeUpsertOne.ID is not supported by MySQL driver. Use ReachableCodeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ReachableCodeUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ReachableCodeCreateBulk is the builder for creating many ReachableCode entities in bulk.
type ReachableCodeCreateBulk struct {
	config
	err      error
	builders []*ReachableCodeCreate
	conflict []sql.ConflictOption
}

// Save creates the ReachableCode entities in the database.
func (rccb *ReachableCodeCreateBulk) Save(ctx context.Context) ([]*ReachableCode, error) {
	if rccb.err != nil {
		return nil, rccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rccb.builders))
	nodes := make([]*ReachableCode, len(rccb.builders))
	mutators := make([]Mutator, len(rccb.builders))
	for i := range rccb.builders {
		func(i int, root context.Context) {
			builder := rccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReachableCodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rccb *ReachableCodeCreateBulk) SaveX(ctx context.Context) []*ReachableCode {
	v, err := rccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rccb *ReachableCodeCreateBulk) Exec(ctx context.Context) error {
	_, err := rccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rccb *ReachableCodeCreateBulk) ExecX(ctx context.Context) {
	if err := rccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ReachableCode.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReachableCodeUpsert) {
//			SetPathToFile(v+v).
//		}).
//		Exec(ctx)
func (rccb *ReachableCodeCreateBulk) OnConflict(opts ...sql.ConflictOption) *ReachableCodeUpsertBulk {
	rccb.conflict = opts
	return &ReachableCodeUpsertBulk{
		create: rccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ReachableCode.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rccb *ReachableCodeCreateBulk) OnConflictColumns(columns ...string) *ReachableCodeUpsertBulk {
	rccb.conflict = append(rccb.conflict, sql.ConflictColumns(columns...))
	return &ReachableCodeUpsertBulk{
		create: rccb,
	}
}

// ReachableCodeUpsertBulk is the builder for "upsert"-ing
// a bulk of ReachableCode nodes.
type ReachableCodeUpsertBulk struct {
	create *ReachableCodeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ReachableCode.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(reachablecode.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ReachableCodeUpsertBulk) UpdateNewValues() *ReachableCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(reachablecode.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ReachableCode.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ReachableCodeUpsertBulk) Ignore() *ReachableCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReachableCodeUpsertBulk) DoNothing() *ReachableCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReachableCodeCreateBulk.OnConflict
// documentation for more info.
func (u *ReachableCodeUpsertBulk) Update(set func(*ReachableCodeUpsert)) *ReachableCodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReachableCodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetPathToFile sets the "path_to_file" field.
func (u *ReachableCodeUpsertBulk) SetPathToFile(v string) *ReachableCodeUpsertBulk {
	return u.Update(func(s *ReachableCodeUpsert) {
		s.SetPathToFile(v)
	})
}

// UpdatePathToFile sets the "path_to_file" field to the value that was provided on create.
func (u *ReachableCodeUpsertBulk) UpdatePathToFile() *ReachableCodeUpsertBulk {
	return u.Update(func(s *ReachableCodeUpsert) {
		s.UpdatePathToFile()
	})
}

// ClearPathToFile clears the value of the "path_to_file" field.
func (u *ReachableCodeUpsertBulk) ClearPathToFile() *ReachableCodeUpsertBulk {
	return u.Update(func(s *ReachableCodeUpsert) {
		s.ClearPathToFile()
	})
}

// Exec executes the query.
func (u *ReachableCodeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ReachableCodeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReachableCodeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReachableCodeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
