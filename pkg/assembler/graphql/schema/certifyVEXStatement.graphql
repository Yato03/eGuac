#
# Copyright 2023 The GUAC Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is experimental and might change in the future!

# Defines a GraphQL schema for certifying VEX statements

"PackageOrArtifact is a union of Package and Artifact."
union PackageOrArtifact = Package | Artifact

"""
PackageOrArtifactSpec allows using PackageOrArtifact union as
input type to be used in read queries.

Exactly one of the value must be set to non-nil.
"""
input PackageOrArtifactSpec {
  package: PkgSpec
  artifact: ArtifactSpec
}

"""
PackageOrArtifactInput allows using PackageOrArtifact union as
input type to be used in mutations.

Exactly one of the value must be set to non-nil.
"""
input PackageOrArtifactInput {
  package: IDorPkgInput
  artifact: IDorArtifactInput
}

"""
PackageOrArtifactInputs allows using packages and artifacts as input for batch mutations.
Exactly one list must be specified.
"""
input PackageOrArtifactInputs {
  packages: [IDorPkgInput!]
  artifacts: [IDorArtifactInput!]
}

"Records the status of a VEX statement subject."
enum VexStatus {
  NOT_AFFECTED
  AFFECTED
  FIXED
  UNDER_INVESTIGATION
}

"Records the justification included in the VEX statement."
enum VexJustification {
  COMPONENT_NOT_PRESENT
  VULNERABLE_CODE_NOT_PRESENT
  VULNERABLE_CODE_NOT_IN_EXECUTE_PATH
  VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY
  INLINE_MITIGATIONS_ALREADY_EXIST
  NOT_PROVIDED
}

"""
CVSS is a representation of the Common Vulnerability Scoring System (CVSS) v3.1
base score. It is a floating point number between 0.0 and 10.0.
"""

type CVSS {
  "Base score of the vulnerability"
  VulnImpact: Float!
  "Version of the CVSS standard"
  Version: Float!
  "Vector string of the vulnerability"
  AttackString: String!
}

input CVSSInput {
  VulnImpact: Float!
  Version: Float!
  AttackString: String!
}

input CVSSSpec {
  VulnImpact: Float
  Version: Float
  AttackString: String
}


"""
CWE is a representation of the Common Weakness Enumeration (CWE) identifier.
It is a string of the form "CWE-<number>".
"""

type CWE {
  "CWE identifier"
  ID: String!
  "Abastraction of the CWE"
  Abstraction: String!
  "Description of the CWE"
  Name: String!
  "Priority of the CWE"
  Priority: Float!
  "Potential mitigations of the CWE"
  PotentialMitigations: [PotentialMitigations!]
  "Consequences of the CWE"
  Consequences: [Consequences!]
  "Demonstrative examples of the CWE"
  DemostrativeExamples: [DemostrativeExamples!]
  "Detection methods of the CWE"
  DetectionMethods: [DetectionMethods!]
}

input CWEInput {
  ID: String!
  Abstraction: String!
  Name: String!
  Priority: Float!
  PotentialMitigations: [PotentialMitigationsInput!]
  Consequences: [ConsequencesInput!]
  DemostrativeExamples: [DemostrativeExamplesInput!]
  DetectionMethods: [DetectionMethodsInput!]
}

input CWEInputSpec {
  ID: String
  Abstraction: String
  Name: String
  Priority: Float
  PotentialMitigations: [PotentialMitigationsInputSpec!]
  Consequences: [ConsequencesInputSpec!]
  DemostrativeExamples: [DemostrativeExamplesInputSpec!]
  DetectionMethods: [DetectionMethodsInputSpec!]
}

type PotentialMitigations {
  Phase: String
  Description: String
  Effectiveness: String
  EffectivenessNotes: String
}

input PotentialMitigationsInput {
  Phase: String
  Description: String
  Effectiveness: String
  EffectivenessNotes: String
}

input PotentialMitigationsInputSpec {
  Phase: String
  Description: String
  Effectiveness: String
  EffectivenessNotes: String
}

type Consequences {
  Scope: String
  Impact: String
  Notes: String
  Likelihood: String
}

input ConsequencesInput {
  Scope: String
  Impact: String
  Notes: String
  Likelihood: String
}

input ConsequencesInputSpec {
  Scope: String
  Impact: String
  Notes: String
  Likelihood: String
}

type DemostrativeExamples {
  id: ID
  IntroText: String
  ExampleCode: String
  BodyText: String
}

input DemostrativeExamplesInput {
  IntroText: String
  ExampleCode: String
  BodyText: String
}

input DemostrativeExamplesInputSpec {
  IntroText: String
  ExampleCode: String
  BodyText: String
}

type DetectionMethods {
  Method: String
  Description: String
  Effectiveness: String
}

input DetectionMethodsInput {
  Method: String
  Description: String
  Effectiveness: String
}

input DetectionMethodsInputSpec {
  Method: String
  Description: String
  Effectiveness: String
}

"""
CertifyVEXStatement is an attestation to attach VEX statements to a package or
artifact to clarify the impact of a specific vulnerability.
"""
type CertifyVEXStatement {
  id: ID!
  "Subject of attestation"
  subject: PackageOrArtifact!
  "Attested vulnerability"
  vulnerability: Vulnerability!
  "Status of the vulnerabilities with respect to the subject"
  status: VexStatus!
  "Justification from VEX statement"
  vexJustification: VexJustification!
  "VEX statement: impact_statement or action_statement depending on status"
  statement: String!
  "statusNotes may convey information about how status was determined"
  statusNotes: String!
  "Timestamp (exact time in RFC 3339 format) for the VEX statement"
  knownSince: Time!
  "Document from which this attestation is generated from"
  origin: String!
  "GUAC collector for the document"
  collector: String!
  "Reference location of the document in the persistent blob store (if that is configured)"
  documentRef: String!
  "Description of the vex statement"
  description: String
  "CVSS score of the vulnerability"
  cvss: CVSS
  "CWE identifier of the vulnerability"
  cwe: CWE
}

"""
CertifyVEXStatementSpec allows filtering the list of VEX statements to
return in a query.

Only one subject type (package or artifact) and one vulnerability may be specified.

Note that setting noVuln vulnerability type is invalid for VEX statements!
"""
input CertifyVEXStatementSpec {
  id: ID
  subject: PackageOrArtifactSpec
  vulnerability: VulnerabilitySpec
  status: VexStatus
  vexJustification: VexJustification
  statement: String
  statusNotes: String
  knownSince: Time
  origin: String
  collector: String
  documentRef: String
  description: String
  cvss: CVSSSpec
  cwe: CWEInputSpec
}

"VexStatementInputSpec represents the input to ingest VEX statements."
input VexStatementInputSpec {
  status: VexStatus!
  vexJustification: VexJustification!
  statement: String!
  statusNotes: String!
  knownSince: Time!
  origin: String!
  collector: String!
  documentRef: String!
  description: String
}

"""
VEXConnection returns the paginated results for CertifyVEXStatement.

totalCount is the total number of results returned.

pageInfo provides information to the client if there is
a next page of results and the starting and
ending cursor for the current set.

edges contains the VEXEdge which contains the current cursor
and the CertifyVEXStatement node itself
"""
type VEXConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [VEXEdge!]!
}

"""
VEXEdge contains the cursor for the resulting node and
the CertifyVEXStatement node itself.
"""
type VEXEdge {
  cursor: ID!
  node: CertifyVEXStatement!
}

extend type Query {
  "Returns all VEX certifications matching the input filter."
  CertifyVEXStatement(
    certifyVEXStatementSpec: CertifyVEXStatementSpec!
  ): [CertifyVEXStatement!]!
  "Returns a paginated results via CertifyVexConnection"
  CertifyVEXStatementList(certifyVEXStatementSpec: CertifyVEXStatementSpec!, after: ID, first: Int): VEXConnection
}

extend type Mutation {
  "Adds a VEX certification for a package. The returned ID can be empty string."
  ingestVEXStatement(
    subject: PackageOrArtifactInput!
    vulnerability: IDorVulnerabilityInput!
    vexStatement: VexStatementInputSpec!
  ): ID!
  "Bulk add VEX certifications for a package and vulnerability. The returned array of IDs can be a an array of empty string."
  ingestVEXStatements(
    subjects: PackageOrArtifactInputs!, 
    vulnerabilities: [IDorVulnerabilityInput!]!, 
    vexStatements: [VexStatementInputSpec!]!
  ): [ID!]!
}
